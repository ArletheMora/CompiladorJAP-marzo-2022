
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Sun May 08 18:26:34 MDT 2022
//----------------------------------------------------

package compilador;

import java_cup.runtime.Symbol;
import java.util.ArrayList;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Sun May 08 18:26:34 MDT 2022
  */
public class Sintax extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public Sintax() {super();}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public Sintax(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\u0260\000\002\002\004\000\002\002\010\000\002\002" +
    "\010\000\002\002\010\000\002\002\010\000\002\002\007" +
    "\000\002\002\007\000\002\002\006\000\002\002\007\000" +
    "\002\002\006\000\002\002\007\000\002\002\010\000\002" +
    "\002\007\000\002\002\006\000\002\002\006\000\002\044" +
    "\003\000\002\044\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\003\003\000\002\003\004\000\002\003\003\000\002" +
    "\003\004\000\002\003\003\000\002\003\004\000\002\003" +
    "\003\000\002\003\004\000\002\003\003\000\002\003\004" +
    "\000\002\003\003\000\002\003\004\000\002\003\003\000" +
    "\002\003\004\000\002\003\003\000\002\003\004\000\002" +
    "\003\003\000\002\003\004\000\002\003\003\000\002\003" +
    "\004\000\002\003\003\000\002\003\004\000\002\003\003" +
    "\000\002\003\004\000\002\003\003\000\002\003\004\000" +
    "\002\004\007\000\002\004\007\000\002\004\007\000\002" +
    "\004\007\000\002\004\007\000\002\004\007\000\002\004" +
    "\007\000\002\004\007\000\002\004\006\000\002\004\006" +
    "\000\002\004\006\000\002\004\006\000\002\004\007\000" +
    "\002\004\007\000\002\004\005\000\002\004\005\000\002" +
    "\004\005\000\002\004\004\000\002\004\004\000\002\004" +
    "\007\000\002\004\007\000\002\004\007\000\002\004\007" +
    "\000\002\004\007\000\002\004\007\000\002\004\006\000" +
    "\002\004\006\000\002\004\006\000\002\004\010\000\002" +
    "\004\010\000\002\004\006\000\002\004\007\000\002\004" +
    "\007\000\002\004\007\000\002\004\007\000\002\004\005" +
    "\000\002\004\005\000\002\004\004\000\002\004\004\000" +
    "\002\004\007\000\002\004\007\000\002\004\007\000\002" +
    "\004\007\000\002\004\007\000\002\004\007\000\002\004" +
    "\006\000\002\004\006\000\002\004\006\000\002\004\006" +
    "\000\002\004\005\000\002\004\005\000\002\004\004\000" +
    "\002\004\004\000\002\004\007\000\002\004\007\000\002" +
    "\004\007\000\002\004\007\000\002\004\007\000\002\004" +
    "\007\000\002\004\007\000\002\004\006\000\002\004\006" +
    "\000\002\004\006\000\002\004\006\000\002\004\007\000" +
    "\002\004\006\000\002\004\005\000\002\004\005\000\002" +
    "\004\004\000\002\004\004\000\002\004\010\000\002\004" +
    "\010\000\002\004\010\000\002\004\010\000\002\004\010" +
    "\000\002\004\010\000\002\004\010\000\002\004\010\000" +
    "\002\004\010\000\002\004\010\000\002\004\010\000\002" +
    "\004\010\000\002\004\010\000\002\004\010\000\002\004" +
    "\010\000\002\004\010\000\002\004\006\000\002\004\006" +
    "\000\002\004\006\000\002\004\006\000\002\004\006\000" +
    "\002\004\006\000\002\004\006\000\002\004\006\000\002" +
    "\004\006\000\002\004\006\000\002\004\006\000\002\004" +
    "\006\000\002\004\006\000\002\004\006\000\002\004\006" +
    "\000\002\004\006\000\002\050\005\000\002\050\005\000" +
    "\002\050\005\000\002\050\004\000\002\050\005\000\002" +
    "\050\005\000\002\050\004\000\002\050\003\000\002\050" +
    "\003\000\002\050\003\000\002\051\003\000\002\051\003" +
    "\000\002\051\003\000\002\051\003\000\002\051\003\000" +
    "\002\043\006\000\002\043\006\000\002\043\006\000\002" +
    "\043\006\000\002\043\006\000\002\043\006\000\002\043" +
    "\006\000\002\043\006\000\002\043\005\000\002\043\005" +
    "\000\002\043\005\000\002\043\005\000\002\040\003\000" +
    "\002\040\003\000\002\045\006\000\002\045\006\000\002" +
    "\045\005\000\002\045\005\000\002\045\005\000\002\005" +
    "\010\000\002\005\010\000\002\005\010\000\002\005\010" +
    "\000\002\005\007\000\002\005\007\000\002\005\007\000" +
    "\002\005\007\000\002\005\007\000\002\006\007\000\002" +
    "\006\007\000\002\006\006\000\002\006\006\000\002\006" +
    "\006\000\002\006\006\000\002\010\003\000\002\010\005" +
    "\000\002\010\005\000\002\010\005\000\002\010\005\000" +
    "\002\010\005\000\002\010\004\000\002\010\005\000\002" +
    "\007\003\000\002\011\011\000\002\011\011\000\002\011" +
    "\010\000\002\011\010\000\002\011\010\000\002\011\011" +
    "\000\002\011\013\000\002\011\010\000\002\015\007\000" +
    "\002\015\007\000\002\015\006\000\002\015\006\000\002" +
    "\015\007\000\002\015\006\000\002\016\023\000\002\016" +
    "\023\000\002\016\023\000\002\016\023\000\002\016\023" +
    "\000\002\016\023\000\002\016\023\000\002\016\023\000" +
    "\002\016\023\000\002\016\023\000\002\016\023\000\002" +
    "\016\023\000\002\016\023\000\002\016\023\000\002\016" +
    "\023\000\002\016\023\000\002\016\023\000\002\016\023" +
    "\000\002\016\023\000\002\016\023\000\002\016\023\000" +
    "\002\016\023\000\002\016\023\000\002\016\023\000\002" +
    "\016\023\000\002\016\023\000\002\016\023\000\002\016" +
    "\023\000\002\016\023\000\002\016\023\000\002\016\023" +
    "\000\002\016\023\000\002\016\023\000\002\016\023\000" +
    "\002\016\023\000\002\016\023\000\002\016\023\000\002" +
    "\016\023\000\002\016\023\000\002\016\023\000\002\016" +
    "\023\000\002\016\023\000\002\016\023\000\002\016\023" +
    "\000\002\016\023\000\002\016\023\000\002\016\023\000" +
    "\002\016\023\000\002\016\023\000\002\016\023\000\002" +
    "\016\023\000\002\016\023\000\002\016\023\000\002\016" +
    "\023\000\002\016\023\000\002\016\023\000\002\016\023" +
    "\000\002\016\023\000\002\016\023\000\002\016\023\000" +
    "\002\016\023\000\002\016\023\000\002\016\023\000\002" +
    "\016\023\000\002\016\023\000\002\016\023\000\002\016" +
    "\023\000\002\016\023\000\002\016\023\000\002\016\023" +
    "\000\002\016\023\000\002\016\022\000\002\016\022\000" +
    "\002\016\022\000\002\016\022\000\002\016\022\000\002" +
    "\016\022\000\002\016\022\000\002\016\022\000\002\016" +
    "\022\000\002\016\022\000\002\016\022\000\002\016\022" +
    "\000\002\016\022\000\002\016\022\000\002\016\022\000" +
    "\002\016\023\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\005\000\002\012\005" +
    "\000\002\012\005\000\002\012\005\000\002\012\005\000" +
    "\002\012\005\000\002\012\005\000\002\012\005\000\002" +
    "\012\005\000\002\012\005\000\002\012\005\000\002\012" +
    "\005\000\002\012\005\000\002\012\007\000\002\012\007" +
    "\000\002\012\006\000\002\012\006\000\002\012\006\000" +
    "\002\012\005\000\002\012\006\000\002\012\006\000\002" +
    "\012\007\000\002\012\007\000\002\012\010\000\002\012" +
    "\010\000\002\012\006\000\002\012\006\000\002\012\006" +
    "\000\002\012\006\000\002\012\006\000\002\012\005\000" +
    "\002\012\005\000\002\041\003\000\002\041\003\000\002" +
    "\041\003\000\002\041\003\000\002\036\005\000\002\036" +
    "\005\000\002\036\004\000\002\013\003\000\002\013\003" +
    "\000\002\013\003\000\002\013\003\000\002\013\003\000" +
    "\002\013\003\000\002\014\003\000\002\014\003\000\002" +
    "\017\003\000\002\017\003\000\002\021\003\000\002\021" +
    "\004\000\002\022\010\000\002\022\007\000\002\022\006" +
    "\000\002\022\007\000\002\022\007\000\002\022\007\000" +
    "\002\047\007\000\002\047\007\000\002\047\006\000\002" +
    "\047\006\000\002\047\006\000\002\023\011\000\002\023" +
    "\011\000\002\023\010\000\002\023\010\000\002\023\010" +
    "\000\002\023\010\000\002\023\010\000\002\024\013\000" +
    "\002\024\013\000\002\024\013\000\002\024\013\000\002" +
    "\024\012\000\002\024\012\000\002\024\012\000\002\024" +
    "\012\000\002\024\012\000\002\024\012\000\002\024\012" +
    "\000\002\024\012\000\002\024\012\000\002\024\012\000" +
    "\002\024\012\000\002\024\012\000\002\024\012\000\002" +
    "\024\012\000\002\024\012\000\002\024\012\000\002\024" +
    "\012\000\002\024\012\000\002\024\012\000\002\024\012" +
    "\000\002\024\012\000\002\024\012\000\002\024\012\000" +
    "\002\024\012\000\002\024\012\000\002\024\012\000\002" +
    "\024\012\000\002\024\012\000\002\024\012\000\002\024" +
    "\012\000\002\024\012\000\002\024\012\000\002\025\003" +
    "\000\002\025\003\000\002\025\005\000\002\025\005\000" +
    "\002\025\004\000\002\026\003\000\002\026\003\000\002" +
    "\026\005\000\002\026\005\000\002\026\004\000\002\027" +
    "\003\000\002\027\003\000\002\027\005\000\002\027\005" +
    "\000\002\027\004\000\002\030\003\000\002\030\003\000" +
    "\002\030\005\000\002\030\005\000\002\030\004\000\002" +
    "\031\016\000\002\031\012\000\002\031\016\000\002\031" +
    "\016\000\002\031\016\000\002\031\015\000\002\031\015" +
    "\000\002\031\015\000\002\031\015\000\002\031\015\000" +
    "\002\031\015\000\002\031\015\000\002\031\015\000\002" +
    "\031\015\000\002\031\015\000\002\042\012\000\002\042" +
    "\012\000\002\042\012\000\002\042\012\000\002\042\012" +
    "\000\002\042\012\000\002\042\012\000\002\042\012\000" +
    "\002\042\012\000\002\042\011\000\002\042\011\000\002" +
    "\042\011\000\002\042\011\000\002\042\011\000\002\042" +
    "\011\000\002\032\012\000\002\032\013\000\002\032\014" +
    "\000\002\032\013\000\002\032\012\000\002\032\012\000" +
    "\002\032\012\000\002\032\013\000\002\032\013\000\002" +
    "\032\013\000\002\032\013\000\002\032\013\000\002\032" +
    "\013\000\002\032\013\000\002\032\014\000\002\032\014" +
    "\000\002\032\014\000\002\032\014\000\002\032\014\000" +
    "\002\032\014\000\002\032\014\000\002\032\013\000\002" +
    "\032\013\000\002\032\013\000\002\032\013\000\002\032" +
    "\013\000\002\032\013\000\002\032\013\000\002\032\012" +
    "\000\002\032\011\000\002\032\011\000\002\032\011\000" +
    "\002\032\011\000\002\032\012\000\002\032\011\000\002" +
    "\032\013\000\002\032\012\000\002\032\012\000\002\032" +
    "\012\000\002\032\012\000\002\032\012\000\002\032\014" +
    "\000\002\032\012\000\002\032\014\000\002\032\013\000" +
    "\002\032\013\000\002\032\013\000\002\032\013\000\002" +
    "\032\013\000\002\032\013\000\002\032\012\000\002\032" +
    "\013\000\002\032\013\000\002\032\012\000\002\032\012" +
    "\000\002\032\012\000\002\032\012\000\002\032\012\000" +
    "\002\032\012\000\002\033\005\000\002\033\005\000\002" +
    "\033\005\000\002\033\005\000\002\033\004\000\002\033" +
    "\004\000\002\034\004\000\002\034\006\000\002\034\004" +
    "\000\002\034\004\000\002\034\004\000\002\034\006\000" +
    "\002\034\006\000\002\034\006\000\002\034\006\000\002" +
    "\034\005\000\002\034\005\000\002\034\006\000\002\035" +
    "\003\000\002\035\003\000\002\035\003\000\002\035\003" +
    "\000\002\052\006\000\002\052\005\000\002\052\006\000" +
    "\002\052\005\000\002\054\007\000\002\054\006\000\002" +
    "\054\006\000\002\054\006\000\002\054\006\000\002\055" +
    "\006\000\002\055\005\000\002\055\006\000\002\055\005" +
    "\000\002\056\007\000\002\056\006\000\002\056\006\000" +
    "\002\056\006\000\002\056\006\000\002\062\007\000\002" +
    "\062\006\000\002\062\006\000\002\062\006\000\002\062" +
    "\006\000\002\063\003\000\002\063\003\000\002\063\005" +
    "\000\002\063\005\000\002\063\005\000\002\066\007\000" +
    "\002\066\006\000\002\066\006\000\002\066\006\000\002" +
    "\066\006\000\002\065\007\000\002\065\006\000\002\065" +
    "\006\000\002\065\006\000\002\065\006\000\002\046\003" +
    "\000\002\046\003\000\002\046\003\000\002\046\003\000" +
    "\002\046\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\u081d\000\016\005\004\116\012\117\011\120\007\121" +
    "\006\122\005\001\002\000\020\060\u07f1\064\u07f3\116\012" +
    "\117\011\120\007\121\006\122\005\001\002\000\112\003" +
    "\ufda2\011\ufda2\013\ufda2\021\ufda2\023\ufda2\026\ufda2\030\ufda2" +
    "\034\ufda2\035\ufda2\036\ufda2\037\ufda2\040\ufda2\041\ufda2\042" +
    "\ufda2\043\ufda2\044\ufda2\045\ufda2\046\ufda2\047\ufda2\050\ufda2" +
    "\054\ufda2\055\ufda2\060\ufda2\061\ufda2\062\ufda2\063\ufda2\064" +
    "\ufda2\065\ufda2\066\ufda2\067\ufda2\072\ufda2\116\ufda2\117\ufda2" +
    "\120\ufda2\121\ufda2\122\ufda2\001\002\000\112\003\ufda3\011" +
    "\ufda3\013\ufda3\021\ufda3\023\ufda3\026\ufda3\030\ufda3\034\ufda3" +
    "\035\ufda3\036\ufda3\037\ufda3\040\ufda3\041\ufda3\042\ufda3\043" +
    "\ufda3\044\ufda3\045\ufda3\046\ufda3\047\ufda3\050\ufda3\054\ufda3" +
    "\055\ufda3\060\ufda3\061\ufda3\062\ufda3\063\ufda3\064\ufda3\065" +
    "\ufda3\066\ufda3\067\ufda3\072\ufda3\116\ufda3\117\ufda3\120\ufda3" +
    "\121\ufda3\122\ufda3\001\002\000\112\003\ufda4\011\ufda4\013" +
    "\ufda4\021\ufda4\023\ufda4\026\ufda4\030\ufda4\034\ufda4\035\ufda4" +
    "\036\ufda4\037\ufda4\040\ufda4\041\ufda4\042\ufda4\043\ufda4\044" +
    "\ufda4\045\ufda4\046\ufda4\047\ufda4\050\ufda4\054\ufda4\055\ufda4" +
    "\060\ufda4\061\ufda4\062\ufda4\063\ufda4\064\ufda4\065\ufda4\066" +
    "\ufda4\067\ufda4\072\ufda4\116\ufda4\117\ufda4\120\ufda4\121\ufda4" +
    "\122\ufda4\001\002\000\016\064\016\116\012\117\011\120" +
    "\007\121\006\122\005\001\002\000\112\003\ufda5\011\ufda5" +
    "\013\ufda5\021\ufda5\023\ufda5\026\ufda5\030\ufda5\034\ufda5\035" +
    "\ufda5\036\ufda5\037\ufda5\040\ufda5\041\ufda5\042\ufda5\043\ufda5" +
    "\044\ufda5\045\ufda5\046\ufda5\047\ufda5\050\ufda5\054\ufda5\055" +
    "\ufda5\060\ufda5\061\ufda5\062\ufda5\063\ufda5\064\ufda5\065\ufda5" +
    "\066\ufda5\067\ufda5\072\ufda5\116\ufda5\117\ufda5\120\ufda5\121" +
    "\ufda5\122\ufda5\001\002\000\112\003\ufda6\011\ufda6\013\ufda6" +
    "\021\ufda6\023\ufda6\026\ufda6\030\ufda6\034\ufda6\035\ufda6\036" +
    "\ufda6\037\ufda6\040\ufda6\041\ufda6\042\ufda6\043\ufda6\044\ufda6" +
    "\045\ufda6\046\ufda6\047\ufda6\050\ufda6\054\ufda6\055\ufda6\060" +
    "\ufda6\061\ufda6\062\ufda6\063\ufda6\064\ufda6\065\ufda6\066\ufda6" +
    "\067\ufda6\072\ufda6\116\ufda6\117\ufda6\120\ufda6\121\ufda6\122" +
    "\ufda6\001\002\000\004\002\014\001\002\000\004\002\001" +
    "\001\002\000\004\060\u07ed\001\002\000\004\060\017\001" +
    "\002\000\016\006\020\116\012\117\011\120\007\121\006" +
    "\122\005\001\002\000\020\021\u07bf\026\u07bd\116\012\117" +
    "\011\120\007\121\006\122\005\001\002\000\016\006\u0696" +
    "\116\012\117\011\120\007\121\006\122\005\001\002\000" +
    "\016\026\023\116\012\117\011\120\007\121\006\122\005" +
    "\001\002\000\016\021\u0689\116\012\117\011\120\007\121" +
    "\006\122\005\001\002\000\016\021\026\116\012\117\011" +
    "\120\007\121\006\122\005\001\002\000\004\054\u0683\001" +
    "\002\000\004\054\027\001\002\000\004\055\030\001\002" +
    "\000\004\060\031\001\002\000\056\011\042\013\035\014" +
    "\051\015\101\020\066\023\071\024\070\027\102\030\043" +
    "\064\077\075\075\077\054\100\040\110\033\113\073\114" +
    "\060\115\041\116\012\117\011\120\007\121\006\122\005" +
    "\001\002\000\066\003\uffec\004\uffec\011\042\013\035\014" +
    "\051\015\101\020\066\023\071\024\070\027\102\030\043" +
    "\033\uffec\061\uffec\064\077\075\075\077\054\100\040\110" +
    "\033\113\073\114\060\115\041\116\012\117\011\120\007" +
    "\121\006\122\005\001\002\000\020\054\u0679\067\u0112\116" +
    "\012\117\011\120\007\121\006\122\005\001\002\000\066" +
    "\003\uffda\004\uffda\011\042\013\035\014\051\015\101\020" +
    "\066\023\071\024\070\027\102\030\043\033\uffda\061\uffda" +
    "\064\077\075\075\077\054\100\040\110\033\113\073\114" +
    "\060\115\041\116\012\117\011\120\007\121\006\122\005" +
    "\001\002\000\036\011\u061f\013\u061d\023\u0623\030\u0622\056" +
    "\u061c\057\u061b\062\u061e\063\u0620\064\u0621\116\012\117\011" +
    "\120\007\121\006\122\005\001\002\000\066\003\uffe8\004" +
    "\uffe8\011\042\013\035\014\051\015\101\020\066\023\071" +
    "\024\070\027\102\030\043\033\uffe8\061\uffe8\064\077\075" +
    "\075\077\054\100\040\110\033\113\073\114\060\115\041" +
    "\116\012\117\011\120\007\121\006\122\005\001\002\000" +
    "\066\003\uffca\004\uffca\011\042\013\035\014\051\015\101" +
    "\020\066\023\071\024\070\027\102\030\043\033\uffca\061" +
    "\uffca\064\077\075\075\077\054\100\040\110\033\113\073" +
    "\114\060\115\041\116\012\117\011\120\007\121\006\122" +
    "\005\001\002\000\006\054\u0610\065\u060f\001\002\000\006" +
    "\054\u0606\067\u0605\001\002\000\036\011\u05ae\013\u05ac\023" +
    "\u05b2\030\u05b1\056\u05ab\057\u05aa\062\u05ad\063\u05b0\064\u05af" +
    "\116\012\117\011\120\007\121\006\122\005\001\002\000" +
    "\036\011\u0549\013\u0547\023\u054d\030\u054c\056\u0546\057\u0545" +
    "\062\u0548\063\u054a\064\u054b\116\012\117\011\120\007\121" +
    "\006\122\005\001\002\000\066\003\uffde\004\uffde\011\042" +
    "\013\035\014\051\015\101\020\066\023\071\024\070\027" +
    "\102\030\043\033\uffde\061\uffde\064\077\075\075\077\054" +
    "\100\040\110\033\113\073\114\060\115\041\116\012\117" +
    "\011\120\007\121\006\122\005\001\002\000\004\061\u0543" +
    "\001\002\000\066\003\ufff0\004\ufff0\011\042\013\035\014" +
    "\051\015\101\020\066\023\071\024\070\027\102\030\043" +
    "\033\ufff0\061\ufff0\064\077\075\075\077\054\100\040\110" +
    "\033\113\073\114\060\115\041\116\012\117\011\120\007" +
    "\121\006\122\005\001\002\000\066\003\uffee\004\uffee\011" +
    "\042\013\035\014\051\015\101\020\066\023\071\024\070" +
    "\027\102\030\043\033\uffee\061\uffee\064\077\075\075\077" +
    "\054\100\040\110\033\113\073\114\060\115\041\116\012" +
    "\117\011\120\007\121\006\122\005\001\002\000\066\003" +
    "\uffe6\004\uffe6\011\042\013\035\014\051\015\101\020\066" +
    "\023\071\024\070\027\102\030\043\033\uffe6\061\uffe6\064" +
    "\077\075\075\077\054\100\040\110\033\113\073\114\060" +
    "\115\041\116\012\117\011\120\007\121\006\122\005\001" +
    "\002\000\006\011\u0355\054\u0354\001\002\000\066\003\uffc8" +
    "\004\uffc8\011\042\013\035\014\051\015\101\020\066\023" +
    "\071\024\070\027\102\030\043\033\uffc8\061\uffc8\064\077" +
    "\075\075\077\054\100\040\110\033\113\073\114\060\115" +
    "\041\116\012\117\011\120\007\121\006\122\005\001\002" +
    "\000\070\003\uffea\004\uffea\010\u0347\011\042\013\035\014" +
    "\051\015\101\020\066\023\071\024\070\027\102\030\043" +
    "\033\uffea\061\uffea\064\077\075\075\077\054\100\040\110" +
    "\033\113\073\114\060\115\041\116\012\117\011\120\007" +
    "\121\006\122\005\001\002\000\006\054\u033c\065\u033b\001" +
    "\002\000\066\003\uffe0\004\uffe0\011\042\013\035\014\051" +
    "\015\101\020\066\023\071\024\070\027\102\030\043\033" +
    "\uffe0\061\uffe0\064\077\075\075\077\054\100\040\110\033" +
    "\113\073\114\060\115\041\116\012\117\011\120\007\121" +
    "\006\122\005\001\002\000\066\003\uffd6\004\uffd6\011\042" +
    "\013\035\014\051\015\101\020\066\023\071\024\070\027" +
    "\102\030\043\033\uffd6\061\uffd6\064\077\075\075\077\054" +
    "\100\040\110\033\113\073\114\060\115\041\116\012\117" +
    "\011\120\007\121\006\122\005\001\002\000\022\054\u01f3" +
    "\062\u01f1\064\u01f2\116\012\117\011\120\007\121\006\122" +
    "\005\001\002\000\006\054\u01eb\055\u01ea\001\002\000\066" +
    "\003\uffd2\004\uffd2\011\042\013\035\014\051\015\101\020" +
    "\066\023\071\024\070\027\102\030\043\033\uffd2\061\uffd2" +
    "\064\077\075\075\077\054\100\040\110\033\113\073\114" +
    "\060\115\041\116\012\117\011\120\007\121\006\122\005" +
    "\001\002\000\066\003\uffcc\004\uffcc\011\042\013\035\014" +
    "\051\015\101\020\066\023\071\024\070\027\102\030\043" +
    "\033\uffcc\061\uffcc\064\077\075\075\077\054\100\040\110" +
    "\033\113\073\114\060\115\041\116\012\117\011\120\007" +
    "\121\006\122\005\001\002\000\066\003\uffce\004\uffce\011" +
    "\042\013\035\014\051\015\101\020\066\023\071\024\070" +
    "\027\102\030\043\033\uffce\061\uffce\064\077\075\075\077" +
    "\054\100\040\110\033\113\073\114\060\115\041\116\012" +
    "\117\011\120\007\121\006\122\005\001\002\000\066\003" +
    "\uffd0\004\uffd0\011\042\013\035\014\051\015\101\020\066" +
    "\023\071\024\070\027\102\030\043\033\uffd0\061\uffd0\064" +
    "\077\075\075\077\054\100\040\110\033\113\073\114\060" +
    "\115\041\116\012\117\011\120\007\121\006\122\005\001" +
    "\002\000\066\003\uffdc\004\uffdc\011\042\013\035\014\051" +
    "\015\101\020\066\023\071\024\070\027\102\030\043\033" +
    "\uffdc\061\uffdc\064\077\075\075\077\054\100\040\110\033" +
    "\113\073\114\060\115\041\116\012\117\011\120\007\121" +
    "\006\122\005\001\002\000\030\003\u01cd\054\u01ce\064\u01cc" +
    "\065\167\066\165\067\170\116\012\117\011\120\007\121" +
    "\006\122\005\001\002\000\066\003\uffe4\004\uffe4\011\042" +
    "\013\035\014\051\015\101\020\066\023\071\024\070\027" +
    "\102\030\043\033\uffe4\061\uffe4\064\077\075\075\077\054" +
    "\100\040\110\033\113\073\114\060\115\041\116\012\117" +
    "\011\120\007\121\006\122\005\001\002\000\060\011\042" +
    "\013\035\014\051\015\101\020\066\023\071\024\070\027" +
    "\102\030\043\060\u017c\064\077\075\075\077\054\100\040" +
    "\110\033\113\073\114\060\115\041\116\012\117\011\120" +
    "\007\121\006\122\005\001\002\000\036\011\u0128\013\u0126" +
    "\023\u012c\030\u012b\056\u0125\057\u0124\062\u0127\063\u012a\064" +
    "\u0129\116\012\117\011\120\007\121\006\122\005\001\002" +
    "\000\066\003\uffd8\004\uffd8\011\042\013\035\014\051\015" +
    "\101\020\066\023\071\024\070\027\102\030\043\033\uffd8" +
    "\061\uffd8\064\077\075\075\077\054\100\040\110\033\113" +
    "\073\114\060\115\041\116\012\117\011\120\007\121\006" +
    "\122\005\001\002\000\020\054\u0114\067\u0112\116\012\117" +
    "\011\120\007\121\006\122\005\001\002\000\066\003\uffd4" +
    "\004\uffd4\011\042\013\035\014\051\015\101\020\066\023" +
    "\071\024\070\027\102\030\043\033\uffd4\061\uffd4\064\077" +
    "\075\075\077\054\100\040\110\033\113\073\114\060\115" +
    "\041\116\012\117\011\120\007\121\006\122\005\001\002" +
    "\000\006\054\u010b\055\u010a\001\002\000\066\003\uffe2\004" +
    "\uffe2\011\042\013\035\014\051\015\101\020\066\023\071" +
    "\024\070\027\102\030\043\033\uffe2\061\uffe2\064\077\075" +
    "\075\077\054\100\040\110\033\113\073\114\060\115\041" +
    "\116\012\117\011\120\007\121\006\122\005\001\002\000" +
    "\020\016\314\054\313\055\307\062\312\065\167\066\165" +
    "\067\170\001\002\000\066\003\uffc6\004\uffc6\011\042\013" +
    "\035\014\051\015\101\020\066\023\071\024\070\027\102" +
    "\030\043\033\uffc6\061\uffc6\064\077\075\075\077\054\100" +
    "\040\110\033\113\073\114\060\115\041\116\012\117\011" +
    "\120\007\121\006\122\005\001\002\000\026\054\254\064" +
    "\104\066\105\067\103\071\106\116\012\117\011\120\007" +
    "\121\006\122\005\001\002\000\026\054\110\064\104\066" +
    "\105\067\103\071\106\116\012\117\011\120\007\121\006" +
    "\122\005\001\002\000\016\041\113\042\115\043\163\044" +
    "\114\045\112\046\120\001\002\000\034\041\204\042\177" +
    "\043\201\044\203\045\206\046\202\064\154\071\205\116" +
    "\012\117\011\120\007\121\006\122\005\001\002\000\016" +
    "\041\113\042\115\043\163\044\114\045\112\046\120\001" +
    "\002\000\016\064\154\116\012\117\011\120\007\121\006" +
    "\122\005\001\002\000\004\055\146\001\002\000\026\055" +
    "\126\064\104\066\105\067\103\071\106\116\012\117\011" +
    "\120\007\121\006\122\005\001\002\000\016\041\113\042" +
    "\115\043\117\044\114\045\112\046\120\001\002\000\032" +
    "\055\ufe8d\060\ufe8d\063\ufe8d\064\ufe8d\065\ufe8d\066\ufe8d\067" +
    "\ufe8d\116\ufe8d\117\ufe8d\120\ufe8d\121\ufe8d\122\ufe8d\001\002" +
    "\000\032\055\ufe91\060\ufe91\063\ufe91\064\ufe91\065\ufe91\066" +
    "\ufe91\067\ufe91\116\ufe91\117\ufe91\120\ufe91\121\ufe91\122\ufe91" +
    "\001\002\000\032\055\ufe8e\060\ufe8e\063\ufe8e\064\ufe8e\065" +
    "\ufe8e\066\ufe8e\067\ufe8e\116\ufe8e\117\ufe8e\120\ufe8e\121\ufe8e" +
    "\122\ufe8e\001\002\000\032\055\ufe90\060\ufe90\063\ufe90\064" +
    "\ufe90\065\ufe90\066\ufe90\067\ufe90\116\ufe90\117\ufe90\120\ufe90" +
    "\121\ufe90\122\ufe90\001\002\000\022\064\123\066\124\067" +
    "\122\116\012\117\011\120\007\121\006\122\005\001\002" +
    "\000\024\064\ufe8f\065\121\066\ufe8f\067\ufe8f\116\ufe8f\117" +
    "\ufe8f\120\ufe8f\121\ufe8f\122\ufe8f\001\002\000\032\055\ufe8c" +
    "\060\ufe8c\063\ufe8c\064\ufe8c\065\ufe8c\066\ufe8c\067\ufe8c\116" +
    "\ufe8c\117\ufe8c\120\ufe8c\121\ufe8c\122\ufe8c\001\002\000\006" +
    "\055\ufeae\060\ufeae\001\002\000\006\055\ufeba\060\ufeba\001" +
    "\002\000\006\055\ufebe\060\ufebe\001\002\000\006\055\ufeb6" +
    "\060\ufeb6\001\002\000\006\055\ufebc\060\ufebc\001\002\000" +
    "\004\060\143\001\002\000\006\055\130\060\131\001\002" +
    "\000\060\011\042\013\035\014\051\015\101\020\066\023" +
    "\071\024\070\027\102\030\043\060\135\064\077\075\075" +
    "\077\054\100\040\110\033\113\073\114\060\115\041\116" +
    "\012\117\011\120\007\121\006\122\005\001\002\000\056" +
    "\011\042\013\035\014\051\015\101\020\066\023\071\024" +
    "\070\027\102\030\043\064\077\075\075\077\054\100\040" +
    "\110\033\113\073\114\060\115\041\116\012\117\011\120" +
    "\007\121\006\122\005\001\002\000\004\061\133\001\002" +
    "\000\066\003\ufe76\004\ufe76\011\ufe76\013\ufe76\014\ufe76\015" +
    "\ufe76\020\ufe76\023\ufe76\024\ufe76\027\ufe76\030\ufe76\033\ufe76" +
    "\061\ufe76\064\ufe76\075\ufe76\077\ufe76\100\ufe76\110\ufe76\113" +
    "\ufe76\114\ufe76\115\ufe76\116\ufe76\117\ufe76\120\ufe76\121\ufe76" +
    "\122\ufe76\001\002\000\004\061\142\001\002\000\060\011" +
    "\042\013\035\014\051\015\101\020\066\023\071\024\070" +
    "\027\102\030\043\061\137\064\077\075\075\077\054\100" +
    "\040\110\033\113\073\114\060\115\041\116\012\117\011" +
    "\120\007\121\006\122\005\001\002\000\006\003\140\061" +
    "\141\001\002\000\066\003\ufe78\004\ufe78\011\ufe78\013\ufe78" +
    "\014\ufe78\015\ufe78\020\ufe78\023\ufe78\024\ufe78\027\ufe78\030" +
    "\ufe78\033\ufe78\061\ufe78\064\ufe78\075\ufe78\077\ufe78\100\ufe78" +
    "\110\ufe78\113\ufe78\114\ufe78\115\ufe78\116\ufe78\117\ufe78\120" +
    "\ufe78\121\ufe78\122\ufe78\001\002\000\066\003\ufe79\004\ufe79" +
    "\011\ufe79\013\ufe79\014\ufe79\015\ufe79\020\ufe79\023\ufe79\024" +
    "\ufe79\027\ufe79\030\ufe79\033\ufe79\061\ufe79\064\ufe79\075\ufe79" +
    "\077\ufe79\100\ufe79\110\ufe79\113\ufe79\114\ufe79\115\ufe79\116" +
    "\ufe79\117\ufe79\120\ufe79\121\ufe79\122\ufe79\001\002\000\066" +
    "\003\ufe7a\004\ufe7a\011\ufe7a\013\ufe7a\014\ufe7a\015\ufe7a\020" +
    "\ufe7a\023\ufe7a\024\ufe7a\027\ufe7a\030\ufe7a\033\ufe7a\061\ufe7a" +
    "\064\ufe7a\075\ufe7a\077\ufe7a\100\ufe7a\110\ufe7a\113\ufe7a\114" +
    "\ufe7a\115\ufe7a\116\ufe7a\117\ufe7a\120\ufe7a\121\ufe7a\122\ufe7a" +
    "\001\002\000\066\003\ufe77\004\ufe77\011\ufe77\013\ufe77\014" +
    "\ufe77\015\ufe77\020\ufe77\023\ufe77\024\ufe77\027\ufe77\030\ufe77" +
    "\033\ufe77\061\ufe77\064\ufe77\075\ufe77\077\ufe77\100\ufe77\110" +
    "\ufe77\113\ufe77\114\ufe77\115\ufe77\116\ufe77\117\ufe77\120\ufe77" +
    "\121\ufe77\122\ufe77\001\002\000\056\011\042\013\035\014" +
    "\051\015\101\020\066\023\071\024\070\027\102\030\043" +
    "\064\077\075\075\077\054\100\040\110\033\113\073\114" +
    "\060\115\041\116\012\117\011\120\007\121\006\122\005" +
    "\001\002\000\004\061\145\001\002\000\066\003\ufe75\004" +
    "\ufe75\011\ufe75\013\ufe75\014\ufe75\015\ufe75\020\ufe75\023\ufe75" +
    "\024\ufe75\027\ufe75\030\ufe75\033\ufe75\061\ufe75\064\ufe75\075" +
    "\ufe75\077\ufe75\100\ufe75\110\ufe75\113\ufe75\114\ufe75\115\ufe75" +
    "\116\ufe75\117\ufe75\120\ufe75\121\ufe75\122\ufe75\001\002\000" +
    "\004\060\147\001\002\000\056\011\042\013\035\014\051" +
    "\015\101\020\066\023\071\024\070\027\102\030\043\064" +
    "\077\075\075\077\054\100\040\110\033\113\073\114\060" +
    "\115\041\116\012\117\011\120\007\121\006\122\005\001" +
    "\002\000\004\061\151\001\002\000\066\003\ufe74\004\ufe74" +
    "\011\ufe74\013\ufe74\014\ufe74\015\ufe74\020\ufe74\023\ufe74\024" +
    "\ufe74\027\ufe74\030\ufe74\033\ufe74\061\ufe74\064\ufe74\075\ufe74" +
    "\077\ufe74\100\ufe74\110\ufe74\113\ufe74\114\ufe74\115\ufe74\116" +
    "\ufe74\117\ufe74\120\ufe74\121\ufe74\122\ufe74\001\002\000\016" +
    "\041\113\042\115\043\163\044\114\045\112\046\120\001" +
    "\002\000\004\054\160\001\002\000\006\054\156\055\155" +
    "\001\002\000\030\003\ufe92\041\ufe92\042\ufe92\043\ufe92\044" +
    "\ufe92\045\ufe92\046\ufe92\055\ufe92\065\ufe92\066\ufe92\067\ufe92" +
    "\001\002\000\004\055\157\001\002\000\030\003\ufe94\041" +
    "\ufe94\042\ufe94\043\ufe94\044\ufe94\045\ufe94\046\ufe94\055\ufe94" +
    "\065\ufe94\066\ufe94\067\ufe94\001\002\000\004\055\161\001" +
    "\002\000\030\003\ufe93\041\ufe93\042\ufe93\043\ufe93\044\ufe93" +
    "\045\ufe93\046\ufe93\055\ufe93\065\ufe93\066\ufe93\067\ufe93\001" +
    "\002\000\010\065\167\066\165\067\170\001\002\000\032" +
    "\055\ufe8f\060\ufe8f\063\ufe8f\064\ufe8f\065\ufe8f\066\ufe8f\067" +
    "\ufe8f\116\ufe8f\117\ufe8f\120\ufe8f\121\ufe8f\122\ufe8f\001\002" +
    "\000\006\055\ufea4\060\ufea4\001\002\000\012\034\uff43\055" +
    "\uff43\060\uff43\063\uff43\001\002\000\006\055\ufea5\060\ufea5" +
    "\001\002\000\026\003\uff25\034\uff25\055\uff25\060\uff25\063" +
    "\uff25\116\uff25\117\uff25\120\uff25\121\uff25\122\uff25\001\002" +
    "\000\012\034\uff42\055\uff42\060\uff42\063\uff42\001\002\000" +
    "\022\064\173\066\174\067\172\116\012\117\011\120\007" +
    "\121\006\122\005\001\002\000\006\055\ufeb1\060\ufeb1\001" +
    "\002\000\006\055\ufeb5\060\ufeb5\001\002\000\006\055\ufeb0" +
    "\060\ufeb0\001\002\000\006\055\ufeb4\060\ufeb4\001\002\000" +
    "\022\064\243\066\244\067\242\116\012\117\011\120\007" +
    "\121\006\122\005\001\002\000\024\064\ufe90\065\ufe97\066" +
    "\ufe90\067\ufe90\116\ufe90\117\ufe90\120\ufe90\121\ufe90\122\ufe90" +
    "\001\002\000\016\041\113\042\115\043\163\044\114\045" +
    "\112\046\120\001\002\000\024\064\ufe8f\065\236\066\ufe8f" +
    "\067\ufe8f\116\ufe8f\117\ufe8f\120\ufe8f\121\ufe8f\122\ufe8f\001" +
    "\002\000\024\064\ufe8c\065\235\066\ufe8c\067\ufe8c\116\ufe8c" +
    "\117\ufe8c\120\ufe8c\121\ufe8c\122\ufe8c\001\002\000\024\064" +
    "\ufe8e\065\ufe96\066\ufe8e\067\ufe8e\116\ufe8e\117\ufe8e\120\ufe8e" +
    "\121\ufe8e\122\ufe8e\001\002\000\024\064\ufe91\065\ufe98\066" +
    "\ufe91\067\ufe91\116\ufe91\117\ufe91\120\ufe91\121\ufe91\122\ufe91" +
    "\001\002\000\036\003\214\041\113\042\115\043\163\044" +
    "\114\045\112\046\120\064\154\065\167\116\012\117\011" +
    "\120\007\121\006\122\005\001\002\000\024\064\ufe8d\065" +
    "\ufe95\066\ufe8d\067\ufe8d\116\ufe8d\117\ufe8d\120\ufe8d\121\ufe8d" +
    "\122\ufe8d\001\002\000\004\065\210\001\002\000\006\055" +
    "\ufeac\060\ufeac\001\002\000\020\041\113\042\115\043\163" +
    "\044\114\045\112\046\120\054\227\001\002\000\010\065" +
    "\167\066\165\067\170\001\002\000\006\055\ufe99\060\ufe99" +
    "\001\002\000\006\055\ufe9a\060\ufe9a\001\002\000\026\003" +
    "\221\041\113\042\115\043\163\044\114\045\112\046\120" +
    "\065\167\066\165\067\170\001\002\000\014\055\ufea7\060" +
    "\ufea7\065\167\066\165\067\170\001\002\000\006\055\ufe9f" +
    "\060\ufe9f\001\002\000\006\055\ufe9e\060\ufe9e\001\002\000" +
    "\006\055\ufe9d\060\ufe9d\001\002\000\006\055\ufeaa\060\ufeaa" +
    "\001\002\000\006\055\ufeab\060\ufeab\001\002\000\006\055" +
    "\ufe9b\060\ufe9b\001\002\000\006\055\ufe9c\060\ufe9c\001\002" +
    "\000\010\065\167\066\165\067\170\001\002\000\016\041" +
    "\113\042\115\043\163\044\114\045\112\046\120\001\002" +
    "\000\010\065\167\066\165\067\170\001\002\000\006\055" +
    "\ufea0\060\ufea0\001\002\000\006\055\ufea1\060\ufea1\001\002" +
    "\000\006\055\ufea2\060\ufea2\001\002\000\006\055\ufea3\060" +
    "\ufea3\001\002\000\006\055\ufead\060\ufead\001\002\000\006" +
    "\055\ufeaf\060\ufeaf\001\002\000\014\055\ufea6\060\ufea6\065" +
    "\167\066\165\067\170\001\002\000\006\055\ufea8\060\ufea8" +
    "\001\002\000\006\055\ufea9\060\ufea9\001\002\000\006\055" +
    "\ufebb\060\ufebb\001\002\000\006\055\ufebf\060\ufebf\001\002" +
    "\000\006\055\ufeb7\060\ufeb7\001\002\000\006\055\ufebd\060" +
    "\ufebd\001\002\000\022\064\250\066\251\067\247\116\012" +
    "\117\011\120\007\121\006\122\005\001\002\000\006\055" +
    "\ufeb3\060\ufeb3\001\002\000\006\055\ufeb9\060\ufeb9\001\002" +
    "\000\006\055\ufeb2\060\ufeb2\001\002\000\006\055\ufeb8\060" +
    "\ufeb8\001\002\000\004\055\302\001\002\000\026\055\255" +
    "\064\256\066\105\067\103\071\106\116\012\117\011\120" +
    "\007\121\006\122\005\001\002\000\004\060\277\001\002" +
    "\000\034\041\204\042\177\043\201\044\203\045\206\046" +
    "\202\064\154\071\271\116\012\117\011\120\007\121\006" +
    "\122\005\001\002\000\006\055\260\060\261\001\002\000" +
    "\004\060\264\001\002\000\056\011\042\013\035\014\051" +
    "\015\101\020\066\023\071\024\070\027\102\030\043\064" +
    "\077\075\075\077\054\100\040\110\033\113\073\114\060" +
    "\115\041\116\012\117\011\120\007\121\006\122\005\001" +
    "\002\000\004\061\263\001\002\000\070\003\uff21\004\uff21" +
    "\010\uff21\011\uff21\013\uff21\014\uff21\015\uff21\020\uff21\023" +
    "\uff21\024\uff21\027\uff21\030\uff21\033\uff21\061\uff21\064\uff21" +
    "\075\uff21\077\uff21\100\uff21\110\uff21\113\uff21\114\uff21\115" +
    "\uff21\116\uff21\117\uff21\120\uff21\121\uff21\122\uff21\001\002" +
    "\000\060\011\042\013\035\014\051\015\101\020\066\023" +
    "\071\024\070\027\102\030\043\061\266\064\077\075\075" +
    "\077\054\100\040\110\033\113\073\114\060\115\041\116" +
    "\012\117\011\120\007\121\006\122\005\001\002\000\006" +
    "\003\267\061\270\001\002\000\070\003\uff1d\004\uff1d\010" +
    "\uff1d\011\uff1d\013\uff1d\014\uff1d\015\uff1d\020\uff1d\023\uff1d" +
    "\024\uff1d\027\uff1d\030\uff1d\033\uff1d\061\uff1d\064\uff1d\075" +
    "\uff1d\077\uff1d\100\uff1d\110\uff1d\113\uff1d\114\uff1d\115\uff1d" +
    "\116\uff1d\117\uff1d\120\uff1d\121\uff1d\122\uff1d\001\002\000" +
    "\070\003\uff1f\004\uff1f\010\uff1f\011\uff1f\013\uff1f\014\uff1f" +
    "\015\uff1f\020\uff1f\023\uff1f\024\uff1f\027\uff1f\030\uff1f\033" +
    "\uff1f\061\uff1f\064\uff1f\075\uff1f\077\uff1f\100\uff1f\110\uff1f" +
    "\113\uff1f\114\uff1f\115\uff1f\116\uff1f\117\uff1f\120\uff1f\121" +
    "\uff1f\122\uff1f\001\002\000\070\003\uff24\004\uff24\010\uff24" +
    "\011\uff24\013\uff24\014\uff24\015\uff24\020\uff24\023\uff24\024" +
    "\uff24\027\uff24\030\uff24\033\uff24\061\uff24\064\uff24\075\uff24" +
    "\077\uff24\100\uff24\110\uff24\113\uff24\114\uff24\115\uff24\116" +
    "\uff24\117\uff24\120\uff24\121\uff24\122\uff24\001\002\000\036" +
    "\003\214\041\113\042\115\043\163\044\114\045\112\046" +
    "\120\064\154\065\167\116\012\117\011\120\007\121\006" +
    "\122\005\001\002\000\030\003\221\041\113\042\115\043" +
    "\163\044\114\045\112\046\120\055\273\065\167\066\165" +
    "\067\170\001\002\000\004\060\274\001\002\000\056\011" +
    "\042\013\035\014\051\015\101\020\066\023\071\024\070" +
    "\027\102\030\043\064\077\075\075\077\054\100\040\110" +
    "\033\113\073\114\060\115\041\116\012\117\011\120\007" +
    "\121\006\122\005\001\002\000\004\061\276\001\002\000" +
    "\070\003\uff1e\004\uff1e\010\uff1e\011\uff1e\013\uff1e\014\uff1e" +
    "\015\uff1e\020\uff1e\023\uff1e\024\uff1e\027\uff1e\030\uff1e\033" +
    "\uff1e\061\uff1e\064\uff1e\075\uff1e\077\uff1e\100\uff1e\110\uff1e" +
    "\113\uff1e\114\uff1e\115\uff1e\116\uff1e\117\uff1e\120\uff1e\121" +
    "\uff1e\122\uff1e\001\002\000\056\011\042\013\035\014\051" +
    "\015\101\020\066\023\071\024\070\027\102\030\043\064" +
    "\077\075\075\077\054\100\040\110\033\113\073\114\060" +
    "\115\041\116\012\117\011\120\007\121\006\122\005\001" +
    "\002\000\004\061\301\001\002\000\070\003\uff22\004\uff22" +
    "\010\uff22\011\uff22\013\uff22\014\uff22\015\uff22\020\uff22\023" +
    "\uff22\024\uff22\027\uff22\030\uff22\033\uff22\061\uff22\064\uff22" +
    "\075\uff22\077\uff22\100\uff22\110\uff22\113\uff22\114\uff22\115" +
    "\uff22\116\uff22\117\uff22\120\uff22\121\uff22\122\uff22\001\002" +
    "\000\004\060\303\001\002\000\056\011\042\013\035\014" +
    "\051\015\101\020\066\023\071\024\070\027\102\030\043" +
    "\064\077\075\075\077\054\100\040\110\033\113\073\114" +
    "\060\115\041\116\012\117\011\120\007\121\006\122\005" +
    "\001\002\000\004\061\305\001\002\000\070\003\uff20\004" +
    "\uff20\010\uff20\011\uff20\013\uff20\014\uff20\015\uff20\020\uff20" +
    "\023\uff20\024\uff20\027\uff20\030\uff20\033\uff20\061\uff20\064" +
    "\uff20\075\uff20\077\uff20\100\uff20\110\uff20\113\uff20\114\uff20" +
    "\115\uff20\116\uff20\117\uff20\120\uff20\121\uff20\122\uff20\001" +
    "\002\000\012\003\uffc5\004\uffc5\033\uffc5\061\uffc5\001\002" +
    "\000\004\063\u0108\001\002\000\004\063\u0107\001\002\000" +
    "\004\063\u0106\001\002\000\040\003\333\016\323\031\325" +
    "\032\324\054\331\063\340\064\330\065\335\066\327\067" +
    "\326\116\012\117\011\120\007\121\006\122\005\001\002" +
    "\000\006\055\320\063\321\001\002\000\004\054\315\001" +
    "\002\000\004\055\316\001\002\000\004\063\317\001\002" +
    "\000\066\003\uff34\004\uff34\011\uff34\013\uff34\014\uff34\015" +
    "\uff34\020\uff34\023\uff34\024\uff34\027\uff34\030\uff34\033\uff34" +
    "\061\uff34\064\uff34\075\uff34\077\uff34\100\uff34\110\uff34\113" +
    "\uff34\114\uff34\115\uff34\116\uff34\117\uff34\120\uff34\121\uff34" +
    "\122\uff34\001\002\000\070\003\uff3d\004\uff3d\011\uff3d\013" +
    "\uff3d\014\uff3d\015\uff3d\020\uff3d\023\uff3d\024\uff3d\027\uff3d" +
    "\030\uff3d\033\uff3d\061\uff3d\063\322\064\uff3d\075\uff3d\077" +
    "\uff3d\100\uff3d\110\uff3d\113\uff3d\114\uff3d\115\uff3d\116\uff3d" +
    "\117\uff3d\120\uff3d\121\uff3d\122\uff3d\001\002\000\066\003" +
    "\uff3e\004\uff3e\011\uff3e\013\uff3e\014\uff3e\015\uff3e\020\uff3e" +
    "\023\uff3e\024\uff3e\027\uff3e\030\uff3e\033\uff3e\061\uff3e\064" +
    "\uff3e\075\uff3e\077\uff3e\100\uff3e\110\uff3e\113\uff3e\114\uff3e" +
    "\115\uff3e\116\uff3e\117\uff3e\120\uff3e\121\uff3e\122\uff3e\001" +
    "\002\000\066\003\uff41\004\uff41\011\uff41\013\uff41\014\uff41" +
    "\015\uff41\020\uff41\023\uff41\024\uff41\027\uff41\030\uff41\033" +
    "\uff41\061\uff41\064\uff41\075\uff41\077\uff41\100\uff41\110\uff41" +
    "\113\uff41\114\uff41\115\uff41\116\uff41\117\uff41\120\uff41\121" +
    "\uff41\122\uff41\001\002\000\006\054\u0101\055\u0100\001\002" +
    "\000\004\063\377\001\002\000\004\063\376\001\002\000" +
    "\044\003\uff42\034\345\035\343\036\350\037\342\040\346" +
    "\054\uff42\055\uff42\063\uff42\064\uff42\066\uff42\067\uff42\116" +
    "\uff42\117\uff42\120\uff42\121\uff42\122\uff42\001\002\000\044" +
    "\003\uff43\034\345\035\343\036\350\037\342\040\346\054" +
    "\uff43\055\uff43\063\uff43\064\uff43\066\uff43\067\uff43\116\uff43" +
    "\117\uff43\120\uff43\121\uff43\122\uff43\001\002\000\042\034" +
    "\345\035\343\036\350\037\342\040\346\054\355\055\uff56" +
    "\063\uff56\064\330\066\327\067\326\116\012\117\011\120" +
    "\007\121\006\122\005\001\002\000\026\054\355\055\365" +
    "\064\330\066\327\067\326\116\012\117\011\120\007\121" +
    "\006\122\005\001\002\000\004\003\364\001\002\000\066" +
    "\003\uff46\004\uff46\011\uff46\013\uff46\014\uff46\015\uff46\020" +
    "\uff46\023\uff46\024\uff46\027\uff46\030\uff46\033\uff46\061\uff46" +
    "\064\uff46\075\uff46\077\uff46\100\uff46\110\uff46\113\uff46\114" +
    "\uff46\115\uff46\116\uff46\117\uff46\120\uff46\121\uff46\122\uff46" +
    "\001\002\000\030\003\363\054\355\063\uff57\064\330\066" +
    "\327\067\326\116\012\117\011\120\007\121\006\122\005" +
    "\001\002\000\006\003\uff25\063\362\001\002\000\020\034" +
    "\345\035\343\036\350\037\342\040\346\054\347\063\uff55" +
    "\001\002\000\004\063\341\001\002\000\066\003\uff47\004" +
    "\uff47\011\uff47\013\uff47\014\uff47\015\uff47\020\uff47\023\uff47" +
    "\024\uff47\027\uff47\030\uff47\033\uff47\061\uff47\064\uff47\075" +
    "\uff47\077\uff47\100\uff47\110\uff47\113\uff47\114\uff47\115\uff47" +
    "\116\uff47\117\uff47\120\uff47\121\uff47\122\uff47\001\002\000" +
    "\066\003\uff4c\004\uff4c\011\uff4c\013\uff4c\014\uff4c\015\uff4c" +
    "\020\uff4c\023\uff4c\024\uff4c\027\uff4c\030\uff4c\033\uff4c\061" +
    "\uff4c\064\uff4c\075\uff4c\077\uff4c\100\uff4c\110\uff4c\113\uff4c" +
    "\114\uff4c\115\uff4c\116\uff4c\117\uff4c\120\uff4c\121\uff4c\122" +
    "\uff4c\001\002\000\024\054\uff51\064\uff51\066\uff51\067\uff51" +
    "\116\uff51\117\uff51\120\uff51\121\uff51\122\uff51\001\002\000" +
    "\024\054\uff53\064\uff53\066\uff53\067\uff53\116\uff53\117\uff53" +
    "\120\uff53\121\uff53\122\uff53\001\002\000\024\054\355\064" +
    "\330\066\327\067\326\116\012\117\011\120\007\121\006" +
    "\122\005\001\002\000\024\054\uff54\064\uff54\066\uff54\067" +
    "\uff54\116\uff54\117\uff54\120\uff54\121\uff54\122\uff54\001\002" +
    "\000\024\054\uff50\064\uff50\066\uff50\067\uff50\116\uff50\117" +
    "\uff50\120\uff50\121\uff50\122\uff50\001\002\000\004\055\351" +
    "\001\002\000\024\054\uff52\064\uff52\066\uff52\067\uff52\116" +
    "\uff52\117\uff52\120\uff52\121\uff52\122\uff52\001\002\000\004" +
    "\063\352\001\002\000\066\003\uff3a\004\uff3a\011\uff3a\013" +
    "\uff3a\014\uff3a\015\uff3a\020\uff3a\023\uff3a\024\uff3a\027\uff3a" +
    "\030\uff3a\033\uff3a\061\uff3a\064\uff3a\075\uff3a\077\uff3a\100" +
    "\uff3a\110\uff3a\113\uff3a\114\uff3a\115\uff3a\116\uff3a\117\uff3a" +
    "\120\uff3a\121\uff3a\122\uff3a\001\002\000\006\055\uff5a\063" +
    "\uff5a\001\002\000\030\054\355\055\uff57\063\uff57\064\330" +
    "\066\327\067\326\116\012\117\011\120\007\121\006\122" +
    "\005\001\002\000\024\054\355\064\330\066\327\067\326" +
    "\116\012\117\011\120\007\121\006\122\005\001\002\000" +
    "\020\034\345\035\343\036\350\037\342\040\346\055\uff55" +
    "\063\uff55\001\002\000\004\055\360\001\002\000\006\055" +
    "\uff5e\063\uff5e\001\002\000\006\055\uff5b\063\uff5b\001\002" +
    "\000\066\003\uff4d\004\uff4d\011\uff4d\013\uff4d\014\uff4d\015" +
    "\uff4d\020\uff4d\023\uff4d\024\uff4d\027\uff4d\030\uff4d\033\uff4d" +
    "\061\uff4d\064\uff4d\075\uff4d\077\uff4d\100\uff4d\110\uff4d\113" +
    "\uff4d\114\uff4d\115\uff4d\116\uff4d\117\uff4d\120\uff4d\121\uff4d" +
    "\122\uff4d\001\002\000\066\003\uff48\004\uff48\011\uff48\013" +
    "\uff48\014\uff48\015\uff48\020\uff48\023\uff48\024\uff48\027\uff48" +
    "\030\uff48\033\uff48\061\uff48\064\uff48\075\uff48\077\uff48\100" +
    "\uff48\110\uff48\113\uff48\114\uff48\115\uff48\116\uff48\117\uff48" +
    "\120\uff48\121\uff48\122\uff48\001\002\000\066\003\uff49\004" +
    "\uff49\011\uff49\013\uff49\014\uff49\015\uff49\020\uff49\023\uff49" +
    "\024\uff49\027\uff49\030\uff49\033\uff49\061\uff49\064\uff49\075" +
    "\uff49\077\uff49\100\uff49\110\uff49\113\uff49\114\uff49\115\uff49" +
    "\116\uff49\117\uff49\120\uff49\121\uff49\122\uff49\001\002\000" +
    "\004\063\366\001\002\000\066\003\uff35\004\uff35\011\uff35" +
    "\013\uff35\014\uff35\015\uff35\020\uff35\023\uff35\024\uff35\027" +
    "\uff35\030\uff35\033\uff35\061\uff35\064\uff35\075\uff35\077\uff35" +
    "\100\uff35\110\uff35\113\uff35\114\uff35\115\uff35\116\uff35\117" +
    "\uff35\120\uff35\121\uff35\122\uff35\001\002\000\024\054\355" +
    "\064\330\066\327\067\326\116\012\117\011\120\007\121" +
    "\006\122\005\001\002\000\006\055\uff58\063\uff58\001\002" +
    "\000\006\055\uff59\063\uff59\001\002\000\024\054\355\064" +
    "\330\066\327\067\326\116\012\117\011\120\007\121\006" +
    "\122\005\001\002\000\006\055\uff5c\063\uff5c\001\002\000" +
    "\024\054\355\064\330\066\327\067\326\116\012\117\011" +
    "\120\007\121\006\122\005\001\002\000\006\055\uff5d\063" +
    "\uff5d\001\002\000\066\003\uff4e\004\uff4e\011\uff4e\013\uff4e" +
    "\014\uff4e\015\uff4e\020\uff4e\023\uff4e\024\uff4e\027\uff4e\030" +
    "\uff4e\033\uff4e\061\uff4e\064\uff4e\075\uff4e\077\uff4e\100\uff4e" +
    "\110\uff4e\113\uff4e\114\uff4e\115\uff4e\116\uff4e\117\uff4e\120" +
    "\uff4e\121\uff4e\122\uff4e\001\002\000\066\003\uff4f\004\uff4f" +
    "\011\uff4f\013\uff4f\014\uff4f\015\uff4f\020\uff4f\023\uff4f\024" +
    "\uff4f\027\uff4f\030\uff4f\033\uff4f\061\uff4f\064\uff4f\075\uff4f" +
    "\077\uff4f\100\uff4f\110\uff4f\113\uff4f\114\uff4f\115\uff4f\116" +
    "\uff4f\117\uff4f\120\uff4f\121\uff4f\122\uff4f\001\002\000\004" +
    "\063\u0105\001\002\000\006\055\u0102\063\u0103\001\002\000" +
    "\070\003\uff38\004\uff38\011\uff38\013\uff38\014\uff38\015\uff38" +
    "\020\uff38\023\uff38\024\uff38\027\uff38\030\uff38\033\uff38\061" +
    "\uff38\063\u0104\064\uff38\075\uff38\077\uff38\100\uff38\110\uff38" +
    "\113\uff38\114\uff38\115\uff38\116\uff38\117\uff38\120\uff38\121" +
    "\uff38\122\uff38\001\002\000\066\003\uff37\004\uff37\011\uff37" +
    "\013\uff37\014\uff37\015\uff37\020\uff37\023\uff37\024\uff37\027" +
    "\uff37\030\uff37\033\uff37\061\uff37\064\uff37\075\uff37\077\uff37" +
    "\100\uff37\110\uff37\113\uff37\114\uff37\115\uff37\116\uff37\117" +
    "\uff37\120\uff37\121\uff37\122\uff37\001\002\000\066\003\uff3c" +
    "\004\uff3c\011\uff3c\013\uff3c\014\uff3c\015\uff3c\020\uff3c\023" +
    "\uff3c\024\uff3c\027\uff3c\030\uff3c\033\uff3c\061\uff3c\064\uff3c" +
    "\075\uff3c\077\uff3c\100\uff3c\110\uff3c\113\uff3c\114\uff3c\115" +
    "\uff3c\116\uff3c\117\uff3c\120\uff3c\121\uff3c\122\uff3c\001\002" +
    "\000\066\003\uff36\004\uff36\011\uff36\013\uff36\014\uff36\015" +
    "\uff36\020\uff36\023\uff36\024\uff36\027\uff36\030\uff36\033\uff36" +
    "\061\uff36\064\uff36\075\uff36\077\uff36\100\uff36\110\uff36\113" +
    "\uff36\114\uff36\115\uff36\116\uff36\117\uff36\120\uff36\121\uff36" +
    "\122\uff36\001\002\000\066\003\uff44\004\uff44\011\uff44\013" +
    "\uff44\014\uff44\015\uff44\020\uff44\023\uff44\024\uff44\027\uff44" +
    "\030\uff44\033\uff44\061\uff44\064\uff44\075\uff44\077\uff44\100" +
    "\uff44\110\uff44\113\uff44\114\uff44\115\uff44\116\uff44\117\uff44" +
    "\120\uff44\121\uff44\122\uff44\001\002\000\066\003\uff45\004" +
    "\uff45\011\uff45\013\uff45\014\uff45\015\uff45\020\uff45\023\uff45" +
    "\024\uff45\027\uff45\030\uff45\033\uff45\061\uff45\064\uff45\075" +
    "\uff45\077\uff45\100\uff45\110\uff45\113\uff45\114\uff45\115\uff45" +
    "\116\uff45\117\uff45\120\uff45\121\uff45\122\uff45\001\002\000" +
    "\066\003\uff3f\004\uff3f\011\uff3f\013\uff3f\014\uff3f\015\uff3f" +
    "\020\uff3f\023\uff3f\024\uff3f\027\uff3f\030\uff3f\033\uff3f\061" +
    "\uff3f\064\uff3f\075\uff3f\077\uff3f\100\uff3f\110\uff3f\113\uff3f" +
    "\114\uff3f\115\uff3f\116\uff3f\117\uff3f\120\uff3f\121\uff3f\122" +
    "\uff3f\001\002\000\012\003\uffe1\004\uffe1\033\uffe1\061\uffe1" +
    "\001\002\000\004\063\u0110\001\002\000\006\003\u010d\055" +
    "\u010c\001\002\000\070\003\ufdcb\004\ufdcb\011\ufdcb\013\ufdcb" +
    "\014\ufdcb\015\ufdcb\020\ufdcb\023\ufdcb\024\ufdcb\027\ufdcb\030" +
    "\ufdcb\033\ufdcb\061\ufdcb\063\u010f\064\ufdcb\075\ufdcb\077\ufdcb" +
    "\100\ufdcb\110\ufdcb\113\ufdcb\114\ufdcb\115\ufdcb\116\ufdcb\117" +
    "\ufdcb\120\ufdcb\121\ufdcb\122\ufdcb\001\002\000\004\063\u010e" +
    "\001\002\000\066\003\ufdca\004\ufdca\011\ufdca\013\ufdca\014" +
    "\ufdca\015\ufdca\020\ufdca\023\ufdca\024\ufdca\027\ufdca\030\ufdca" +
    "\033\ufdca\061\ufdca\064\ufdca\075\ufdca\077\ufdca\100\ufdca\110" +
    "\ufdca\113\ufdca\114\ufdca\115\ufdca\116\ufdca\117\ufdca\120\ufdca" +
    "\121\ufdca\122\ufdca\001\002\000\066\003\ufdcc\004\ufdcc\011" +
    "\ufdcc\013\ufdcc\014\ufdcc\015\ufdcc\020\ufdcc\023\ufdcc\024\ufdcc" +
    "\027\ufdcc\030\ufdcc\033\ufdcc\061\ufdcc\064\ufdcc\075\ufdcc\077" +
    "\ufdcc\100\ufdcc\110\ufdcc\113\ufdcc\114\ufdcc\115\ufdcc\116\ufdcc" +
    "\117\ufdcc\120\ufdcc\121\ufdcc\122\ufdcc\001\002\000\066\003" +
    "\ufdc9\004\ufdc9\011\ufdc9\013\ufdc9\014\ufdc9\015\ufdc9\020\ufdc9" +
    "\023\ufdc9\024\ufdc9\027\ufdc9\030\ufdc9\033\ufdc9\061\ufdc9\064" +
    "\ufdc9\075\ufdc9\077\ufdc9\100\ufdc9\110\ufdc9\113\ufdc9\114\ufdc9" +
    "\115\ufdc9\116\ufdc9\117\ufdc9\120\ufdc9\121\ufdc9\122\ufdc9\001" +
    "\002\000\012\003\uffd3\004\uffd3\033\uffd3\061\uffd3\001\002" +
    "\000\010\055\ufdb5\063\ufdb5\072\u0120\001\002\000\004\055" +
    "\u011e\001\002\000\020\055\u0119\067\u0112\116\012\117\011" +
    "\120\007\121\006\122\005\001\002\000\010\055\ufdb4\063" +
    "\ufdb4\072\u0116\001\002\000\016\067\u0112\116\012\117\011" +
    "\120\007\121\006\122\005\001\002\000\006\055\ufdb2\063" +
    "\ufdb2\001\002\000\006\055\u011b\063\u011c\001\002\000\004" +
    "\063\u011a\001\002\000\066\003\ufdad\004\ufdad\011\ufdad\013" +
    "\ufdad\014\ufdad\015\ufdad\020\ufdad\023\ufdad\024\ufdad\027\ufdad" +
    "\030\ufdad\033\ufdad\061\ufdad\064\ufdad\075\ufdad\077\ufdad\100" +
    "\ufdad\110\ufdad\113\ufdad\114\ufdad\115\ufdad\116\ufdad\117\ufdad" +
    "\120\ufdad\121\ufdad\122\ufdad\001\002\000\070\003\ufdaf\004" +
    "\ufdaf\011\ufdaf\013\ufdaf\014\ufdaf\015\ufdaf\020\ufdaf\023\ufdaf" +
    "\024\ufdaf\027\ufdaf\030\ufdaf\033\ufdaf\061\ufdaf\063\u011d\064" +
    "\ufdaf\075\ufdaf\077\ufdaf\100\ufdaf\110\ufdaf\113\ufdaf\114\ufdaf" +
    "\115\ufdaf\116\ufdaf\117\ufdaf\120\ufdaf\121\ufdaf\122\ufdaf\001" +
    "\002\000\066\003\ufdae\004\ufdae\011\ufdae\013\ufdae\014\ufdae" +
    "\015\ufdae\020\ufdae\023\ufdae\024\ufdae\027\ufdae\030\ufdae\033" +
    "\ufdae\061\ufdae\064\ufdae\075\ufdae\077\ufdae\100\ufdae\110\ufdae" +
    "\113\ufdae\114\ufdae\115\ufdae\116\ufdae\117\ufdae\120\ufdae\121" +
    "\ufdae\122\ufdae\001\002\000\066\003\ufdb0\004\ufdb0\011\ufdb0" +
    "\013\ufdb0\014\ufdb0\015\ufdb0\020\ufdb0\023\ufdb0\024\ufdb0\027" +
    "\ufdb0\030\ufdb0\033\ufdb0\061\ufdb0\064\ufdb0\075\ufdb0\077\ufdb0" +
    "\100\ufdb0\110\ufdb0\113\ufdb0\114\ufdb0\115\ufdb0\116\ufdb0\117" +
    "\ufdb0\120\ufdb0\121\ufdb0\122\ufdb0\001\002\000\004\063\u011f" +
    "\001\002\000\066\003\ufdac\004\ufdac\011\ufdac\013\ufdac\014" +
    "\ufdac\015\ufdac\020\ufdac\023\ufdac\024\ufdac\027\ufdac\030\ufdac" +
    "\033\ufdac\061\ufdac\064\ufdac\075\ufdac\077\ufdac\100\ufdac\110" +
    "\ufdac\113\ufdac\114\ufdac\115\ufdac\116\ufdac\117\ufdac\120\ufdac" +
    "\121\ufdac\122\ufdac\001\002\000\020\003\u0122\067\u0112\116" +
    "\012\117\011\120\007\121\006\122\005\001\002\000\006" +
    "\055\ufdb3\063\ufdb3\001\002\000\006\055\ufdb1\063\ufdb1\001" +
    "\002\000\012\003\uffd7\004\uffd7\033\uffd7\061\uffd7\001\002" +
    "\000\004\064\u0175\001\002\000\006\057\u0153\064\u0154\001" +
    "\002\000\004\064\u014e\001\002\000\004\066\u014c\001\002" +
    "\000\004\064\u0147\001\002\000\074\003\uff90\004\uff90\011" +
    "\uff90\013\uff90\014\uff90\015\uff90\020\uff90\023\uff90\024\uff90" +
    "\027\uff90\030\uff90\033\uff90\061\uff90\062\u013f\063\u0140\064" +
    "\uff90\066\u013e\075\uff90\077\uff90\100\uff90\110\uff90\113\uff90" +
    "\114\uff90\115\uff90\116\uff90\117\uff90\120\uff90\121\uff90\122" +
    "\uff90\001\002\000\066\003\uff91\004\uff91\011\uff91\013\uff91" +
    "\014\uff91\015\uff91\020\uff91\023\uff91\024\uff91\027\uff91\030" +
    "\uff91\033\uff91\061\uff91\064\uff91\075\uff91\077\uff91\100\uff91" +
    "\110\uff91\113\uff91\114\uff91\115\uff91\116\uff91\117\uff91\120" +
    "\uff91\121\uff91\122\uff91\001\002\000\004\064\u0139\001\002" +
    "\000\004\064\u0134\001\002\000\006\062\u012e\063\u012f\001" +
    "\002\000\016\066\u0130\116\012\117\011\120\007\121\006" +
    "\122\005\001\002\000\066\003\uff92\004\uff92\011\uff92\013" +
    "\uff92\014\uff92\015\uff92\020\uff92\023\uff92\024\uff92\027\uff92" +
    "\030\uff92\033\uff92\061\uff92\064\uff92\075\uff92\077\uff92\100" +
    "\uff92\110\uff92\113\uff92\114\uff92\115\uff92\116\uff92\117\uff92" +
    "\120\uff92\121\uff92\122\uff92\001\002\000\004\063\u0133\001" +
    "\002\000\004\063\u0132\001\002\000\066\003\uff98\004\uff98" +
    "\011\uff98\013\uff98\014\uff98\015\uff98\020\uff98\023\uff98\024" +
    "\uff98\027\uff98\030\uff98\033\uff98\061\uff98\064\uff98\075\uff98" +
    "\077\uff98\100\uff98\110\uff98\113\uff98\114\uff98\115\uff98\116" +
    "\uff98\117\uff98\120\uff98\121\uff98\122\uff98\001\002\000\066" +
    "\003\uff9b\004\uff9b\011\uff9b\013\uff9b\014\uff9b\015\uff9b\020" +
    "\uff9b\023\uff9b\024\uff9b\027\uff9b\030\uff9b\033\uff9b\061\uff9b" +
    "\064\uff9b\075\uff9b\077\uff9b\100\uff9b\110\uff9b\113\uff9b\114" +
    "\uff9b\115\uff9b\116\uff9b\117\uff9b\120\uff9b\121\uff9b\122\uff9b" +
    "\001\002\000\006\062\u0135\063\u0136\001\002\000\004\067" +
    "\u0137\001\002\000\066\003\uff6a\004\uff6a\011\uff6a\013\uff6a" +
    "\014\uff6a\015\uff6a\020\uff6a\023\uff6a\024\uff6a\027\uff6a\030" +
    "\uff6a\033\uff6a\061\uff6a\064\uff6a\075\uff6a\077\uff6a\100\uff6a" +
    "\110\uff6a\113\uff6a\114\uff6a\115\uff6a\116\uff6a\117\uff6a\120" +
    "\uff6a\121\uff6a\122\uff6a\001\002\000\004\063\u0138\001\002" +
    "\000\066\003\uff7a\004\uff7a\011\uff7a\013\uff7a\014\uff7a\015" +
    "\uff7a\020\uff7a\023\uff7a\024\uff7a\027\uff7a\030\uff7a\033\uff7a" +
    "\061\uff7a\064\uff7a\075\uff7a\077\uff7a\100\uff7a\110\uff7a\113" +
    "\uff7a\114\uff7a\115\uff7a\116\uff7a\117\uff7a\120\uff7a\121\uff7a" +
    "\122\uff7a\001\002\000\006\062\u013a\063\u013b\001\002\000" +
    "\004\067\u013c\001\002\000\066\003\uff68\004\uff68\011\uff68" +
    "\013\uff68\014\uff68\015\uff68\020\uff68\023\uff68\024\uff68\027" +
    "\uff68\030\uff68\033\uff68\061\uff68\064\uff68\075\uff68\077\uff68" +
    "\100\uff68\110\uff68\113\uff68\114\uff68\115\uff68\116\uff68\117" +
    "\uff68\120\uff68\121\uff68\122\uff68\001\002\000\004\063\u013d" +
    "\001\002\000\066\003\uff78\004\uff78\011\uff78\013\uff78\014" +
    "\uff78\015\uff78\020\uff78\023\uff78\024\uff78\027\uff78\030\uff78" +
    "\033\uff78\061\uff78\064\uff78\075\uff78\077\uff78\100\uff78\110" +
    "\uff78\113\uff78\114\uff78\115\uff78\116\uff78\117\uff78\120\uff78" +
    "\121\uff78\122\uff78\001\002\000\004\063\u0146\001\002\000" +
    "\020\063\u0143\066\u0141\116\012\117\011\120\007\121\006" +
    "\122\005\001\002\000\066\003\uff93\004\uff93\011\uff93\013" +
    "\uff93\014\uff93\015\uff93\020\uff93\023\uff93\024\uff93\027\uff93" +
    "\030\uff93\033\uff93\061\uff93\064\uff93\075\uff93\077\uff93\100" +
    "\uff93\110\uff93\113\uff93\114\uff93\115\uff93\116\uff93\117\uff93" +
    "\120\uff93\121\uff93\122\uff93\001\002\000\070\003\uff94\004" +
    "\uff94\011\uff94\013\uff94\014\uff94\015\uff94\020\uff94\023\uff94" +
    "\024\uff94\027\uff94\030\uff94\033\uff94\061\uff94\063\u0145\064" +
    "\uff94\075\uff94\077\uff94\100\uff94\110\uff94\113\uff94\114\uff94" +
    "\115\uff94\116\uff94\117\uff94\120\uff94\121\uff94\122\uff94\001" +
    "\002\000\004\063\u0144\001\002\000\066\003\uff95\004\uff95" +
    "\011\uff95\013\uff95\014\uff95\015\uff95\020\uff95\023\uff95\024" +
    "\uff95\027\uff95\030\uff95\033\uff95\061\uff95\064\uff95\075\uff95" +
    "\077\uff95\100\uff95\110\uff95\113\uff95\114\uff95\115\uff95\116" +
    "\uff95\117\uff95\120\uff95\121\uff95\122\uff95\001\002\000\066" +
    "\003\uff9a\004\uff9a\011\uff9a\013\uff9a\014\uff9a\015\uff9a\020" +
    "\uff9a\023\uff9a\024\uff9a\027\uff9a\030\uff9a\033\uff9a\061\uff9a" +
    "\064\uff9a\075\uff9a\077\uff9a\100\uff9a\110\uff9a\113\uff9a\114" +
    "\uff9a\115\uff9a\116\uff9a\117\uff9a\120\uff9a\121\uff9a\122\uff9a" +
    "\001\002\000\066\003\uff9d\004\uff9d\011\uff9d\013\uff9d\014" +
    "\uff9d\015\uff9d\020\uff9d\023\uff9d\024\uff9d\027\uff9d\030\uff9d" +
    "\033\uff9d\061\uff9d\064\uff9d\075\uff9d\077\uff9d\100\uff9d\110" +
    "\uff9d\113\uff9d\114\uff9d\115\uff9d\116\uff9d\117\uff9d\120\uff9d" +
    "\121\uff9d\122\uff9d\001\002\000\066\003\uff96\004\uff96\011" +
    "\uff96\013\uff96\014\uff96\015\uff96\020\uff96\023\uff96\024\uff96" +
    "\027\uff96\030\uff96\033\uff96\061\uff96\064\uff96\075\uff96\077" +
    "\uff96\100\uff96\110\uff96\113\uff96\114\uff96\115\uff96\116\uff96" +
    "\117\uff96\120\uff96\121\uff96\122\uff96\001\002\000\006\062" +
    "\u0148\063\u0149\001\002\000\004\067\u014a\001\002\000\066" +
    "\003\uff67\004\uff67\011\uff67\013\uff67\014\uff67\015\uff67\020" +
    "\uff67\023\uff67\024\uff67\027\uff67\030\uff67\033\uff67\061\uff67" +
    "\064\uff67\075\uff67\077\uff67\100\uff67\110\uff67\113\uff67\114" +
    "\uff67\115\uff67\116\uff67\117\uff67\120\uff67\121\uff67\122\uff67" +
    "\001\002\000\004\063\u014b\001\002\000\066\003\uff77\004" +
    "\uff77\011\uff77\013\uff77\014\uff77\015\uff77\020\uff77\023\uff77" +
    "\024\uff77\027\uff77\030\uff77\033\uff77\061\uff77\064\uff77\075" +
    "\uff77\077\uff77\100\uff77\110\uff77\113\uff77\114\uff77\115\uff77" +
    "\116\uff77\117\uff77\120\uff77\121\uff77\122\uff77\001\002\000" +
    "\004\063\u014d\001\002\000\066\003\uff97\004\uff97\011\uff97" +
    "\013\uff97\014\uff97\015\uff97\020\uff97\023\uff97\024\uff97\027" +
    "\uff97\030\uff97\033\uff97\061\uff97\064\uff97\075\uff97\077\uff97" +
    "\100\uff97\110\uff97\113\uff97\114\uff97\115\uff97\116\uff97\117" +
    "\uff97\120\uff97\121\uff97\122\uff97\001\002\000\006\062\u014f" +
    "\063\u0150\001\002\000\004\067\u0151\001\002\000\066\003" +
    "\uff69\004\uff69\011\uff69\013\uff69\014\uff69\015\uff69\020\uff69" +
    "\023\uff69\024\uff69\027\uff69\030\uff69\033\uff69\061\uff69\064" +
    "\uff69\075\uff69\077\uff69\100\uff69\110\uff69\113\uff69\114\uff69" +
    "\115\uff69\116\uff69\117\uff69\120\uff69\121\uff69\122\uff69\001" +
    "\002\000\004\063\u0152\001\002\000\066\003\uff79\004\uff79" +
    "\011\uff79\013\uff79\014\uff79\015\uff79\020\uff79\023\uff79\024" +
    "\uff79\027\uff79\030\uff79\033\uff79\061\uff79\064\uff79\075\uff79" +
    "\077\uff79\100\uff79\110\uff79\113\uff79\114\uff79\115\uff79\116" +
    "\uff79\117\uff79\120\uff79\121\uff79\122\uff79\001\002\000\006" +
    "\062\u0160\064\u0161\001\002\000\004\062\u0155\001\002\000" +
    "\004\060\u0156\001\002\000\016\066\u0157\116\012\117\011" +
    "\120\007\121\006\122\005\001\002\000\010\061\ufe4a\063" +
    "\ufe4a\072\u015e\001\002\000\004\061\u015c\001\002\000\010" +
    "\061\ufe49\063\ufe49\072\u015a\001\002\000\016\066\u0157\116" +
    "\012\117\011\120\007\121\006\122\005\001\002\000\006" +
    "\061\ufe47\063\ufe47\001\002\000\004\063\u015d\001\002\000" +
    "\066\003\ufe61\004\ufe61\011\ufe61\013\ufe61\014\ufe61\015\ufe61" +
    "\020\ufe61\023\ufe61\024\ufe61\027\ufe61\030\ufe61\033\ufe61\061" +
    "\ufe61\064\ufe61\075\ufe61\077\ufe61\100\ufe61\110\ufe61\113\ufe61" +
    "\114\ufe61\115\ufe61\116\ufe61\117\ufe61\120\ufe61\121\ufe61\122" +
    "\ufe61\001\002\000\022\061\ufe46\063\ufe46\066\u0157\116\012" +
    "\117\011\120\007\121\006\122\005\001\002\000\006\061" +
    "\ufe48\063\ufe48\001\002\000\004\060\u0171\001\002\000\006" +
    "\060\u0163\062\u0162\001\002\000\020\060\u0168\066\u0157\116" +
    "\012\117\011\120\007\121\006\122\005\001\002\000\016" +
    "\066\u0157\116\012\117\011\120\007\121\006\122\005\001" +
    "\002\000\004\061\u0165\001\002\000\004\063\u0166\001\002" +
    "\000\066\003\ufe63\004\ufe63\011\ufe63\013\ufe63\014\ufe63\015" +
    "\ufe63\020\ufe63\023\ufe63\024\ufe63\027\ufe63\030\ufe63\033\ufe63" +
    "\061\ufe63\064\ufe63\075\ufe63\077\ufe63\100\ufe63\110\ufe63\113" +
    "\ufe63\114\ufe63\115\ufe63\116\ufe63\117\ufe63\120\ufe63\121\ufe63" +
    "\122\ufe63\001\002\000\004\061\u016f\001\002\000\020\061" +
    "\u016a\066\u0157\116\012\117\011\120\007\121\006\122\005" +
    "\001\002\000\006\061\u016d\063\u016c\001\002\000\004\063" +
    "\u016b\001\002\000\066\003\ufe65\004\ufe65\011\ufe65\013\ufe65" +
    "\014\ufe65\015\ufe65\020\ufe65\023\ufe65\024\ufe65\027\ufe65\030" +
    "\ufe65\033\ufe65\061\ufe65\064\ufe65\075\ufe65\077\ufe65\100\ufe65" +
    "\110\ufe65\113\ufe65\114\ufe65\115\ufe65\116\ufe65\117\ufe65\120" +
    "\ufe65\121\ufe65\122\ufe65\001\002\000\066\003\ufe66\004\ufe66" +
    "\011\ufe66\013\ufe66\014\ufe66\015\ufe66\020\ufe66\023\ufe66\024" +
    "\ufe66\027\ufe66\030\ufe66\033\ufe66\061\ufe66\064\ufe66\075\ufe66" +
    "\077\ufe66\100\ufe66\110\ufe66\113\ufe66\114\ufe66\115\ufe66\116" +
    "\ufe66\117\ufe66\120\ufe66\121\ufe66\122\ufe66\001\002\000\070" +
    "\003\ufe67\004\ufe67\011\ufe67\013\ufe67\014\ufe67\015\ufe67\020" +
    "\ufe67\023\ufe67\024\ufe67\027\ufe67\030\ufe67\033\ufe67\061\ufe67" +
    "\063\u016e\064\ufe67\075\ufe67\077\ufe67\100\ufe67\110\ufe67\113" +
    "\ufe67\114\ufe67\115\ufe67\116\ufe67\117\ufe67\120\ufe67\121\ufe67" +
    "\122\ufe67\001\002\000\066\003\ufe72\004\ufe72\011\ufe72\013" +
    "\ufe72\014\ufe72\015\ufe72\020\ufe72\023\ufe72\024\ufe72\027\ufe72" +
    "\030\ufe72\033\ufe72\061\ufe72\064\ufe72\075\ufe72\077\ufe72\100" +
    "\ufe72\110\ufe72\113\ufe72\114\ufe72\115\ufe72\116\ufe72\117\ufe72" +
    "\120\ufe72\121\ufe72\122\ufe72\001\002\000\004\063\u0170\001" +
    "\002\000\066\003\ufe64\004\ufe64\011\ufe64\013\ufe64\014\ufe64" +
    "\015\ufe64\020\ufe64\023\ufe64\024\ufe64\027\ufe64\030\ufe64\033" +
    "\ufe64\061\ufe64\064\ufe64\075\ufe64\077\ufe64\100\ufe64\110\ufe64" +
    "\113\ufe64\114\ufe64\115\ufe64\116\ufe64\117\ufe64\120\ufe64\121" +
    "\ufe64\122\ufe64\001\002\000\016\066\u0157\116\012\117\011" +
    "\120\007\121\006\122\005\001\002\000\004\061\u0173\001" +
    "\002\000\004\063\u0174\001\002\000\066\003\ufe62\004\ufe62" +
    "\011\ufe62\013\ufe62\014\ufe62\015\ufe62\020\ufe62\023\ufe62\024" +
    "\ufe62\027\ufe62\030\ufe62\033\ufe62\061\ufe62\064\ufe62\075\ufe62" +
    "\077\ufe62\100\ufe62\110\ufe62\113\ufe62\114\ufe62\115\ufe62\116" +
    "\ufe62\117\ufe62\120\ufe62\121\ufe62\122\ufe62\001\002\000\004" +
    "\062\u0176\001\002\000\004\060\u0177\001\002\000\016\066" +
    "\u0157\116\012\117\011\120\007\121\006\122\005\001\002" +
    "\000\004\061\u0179\001\002\000\004\063\u017a\001\002\000" +
    "\066\003\ufe60\004\ufe60\011\ufe60\013\ufe60\014\ufe60\015\ufe60" +
    "\020\ufe60\023\ufe60\024\ufe60\027\ufe60\030\ufe60\033\ufe60\061" +
    "\ufe60\064\ufe60\075\ufe60\077\ufe60\100\ufe60\110\ufe60\113\ufe60" +
    "\114\ufe60\115\ufe60\116\ufe60\117\ufe60\120\ufe60\121\ufe60\122" +
    "\ufe60\001\002\000\004\061\u01c0\001\002\000\060\011\042" +
    "\013\035\014\051\015\101\020\066\023\071\024\070\027" +
    "\102\030\043\061\u017e\064\077\075\075\077\054\100\040" +
    "\110\033\113\073\114\060\115\041\116\012\117\011\120" +
    "\007\121\006\122\005\001\002\000\006\004\u0187\061\u0188" +
    "\001\002\000\004\004\u017f\001\002\000\004\054\u0180\001" +
    "\002\000\004\012\u0181\001\002\000\004\064\u0182\001\002" +
    "\000\004\055\u0183\001\002\000\004\060\u0184\001\002\000" +
    "\056\011\042\013\035\014\051\015\101\020\066\023\071" +
    "\024\070\027\102\030\043\064\077\075\075\077\054\100" +
    "\040\110\033\113\073\114\060\115\041\116\012\117\011" +
    "\120\007\121\006\122\005\001\002\000\004\061\u0186\001" +
    "\002\000\066\003\ufe2e\004\ufe2e\011\ufe2e\013\ufe2e\014\ufe2e" +
    "\015\ufe2e\020\ufe2e\023\ufe2e\024\ufe2e\027\ufe2e\030\ufe2e\033" +
    "\ufe2e\061\ufe2e\064\ufe2e\075\ufe2e\077\ufe2e\100\ufe2e\110\ufe2e" +
    "\113\ufe2e\114\ufe2e\115\ufe2e\116\ufe2e\117\ufe2e\120\ufe2e\121" +
    "\ufe2e\122\ufe2e\001\002\000\004\054\u01b9\001\002\000\006" +
    "\004\u0189\054\u018a\001\002\000\006\012\u0191\054\u0192\001" +
    "\002\000\004\012\u018b\001\002\000\004\064\u018c\001\002" +
    "\000\004\055\u018d\001\002\000\004\060\u018e\001\002\000" +
    "\056\011\042\013\035\014\051\015\101\020\066\023\071" +
    "\024\070\027\102\030\043\064\077\075\075\077\054\100" +
    "\040\110\033\113\073\114\060\115\041\116\012\117\011" +
    "\120\007\121\006\122\005\001\002\000\004\061\u0190\001" +
    "\002\000\066\003\ufe30\004\ufe30\011\ufe30\013\ufe30\014\ufe30" +
    "\015\ufe30\020\ufe30\023\ufe30\024\ufe30\027\ufe30\030\ufe30\033" +
    "\ufe30\061\ufe30\064\ufe30\075\ufe30\077\ufe30\100\ufe30\110\ufe30" +
    "\113\ufe30\114\ufe30\115\ufe30\116\ufe30\117\ufe30\120\ufe30\121" +
    "\ufe30\122\ufe30\001\002\000\004\064\u01b4\001\002\000\020" +
    "\012\u0193\064\u0195\116\012\117\011\120\007\121\006\122" +
    "\005\001\002\000\020\055\u019f\064\u01a1\116\012\117\011" +
    "\120\007\121\006\122\005\001\002\000\004\064\u019a\001" +
    "\002\000\004\055\u0196\001\002\000\004\060\u0197\001\002" +
    "\000\056\011\042\013\035\014\051\015\101\020\066\023" +
    "\071\024\070\027\102\030\043\064\077\075\075\077\054" +
    "\100\040\110\033\113\073\114\060\115\041\116\012\117" +
    "\011\120\007\121\006\122\005\001\002\000\004\061\u0199" +
    "\001\002\000\066\003\ufe32\004\ufe32\011\ufe32\013\ufe32\014" +
    "\ufe32\015\ufe32\020\ufe32\023\ufe32\024\ufe32\027\ufe32\030\ufe32" +
    "\033\ufe32\061\ufe32\064\ufe32\075\ufe32\077\ufe32\100\ufe32\110" +
    "\ufe32\113\ufe32\114\ufe32\115\ufe32\116\ufe32\117\ufe32\120\ufe32" +
    "\121\ufe32\122\ufe32\001\002\000\004\055\u019b\001\002\000" +
    "\004\060\u019c\001\002\000\056\011\042\013\035\014\051" +
    "\015\101\020\066\023\071\024\070\027\102\030\043\064" +
    "\077\075\075\077\054\100\040\110\033\113\073\114\060" +
    "\115\041\116\012\117\011\120\007\121\006\122\005\001" +
    "\002\000\004\061\u019e\001\002\000\066\003\ufe39\004\ufe39" +
    "\011\ufe39\013\ufe39\014\ufe39\015\ufe39\020\ufe39\023\ufe39\024" +
    "\ufe39\027\ufe39\030\ufe39\033\ufe39\061\ufe39\064\ufe39\075\ufe39" +
    "\077\ufe39\100\ufe39\110\ufe39\113\ufe39\114\ufe39\115\ufe39\116" +
    "\ufe39\117\ufe39\120\ufe39\121\ufe39\122\ufe39\001\002\000\004" +
    "\060\u01b1\001\002\000\004\055\u01ad\001\002\000\006\055" +
    "\u01a2\060\u01a3\001\002\000\060\011\042\013\035\014\051" +
    "\015\101\020\066\023\071\024\070\027\102\030\043\060" +
    "\u01a7\064\077\075\075\077\054\100\040\110\033\113\073" +
    "\114\060\115\041\116\012\117\011\120\007\121\006\122" +
    "\005\001\002\000\056\011\042\013\035\014\051\015\101" +
    "\020\066\023\071\024\070\027\102\030\043\064\077\075" +
    "\075\077\054\100\040\110\033\113\073\114\060\115\041" +
    "\116\012\117\011\120\007\121\006\122\005\001\002\000" +
    "\004\061\u01a5\001\002\000\066\003\ufe34\004\ufe34\011\ufe34" +
    "\013\ufe34\014\ufe34\015\ufe34\020\ufe34\023\ufe34\024\ufe34\027" +
    "\ufe34\030\ufe34\033\ufe34\061\ufe34\064\ufe34\075\ufe34\077\ufe34" +
    "\100\ufe34\110\ufe34\113\ufe34\114\ufe34\115\ufe34\116\ufe34\117" +
    "\ufe34\120\ufe34\121\ufe34\122\ufe34\001\002\000\004\061\u01ac" +
    "\001\002\000\060\011\042\013\035\014\051\015\101\020" +
    "\066\023\071\024\070\027\102\030\043\061\u01a9\064\077" +
    "\075\075\077\054\100\040\110\033\113\073\114\060\115" +
    "\041\116\012\117\011\120\007\121\006\122\005\001\002" +
    "\000\006\003\u01aa\061\u01ab\001\002\000\066\003\ufe36\004" +
    "\ufe36\011\ufe36\013\ufe36\014\ufe36\015\ufe36\020\ufe36\023\ufe36" +
    "\024\ufe36\027\ufe36\030\ufe36\033\ufe36\061\ufe36\064\ufe36\075" +
    "\ufe36\077\ufe36\100\ufe36\110\ufe36\113\ufe36\114\ufe36\115\ufe36" +
    "\116\ufe36\117\ufe36\120\ufe36\121\ufe36\122\ufe36\001\002\000" +
    "\066\003\ufe37\004\ufe37\011\ufe37\013\ufe37\014\ufe37\015\ufe37" +
    "\020\ufe37\023\ufe37\024\ufe37\027\ufe37\030\ufe37\033\ufe37\061" +
    "\ufe37\064\ufe37\075\ufe37\077\ufe37\100\ufe37\110\ufe37\113\ufe37" +
    "\114\ufe37\115\ufe37\116\ufe37\117\ufe37\120\ufe37\121\ufe37\122" +
    "\ufe37\001\002\000\066\003\ufe3b\004\ufe3b\011\ufe3b\013\ufe3b" +
    "\014\ufe3b\015\ufe3b\020\ufe3b\023\ufe3b\024\ufe3b\027\ufe3b\030" +
    "\ufe3b\033\ufe3b\061\ufe3b\064\ufe3b\075\ufe3b\077\ufe3b\100\ufe3b" +
    "\110\ufe3b\113\ufe3b\114\ufe3b\115\ufe3b\116\ufe3b\117\ufe3b\120" +
    "\ufe3b\121\ufe3b\122\ufe3b\001\002\000\066\003\ufe35\004\ufe35" +
    "\011\ufe35\013\ufe35\014\ufe35\015\ufe35\020\ufe35\023\ufe35\024" +
    "\ufe35\027\ufe35\030\ufe35\033\ufe35\061\ufe35\064\ufe35\075\ufe35" +
    "\077\ufe35\100\ufe35\110\ufe35\113\ufe35\114\ufe35\115\ufe35\116" +
    "\ufe35\117\ufe35\120\ufe35\121\ufe35\122\ufe35\001\002\000\004" +
    "\060\u01ae\001\002\000\056\011\042\013\035\014\051\015" +
    "\101\020\066\023\071\024\070\027\102\030\043\064\077" +
    "\075\075\077\054\100\040\110\033\113\073\114\060\115" +
    "\041\116\012\117\011\120\007\121\006\122\005\001\002" +
    "\000\004\061\u01b0\001\002\000\066\003\ufe38\004\ufe38\011" +
    "\ufe38\013\ufe38\014\ufe38\015\ufe38\020\ufe38\023\ufe38\024\ufe38" +
    "\027\ufe38\030\ufe38\033\ufe38\061\ufe38\064\ufe38\075\ufe38\077" +
    "\ufe38\100\ufe38\110\ufe38\113\ufe38\114\ufe38\115\ufe38\116\ufe38" +
    "\117\ufe38\120\ufe38\121\ufe38\122\ufe38\001\002\000\056\011" +
    "\042\013\035\014\051\015\101\020\066\023\071\024\070" +
    "\027\102\030\043\064\077\075\075\077\054\100\040\110" +
    "\033\113\073\114\060\115\041\116\012\117\011\120\007" +
    "\121\006\122\005\001\002\000\004\061\u01b3\001\002\000" +
    "\066\003\ufe33\004\ufe33\011\ufe33\013\ufe33\014\ufe33\015\ufe33" +
    "\020\ufe33\023\ufe33\024\ufe33\027\ufe33\030\ufe33\033\ufe33\061" +
    "\ufe33\064\ufe33\075\ufe33\077\ufe33\100\ufe33\110\ufe33\113\ufe33" +
    "\114\ufe33\115\ufe33\116\ufe33\117\ufe33\120\ufe33\121\ufe33\122" +
    "\ufe33\001\002\000\004\055\u01b5\001\002\000\004\060\u01b6" +
    "\001\002\000\056\011\042\013\035\014\051\015\101\020" +
    "\066\023\071\024\070\027\102\030\043\064\077\075\075" +
    "\077\054\100\040\110\033\113\073\114\060\115\041\116" +
    "\012\117\011\120\007\121\006\122\005\001\002\000\004" +
    "\061\u01b8\001\002\000\066\003\ufe31\004\ufe31\011\ufe31\013" +
    "\ufe31\014\ufe31\015\ufe31\020\ufe31\023\ufe31\024\ufe31\027\ufe31" +
    "\030\ufe31\033\ufe31\061\ufe31\064\ufe31\075\ufe31\077\ufe31\100" +
    "\ufe31\110\ufe31\113\ufe31\114\ufe31\115\ufe31\116\ufe31\117\ufe31" +
    "\120\ufe31\121\ufe31\122\ufe31\001\002\000\004\012\u01ba\001" +
    "\002\000\004\064\u01bb\001\002\000\004\055\u01bc\001\002" +
    "\000\004\060\u01bd\001\002\000\056\011\042\013\035\014" +
    "\051\015\101\020\066\023\071\024\070\027\102\030\043" +
    "\064\077\075\075\077\054\100\040\110\033\113\073\114" +
    "\060\115\041\116\012\117\011\120\007\121\006\122\005" +
    "\001\002\000\004\061\u01bf\001\002\000\066\003\ufe2f\004" +
    "\ufe2f\011\ufe2f\013\ufe2f\014\ufe2f\015\ufe2f\020\ufe2f\023\ufe2f" +
    "\024\ufe2f\027\ufe2f\030\ufe2f\033\ufe2f\061\ufe2f\064\ufe2f\075" +
    "\ufe2f\077\ufe2f\100\ufe2f\110\ufe2f\113\ufe2f\114\ufe2f\115\ufe2f" +
    "\116\ufe2f\117\ufe2f\120\ufe2f\121\ufe2f\122\ufe2f\001\002\000" +
    "\004\004\u01c1\001\002\000\004\054\u01c2\001\002\000\004" +
    "\012\u01c3\001\002\000\004\064\u01c4\001\002\000\004\055" +
    "\u01c5\001\002\000\004\060\u01c6\001\002\000\056\011\042" +
    "\013\035\014\051\015\101\020\066\023\071\024\070\027" +
    "\102\030\043\064\077\075\075\077\054\100\040\110\033" +
    "\113\073\114\060\115\041\116\012\117\011\120\007\121" +
    "\006\122\005\001\002\000\004\061\u01c8\001\002\000\066" +
    "\003\ufe2d\004\ufe2d\011\ufe2d\013\ufe2d\014\ufe2d\015\ufe2d\020" +
    "\ufe2d\023\ufe2d\024\ufe2d\027\ufe2d\030\ufe2d\033\ufe2d\061\ufe2d" +
    "\064\ufe2d\075\ufe2d\077\ufe2d\100\ufe2d\110\ufe2d\113\ufe2d\114" +
    "\ufe2d\115\ufe2d\116\ufe2d\117\ufe2d\120\ufe2d\121\ufe2d\122\ufe2d" +
    "\001\002\000\012\003\uffe3\004\uffe3\033\uffe3\061\uffe3\001" +
    "\002\000\022\034\u01e1\055\uff2d\063\uff2d\116\012\117\011" +
    "\120\007\121\006\122\005\001\002\000\004\034\u01df\001" +
    "\002\000\004\034\u01dd\001\002\000\004\034\u01db\001\002" +
    "\000\030\003\u01cd\055\u01d5\064\u01cc\065\167\066\165\067" +
    "\170\116\012\117\011\120\007\121\006\122\005\001\002" +
    "\000\014\116\012\117\011\120\007\121\006\122\005\001" +
    "\002\000\004\055\u01d1\001\002\000\004\063\u01d2\001\002" +
    "\000\066\003\uff2e\004\uff2e\011\uff2e\013\uff2e\014\uff2e\015" +
    "\uff2e\020\uff2e\023\uff2e\024\uff2e\027\uff2e\030\uff2e\033\uff2e" +
    "\061\uff2e\064\uff2e\075\uff2e\077\uff2e\100\uff2e\110\uff2e\113" +
    "\uff2e\114\uff2e\115\uff2e\116\uff2e\117\uff2e\120\uff2e\121\uff2e" +
    "\122\uff2e\001\002\000\026\003\u01cd\064\u01cc\065\167\066" +
    "\165\067\170\116\012\117\011\120\007\121\006\122\005" +
    "\001\002\000\006\055\uff28\063\uff28\001\002\000\004\063" +
    "\u01da\001\002\000\006\055\u01d7\063\u01d8\001\002\000\070" +
    "\003\uff31\004\uff31\011\uff31\013\uff31\014\uff31\015\uff31\020" +
    "\uff31\023\uff31\024\uff31\027\uff31\030\uff31\033\uff31\061\uff31" +
    "\063\u01d9\064\uff31\075\uff31\077\uff31\100\uff31\110\uff31\113" +
    "\uff31\114\uff31\115\uff31\116\uff31\117\uff31\120\uff31\121\uff31" +
    "\122\uff31\001\002\000\066\003\uff30\004\uff30\011\uff30\013" +
    "\uff30\014\uff30\015\uff30\020\uff30\023\uff30\024\uff30\027\uff30" +
    "\030\uff30\033\uff30\061\uff30\064\uff30\075\uff30\077\uff30\100" +
    "\uff30\110\uff30\113\uff30\114\uff30\115\uff30\116\uff30\117\uff30" +
    "\120\uff30\121\uff30\122\uff30\001\002\000\066\003\uff33\004" +
    "\uff33\011\uff33\013\uff33\014\uff33\015\uff33\020\uff33\023\uff33" +
    "\024\uff33\027\uff33\030\uff33\033\uff33\061\uff33\064\uff33\075" +
    "\uff33\077\uff33\100\uff33\110\uff33\113\uff33\114\uff33\115\uff33" +
    "\116\uff33\117\uff33\120\uff33\121\uff33\122\uff33\001\002\000" +
    "\066\003\uff2f\004\uff2f\011\uff2f\013\uff2f\014\uff2f\015\uff2f" +
    "\020\uff2f\023\uff2f\024\uff2f\027\uff2f\030\uff2f\033\uff2f\061" +
    "\uff2f\064\uff2f\075\uff2f\077\uff2f\100\uff2f\110\uff2f\113\uff2f" +
    "\114\uff2f\115\uff2f\116\uff2f\117\uff2f\120\uff2f\121\uff2f\122" +
    "\uff2f\001\002\000\026\003\u01cd\064\u01cc\065\167\066\165" +
    "\067\170\116\012\117\011\120\007\121\006\122\005\001" +
    "\002\000\006\055\uff26\063\uff26\001\002\000\026\003\u01cd" +
    "\064\u01cc\065\167\066\165\067\170\116\012\117\011\120" +
    "\007\121\006\122\005\001\002\000\006\055\uff2a\063\uff2a" +
    "\001\002\000\026\003\u01cd\064\u01cc\065\167\066\165\067" +
    "\170\116\012\117\011\120\007\121\006\122\005\001\002" +
    "\000\006\055\uff2b\063\uff2b\001\002\000\032\003\u01cd\055" +
    "\uff27\063\uff27\064\u01cc\065\167\066\165\067\170\116\012" +
    "\117\011\120\007\121\006\122\005\001\002\000\026\003" +
    "\u01cd\064\u01cc\065\167\066\165\067\170\116\012\117\011" +
    "\120\007\121\006\122\005\001\002\000\006\055\uff29\063" +
    "\uff29\001\002\000\006\055\uff2c\063\uff2c\001\002\000\012" +
    "\003\uffdb\004\uffdb\033\uffdb\061\uffdb\001\002\000\012\003" +
    "\uffcf\004\uffcf\033\uffcf\061\uffcf\001\002\000\012\003\uffcd" +
    "\004\uffcd\033\uffcd\061\uffcd\001\002\000\012\003\uffcb\004" +
    "\uffcb\033\uffcb\061\uffcb\001\002\000\012\003\uffd1\004\uffd1" +
    "\033\uffd1\061\uffd1\001\002\000\004\063\u01f0\001\002\000" +
    "\006\003\u01ed\055\u01ec\001\002\000\070\003\ufdc2\004\ufdc2" +
    "\011\ufdc2\013\ufdc2\014\ufdc2\015\ufdc2\020\ufdc2\023\ufdc2\024" +
    "\ufdc2\027\ufdc2\030\ufdc2\033\ufdc2\061\ufdc2\063\u01ef\064\ufdc2" +
    "\075\ufdc2\077\ufdc2\100\ufdc2\110\ufdc2\113\ufdc2\114\ufdc2\115" +
    "\ufdc2\116\ufdc2\117\ufdc2\120\ufdc2\121\ufdc2\122\ufdc2\001\002" +
    "\000\004\063\u01ee\001\002\000\066\003\ufdc1\004\ufdc1\011" +
    "\ufdc1\013\ufdc1\014\ufdc1\015\ufdc1\020\ufdc1\023\ufdc1\024\ufdc1" +
    "\027\ufdc1\030\ufdc1\033\ufdc1\061\ufdc1\064\ufdc1\075\ufdc1\077" +
    "\ufdc1\100\ufdc1\110\ufdc1\113\ufdc1\114\ufdc1\115\ufdc1\116\ufdc1" +
    "\117\ufdc1\120\ufdc1\121\ufdc1\122\ufdc1\001\002\000\066\003" +
    "\ufdc3\004\ufdc3\011\ufdc3\013\ufdc3\014\ufdc3\015\ufdc3\020\ufdc3" +
    "\023\ufdc3\024\ufdc3\027\ufdc3\030\ufdc3\033\ufdc3\061\ufdc3\064" +
    "\ufdc3\075\ufdc3\077\ufdc3\100\ufdc3\110\ufdc3\113\ufdc3\114\ufdc3" +
    "\115\ufdc3\116\ufdc3\117\ufdc3\120\ufdc3\121\ufdc3\122\ufdc3\001" +
    "\002\000\066\003\ufdc0\004\ufdc0\011\ufdc0\013\ufdc0\014\ufdc0" +
    "\015\ufdc0\020\ufdc0\023\ufdc0\024\ufdc0\027\ufdc0\030\ufdc0\033" +
    "\ufdc0\061\ufdc0\064\ufdc0\075\ufdc0\077\ufdc0\100\ufdc0\110\ufdc0" +
    "\113\ufdc0\114\ufdc0\115\ufdc0\116\ufdc0\117\ufdc0\120\ufdc0\121" +
    "\ufdc0\122\ufdc0\001\002\000\024\016\u032f\065\167\066\165" +
    "\067\170\116\012\117\011\120\007\121\006\122\005\001" +
    "\002\000\006\062\u0321\063\u0322\001\002\000\036\003\u01cd" +
    "\011\u0202\012\u0206\055\u020a\064\u0207\065\167\066\u0205\067" +
    "\u0204\071\106\116\012\117\011\120\007\121\006\122\005" +
    "\001\002\000\004\062\u01f5\001\002\000\026\031\u01f8\032" +
    "\u01f6\065\u01f9\066\u01fb\067\u01f7\116\012\117\011\120\007" +
    "\121\006\122\005\001\002\000\010\061\ufe8a\063\ufe8a\072" +
    "\ufe8a\001\002\000\004\063\u0201\001\002\000\010\061\ufe8b" +
    "\063\ufe8b\072\ufe8b\001\002\000\004\063\u0200\001\002\000" +
    "\004\063\u01ff\001\002\000\004\063\u01fe\001\002\000\004" +
    "\063\u01fd\001\002\000\066\003\uffbd\004\uffbd\011\uffbd\013" +
    "\uffbd\014\uffbd\015\uffbd\020\uffbd\023\uffbd\024\uffbd\027\uffbd" +
    "\030\uffbd\033\uffbd\061\uffbd\064\uffbd\075\uffbd\077\uffbd\100" +
    "\uffbd\110\uffbd\113\uffbd\114\uffbd\115\uffbd\116\uffbd\117\uffbd" +
    "\120\uffbd\121\uffbd\122\uffbd\001\002\000\066\003\uff99\004" +
    "\uff99\011\uff99\013\uff99\014\uff99\015\uff99\020\uff99\023\uff99" +
    "\024\uff99\027\uff99\030\uff99\033\uff99\061\uff99\064\uff99\075" +
    "\uff99\077\uff99\100\uff99\110\uff99\113\uff99\114\uff99\115\uff99" +
    "\116\uff99\117\uff99\120\uff99\121\uff99\122\uff99\001\002\000" +
    "\066\003\uff8a\004\uff8a\011\uff8a\013\uff8a\014\uff8a\015\uff8a" +
    "\020\uff8a\023\uff8a\024\uff8a\027\uff8a\030\uff8a\033\uff8a\061" +
    "\uff8a\064\uff8a\075\uff8a\077\uff8a\100\uff8a\110\uff8a\113\uff8a" +
    "\114\uff8a\115\uff8a\116\uff8a\117\uff8a\120\uff8a\121\uff8a\122" +
    "\uff8a\001\002\000\066\003\uffad\004\uffad\011\uffad\013\uffad" +
    "\014\uffad\015\uffad\020\uffad\023\uffad\024\uffad\027\uffad\030" +
    "\uffad\033\uffad\061\uffad\064\uffad\075\uffad\077\uffad\100\uffad" +
    "\110\uffad\113\uffad\114\uffad\115\uffad\116\uffad\117\uffad\120" +
    "\uffad\121\uffad\122\uffad\001\002\000\066\003\uffbf\004\uffbf" +
    "\011\uffbf\013\uffbf\014\uffbf\015\uffbf\020\uffbf\023\uffbf\024" +
    "\uffbf\027\uffbf\030\uffbf\033\uffbf\061\uffbf\064\uffbf\075\uffbf" +
    "\077\uffbf\100\uffbf\110\uffbf\113\uffbf\114\uffbf\115\uffbf\116" +
    "\uffbf\117\uffbf\120\uffbf\121\uffbf\122\uffbf\001\002\000\016" +
    "\064\u02ae\116\012\117\011\120\007\121\006\122\005\001" +
    "\002\000\004\055\u02ab\001\002\000\020\034\uff42\041\113" +
    "\042\115\043\163\044\114\045\112\046\120\001\002\000" +
    "\020\034\uff43\041\113\042\115\043\163\044\114\045\112" +
    "\046\120\001\002\000\004\064\u02a6\001\002\000\036\034" +
    "\u01dd\041\204\042\177\043\201\044\203\045\206\046\202" +
    "\064\154\071\205\116\012\117\011\120\007\121\006\122" +
    "\005\001\002\000\004\055\u02a2\001\002\000\032\041\113" +
    "\042\115\043\117\044\114\045\112\046\120\064\u020c\116" +
    "\012\117\011\120\007\121\006\122\005\001\002\000\004" +
    "\063\u020b\001\002\000\066\003\uff40\004\uff40\011\uff40\013" +
    "\uff40\014\uff40\015\uff40\020\uff40\023\uff40\024\uff40\027\uff40" +
    "\030\uff40\033\uff40\061\uff40\064\uff40\075\uff40\077\uff40\100" +
    "\uff40\110\uff40\113\uff40\114\uff40\115\uff40\116\uff40\117\uff40" +
    "\120\uff40\121\uff40\122\uff40\001\002\000\004\062\u0267\001" +
    "\002\000\030\003\u01cd\062\u020e\064\u01cc\065\167\066\165" +
    "\067\170\116\012\117\011\120\007\121\006\122\005\001" +
    "\002\000\016\067\u020f\116\012\117\011\120\007\121\006" +
    "\122\005\001\002\000\004\063\u0244\001\002\000\004\063" +
    "\u0211\001\002\000\016\064\u0213\116\012\117\011\120\007" +
    "\121\006\122\005\001\002\000\016\041\113\042\115\043" +
    "\163\044\114\045\112\046\120\001\002\000\016\041\113" +
    "\042\115\043\163\044\114\045\112\046\120\001\002\000" +
    "\016\067\u0215\116\012\117\011\120\007\121\006\122\005" +
    "\001\002\000\004\063\u0220\001\002\000\004\063\u0217\001" +
    "\002\000\004\064\u0218\001\002\000\006\047\u0219\050\u021b" +
    "\001\002\000\006\055\ufe89\060\ufe89\001\002\000\004\055" +
    "\u021c\001\002\000\006\055\ufe88\060\ufe88\001\002\000\004" +
    "\060\u021d\001\002\000\056\011\042\013\035\014\051\015" +
    "\101\020\066\023\071\024\070\027\102\030\043\064\077" +
    "\075\075\077\054\100\040\110\033\113\073\114\060\115" +
    "\041\116\012\117\011\120\007\121\006\122\005\001\002" +
    "\000\004\061\u021f\001\002\000\066\003\ufede\004\ufede\011" +
    "\ufede\013\ufede\014\ufede\015\ufede\020\ufede\023\ufede\024\ufede" +
    "\027\ufede\030\ufede\033\ufede\061\ufede\064\ufede\075\ufede\077" +
    "\ufede\100\ufede\110\ufede\113\ufede\114\ufede\115\ufede\116\ufede" +
    "\117\ufede\120\ufede\121\ufede\122\ufede\001\002\000\016\064" +
    "\u0222\116\012\117\011\120\007\121\006\122\005\001\002" +
    "\000\006\047\u0219\050\u021b\001\002\000\006\047\u0219\050" +
    "\u021b\001\002\000\004\055\u0224\001\002\000\004\060\u0225" +
    "\001\002\000\056\011\042\013\035\014\051\015\101\020" +
    "\066\023\071\024\070\027\102\030\043\064\077\075\075" +
    "\077\054\100\040\110\033\113\073\114\060\115\041\116" +
    "\012\117\011\120\007\121\006\122\005\001\002\000\004" +
    "\061\u0227\001\002\000\066\003\ufeea\004\ufeea\011\ufeea\013" +
    "\ufeea\014\ufeea\015\ufeea\020\ufeea\023\ufeea\024\ufeea\027\ufeea" +
    "\030\ufeea\033\ufeea\061\ufeea\064\ufeea\075\ufeea\077\ufeea\100" +
    "\ufeea\110\ufeea\113\ufeea\114\ufeea\115\ufeea\116\ufeea\117\ufeea" +
    "\120\ufeea\121\ufeea\122\ufeea\001\002\000\004\055\u0229\001" +
    "\002\000\004\060\u022a\001\002\000\056\011\042\013\035" +
    "\014\051\015\101\020\066\023\071\024\070\027\102\030" +
    "\043\064\077\075\075\077\054\100\040\110\033\113\073" +
    "\114\060\115\041\116\012\117\011\120\007\121\006\122" +
    "\005\001\002\000\004\061\u022c\001\002\000\066\003\ufedd" +
    "\004\ufedd\011\ufedd\013\ufedd\014\ufedd\015\ufedd\020\ufedd\023" +
    "\ufedd\024\ufedd\027\ufedd\030\ufedd\033\ufedd\061\ufedd\064\ufedd" +
    "\075\ufedd\077\ufedd\100\ufedd\110\ufedd\113\ufedd\114\ufedd\115" +
    "\ufedd\116\ufedd\117\ufedd\120\ufedd\121\ufedd\122\ufedd\001\002" +
    "\000\016\067\u022e\116\012\117\011\120\007\121\006\122" +
    "\005\001\002\000\004\063\u0237\001\002\000\004\063\u0230" +
    "\001\002\000\014\116\012\117\011\120\007\121\006\122" +
    "\005\001\002\000\006\047\u0219\050\u021b\001\002\000\004" +
    "\055\u0233\001\002\000\004\060\u0234\001\002\000\056\011" +
    "\042\013\035\014\051\015\101\020\066\023\071\024\070" +
    "\027\102\030\043\064\077\075\075\077\054\100\040\110" +
    "\033\113\073\114\060\115\041\116\012\117\011\120\007" +
    "\121\006\122\005\001\002\000\004\061\u0236\001\002\000" +
    "\066\003\ufed0\004\ufed0\011\ufed0\013\ufed0\014\ufed0\015\ufed0" +
    "\020\ufed0\023\ufed0\024\ufed0\027\ufed0\030\ufed0\033\ufed0\061" +
    "\ufed0\064\ufed0\075\ufed0\077\ufed0\100\ufed0\110\ufed0\113\ufed0" +
    "\114\ufed0\115\ufed0\116\ufed0\117\ufed0\120\ufed0\121\ufed0\122" +
    "\ufed0\001\002\000\016\064\u0239\116\012\117\011\120\007" +
    "\121\006\122\005\001\002\000\006\047\u0219\050\u021b\001" +
    "\002\000\006\047\u0219\050\u021b\001\002\000\004\055\u023b" +
    "\001\002\000\004\060\u023c\001\002\000\056\011\042\013" +
    "\035\014\051\015\101\020\066\023\071\024\070\027\102" +
    "\030\043\064\077\075\075\077\054\100\040\110\033\113" +
    "\073\114\060\115\041\116\012\117\011\120\007\121\006" +
    "\122\005\001\002\000\004\061\u023e\001\002\000\066\003" +
    "\ufedf\004\ufedf\011\ufedf\013\ufedf\014\ufedf\015\ufedf\020\ufedf" +
    "\023\ufedf\024\ufedf\027\ufedf\030\ufedf\033\ufedf\061\ufedf\064" +
    "\ufedf\075\ufedf\077\ufedf\100\ufedf\110\ufedf\113\ufedf\114\ufedf" +
    "\115\ufedf\116\ufedf\117\ufedf\120\ufedf\121\ufedf\122\ufedf\001" +
    "\002\000\004\055\u0240\001\002\000\004\060\u0241\001\002" +
    "\000\056\011\042\013\035\014\051\015\101\020\066\023" +
    "\071\024\070\027\102\030\043\064\077\075\075\077\054" +
    "\100\040\110\033\113\073\114\060\115\041\116\012\117" +
    "\011\120\007\121\006\122\005\001\002\000\004\061\u0243" +
    "\001\002\000\066\003\ufed4\004\ufed4\011\ufed4\013\ufed4\014" +
    "\ufed4\015\ufed4\020\ufed4\023\ufed4\024\ufed4\027\ufed4\030\ufed4" +
    "\033\ufed4\061\ufed4\064\ufed4\075\ufed4\077\ufed4\100\ufed4\110" +
    "\ufed4\113\ufed4\114\ufed4\115\ufed4\116\ufed4\117\ufed4\120\ufed4" +
    "\121\ufed4\122\ufed4\001\002\000\016\064\u0246\116\012\117" +
    "\011\120\007\121\006\122\005\001\002\000\016\041\113" +
    "\042\115\043\163\044\114\045\112\046\120\001\002\000" +
    "\016\041\113\042\115\043\163\044\114\045\112\046\120" +
    "\001\002\000\016\067\u0248\116\012\117\011\120\007\121" +
    "\006\122\005\001\002\000\004\063\u0251\001\002\000\004" +
    "\063\u024a\001\002\000\004\064\u024b\001\002\000\006\047" +
    "\u0219\050\u021b\001\002\000\004\055\u024d\001\002\000\004" +
    "\060\u024e\001\002\000\056\011\042\013\035\014\051\015" +
    "\101\020\066\023\071\024\070\027\102\030\043\064\077" +
    "\075\075\077\054\100\040\110\033\113\073\114\060\115" +
    "\041\116\012\117\011\120\007\121\006\122\005\001\002" +
    "\000\004\061\u0250\001\002\000\066\003\ufee8\004\ufee8\011" +
    "\ufee8\013\ufee8\014\ufee8\015\ufee8\020\ufee8\023\ufee8\024\ufee8" +
    "\027\ufee8\030\ufee8\033\ufee8\061\ufee8\064\ufee8\075\ufee8\077" +
    "\ufee8\100\ufee8\110\ufee8\113\ufee8\114\ufee8\115\ufee8\116\ufee8" +
    "\117\ufee8\120\ufee8\121\ufee8\122\ufee8\001\002\000\016\064" +
    "\u0253\116\012\117\011\120\007\121\006\122\005\001\002" +
    "\000\006\047\u0219\050\u021b\001\002\000\006\047\u0219\050" +
    "\u021b\001\002\000\004\055\u0255\001\002\000\004\060\u0256" +
    "\001\002\000\056\011\042\013\035\014\051\015\101\020" +
    "\066\023\071\024\070\027\102\030\043\064\077\075\075" +
    "\077\054\100\040\110\033\113\073\114\060\115\041\116" +
    "\012\117\011\120\007\121\006\122\005\001\002\000\004" +
    "\061\u0258\001\002\000\066\003\ufef9\004\ufef9\011\ufef9\013" +
    "\ufef9\014\ufef9\015\ufef9\020\ufef9\023\ufef9\024\ufef9\027\ufef9" +
    "\030\ufef9\033\ufef9\061\ufef9\064\ufef9\075\ufef9\077\ufef9\100" +
    "\ufef9\110\ufef9\113\ufef9\114\ufef9\115\ufef9\116\ufef9\117\ufef9" +
    "\120\ufef9\121\ufef9\122\ufef9\001\002\000\004\055\u025a\001" +
    "\002\000\004\060\u025b\001\002\000\056\011\042\013\035" +
    "\014\051\015\101\020\066\023\071\024\070\027\102\030" +
    "\043\064\077\075\075\077\054\100\040\110\033\113\073" +
    "\114\060\115\041\116\012\117\011\120\007\121\006\122" +
    "\005\001\002\000\004\061\u025d\001\002\000\066\003\ufee7" +
    "\004\ufee7\011\ufee7\013\ufee7\014\ufee7\015\ufee7\020\ufee7\023" +
    "\ufee7\024\ufee7\027\ufee7\030\ufee7\033\ufee7\061\ufee7\064\ufee7" +
    "\075\ufee7\077\ufee7\100\ufee7\110\ufee7\113\ufee7\114\ufee7\115" +
    "\ufee7\116\ufee7\117\ufee7\120\ufee7\121\ufee7\122\ufee7\001\002" +
    "\000\004\067\u025f\001\002\000\004\063\u0260\001\002\000" +
    "\004\064\u0261\001\002\000\006\047\u0219\050\u021b\001\002" +
    "\000\004\055\u0263\001\002\000\004\060\u0264\001\002\000" +
    "\056\011\042\013\035\014\051\015\101\020\066\023\071" +
    "\024\070\027\102\030\043\064\077\075\075\077\054\100" +
    "\040\110\033\113\073\114\060\115\041\116\012\117\011" +
    "\120\007\121\006\122\005\001\002\000\004\061\u0266\001" +
    "\002\000\066\003\ufee9\004\ufee9\011\ufee9\013\ufee9\014\ufee9" +
    "\015\ufee9\020\ufee9\023\ufee9\024\ufee9\027\ufee9\030\ufee9\033" +
    "\ufee9\061\ufee9\064\ufee9\075\ufee9\077\ufee9\100\ufee9\110\ufee9" +
    "\113\ufee9\114\ufee9\115\ufee9\116\ufee9\117\ufee9\120\ufee9\121" +
    "\ufee9\122\ufee9\001\002\000\016\067\u0268\116\012\117\011" +
    "\120\007\121\006\122\005\001\002\000\004\063\u027f\001" +
    "\002\000\004\063\u026a\001\002\000\016\064\u026c\116\012" +
    "\117\011\120\007\121\006\122\005\001\002\000\016\041" +
    "\113\042\115\043\163\044\114\045\112\046\120\001\002" +
    "\000\016\041\113\042\115\043\163\044\114\045\112\046" +
    "\120\001\002\000\004\067\u026e\001\002\000\004\063\u026f" +
    "\001\002\000\004\064\u0270\001\002\000\006\047\u0219\050" +
    "\u021b\001\002\000\004\055\u0272\001\002\000\004\060\u0273" +
    "\001\002\000\056\011\042\013\035\014\051\015\101\020" +
    "\066\023\071\024\070\027\102\030\043\064\077\075\075" +
    "\077\054\100\040\110\033\113\073\114\060\115\041\116" +
    "\012\117\011\120\007\121\006\122\005\001\002\000\004" +
    "\061\u0275\001\002\000\066\003\ufef8\004\ufef8\011\ufef8\013" +
    "\ufef8\014\ufef8\015\ufef8\020\ufef8\023\ufef8\024\ufef8\027\ufef8" +
    "\030\ufef8\033\ufef8\061\ufef8\064\ufef8\075\ufef8\077\ufef8\100" +
    "\ufef8\110\ufef8\113\ufef8\114\ufef8\115\ufef8\116\ufef8\117\ufef8" +
    "\120\ufef8\121\ufef8\122\ufef8\001\002\000\014\116\012\117" +
    "\011\120\007\121\006\122\005\001\002\000\004\063\u0278" +
    "\001\002\000\014\116\012\117\011\120\007\121\006\122" +
    "\005\001\002\000\006\047\u0219\050\u021b\001\002\000\004" +
    "\055\u027b\001\002\000\004\060\u027c\001\002\000\056\011" +
    "\042\013\035\014\051\015\101\020\066\023\071\024\070" +
    "\027\102\030\043\064\077\075\075\077\054\100\040\110" +
    "\033\113\073\114\060\115\041\116\012\117\011\120\007" +
    "\121\006\122\005\001\002\000\004\061\u027e\001\002\000" +
    "\066\003\ufed2\004\ufed2\011\ufed2\013\ufed2\014\ufed2\015\ufed2" +
    "\020\ufed2\023\ufed2\024\ufed2\027\ufed2\030\ufed2\033\ufed2\061" +
    "\ufed2\064\ufed2\075\ufed2\077\ufed2\100\ufed2\110\ufed2\113\ufed2" +
    "\114\ufed2\115\ufed2\116\ufed2\117\ufed2\120\ufed2\121\ufed2\122" +
    "\ufed2\001\002\000\016\064\u0281\116\012\117\011\120\007" +
    "\121\006\122\005\001\002\000\016\041\113\042\115\043" +
    "\163\044\114\045\112\046\120\001\002\000\016\041\113" +
    "\042\115\043\163\044\114\045\112\046\120\001\002\000" +
    "\016\067\u0283\116\012\117\011\120\007\121\006\122\005" +
    "\001\002\000\004\063\u028c\001\002\000\004\063\u0285\001" +
    "\002\000\004\064\u0286\001\002\000\006\047\u0219\050\u021b" +
    "\001\002\000\004\055\u0288\001\002\000\004\060\u0289\001" +
    "\002\000\056\011\042\013\035\014\051\015\101\020\066" +
    "\023\071\024\070\027\102\030\043\064\077\075\075\077" +
    "\054\100\040\110\033\113\073\114\060\115\041\116\012" +
    "\117\011\120\007\121\006\122\005\001\002\000\004\061" +
    "\u028b\001\002\000\066\003\ufef6\004\ufef6\011\ufef6\013\ufef6" +
    "\014\ufef6\015\ufef6\020\ufef6\023\ufef6\024\ufef6\027\ufef6\030" +
    "\ufef6\033\ufef6\061\ufef6\064\ufef6\075\ufef6\077\ufef6\100\ufef6" +
    "\110\ufef6\113\ufef6\114\ufef6\115\ufef6\116\ufef6\117\ufef6\120" +
    "\ufef6\121\ufef6\122\ufef6\001\002\000\016\064\u028e\116\012" +
    "\117\011\120\007\121\006\122\005\001\002\000\006\047" +
    "\u0219\050\u021b\001\002\000\006\047\u0219\050\u021b\001\002" +
    "\000\004\055\u0290\001\002\000\004\060\u0291\001\002\000" +
    "\056\011\042\013\035\014\051\015\101\020\066\023\071" +
    "\024\070\027\102\030\043\064\077\075\075\077\054\100" +
    "\040\110\033\113\073\114\060\115\041\116\012\117\011" +
    "\120\007\121\006\122\005\001\002\000\004\061\u0293\001" +
    "\002\000\066\003\uff0e\004\uff0e\011\uff0e\013\uff0e\014\uff0e" +
    "\015\uff0e\020\uff0e\023\uff0e\024\uff0e\027\uff0e\030\uff0e\033" +
    "\uff0e\061\uff0e\064\uff0e\075\uff0e\077\uff0e\100\uff0e\110\uff0e" +
    "\113\uff0e\114\uff0e\115\uff0e\116\uff0e\117\uff0e\120\uff0e\121" +
    "\uff0e\122\uff0e\001\002\000\004\055\u0295\001\002\000\004" +
    "\060\u0296\001\002\000\056\011\042\013\035\014\051\015" +
    "\101\020\066\023\071\024\070\027\102\030\043\064\077" +
    "\075\075\077\054\100\040\110\033\113\073\114\060\115" +
    "\041\116\012\117\011\120\007\121\006\122\005\001\002" +
    "\000\004\061\u0298\001\002\000\066\003\ufef5\004\ufef5\011" +
    "\ufef5\013\ufef5\014\ufef5\015\ufef5\020\ufef5\023\ufef5\024\ufef5" +
    "\027\ufef5\030\ufef5\033\ufef5\061\ufef5\064\ufef5\075\ufef5\077" +
    "\ufef5\100\ufef5\110\ufef5\113\ufef5\114\ufef5\115\ufef5\116\ufef5" +
    "\117\ufef5\120\ufef5\121\ufef5\122\ufef5\001\002\000\004\067" +
    "\u029a\001\002\000\004\063\u029b\001\002\000\004\064\u029c" +
    "\001\002\000\006\047\u0219\050\u021b\001\002\000\004\055" +
    "\u029e\001\002\000\004\060\u029f\001\002\000\056\011\042" +
    "\013\035\014\051\015\101\020\066\023\071\024\070\027" +
    "\102\030\043\064\077\075\075\077\054\100\040\110\033" +
    "\113\073\114\060\115\041\116\012\117\011\120\007\121" +
    "\006\122\005\001\002\000\004\061\u02a1\001\002\000\066" +
    "\003\ufef7\004\ufef7\011\ufef7\013\ufef7\014\ufef7\015\ufef7\020" +
    "\ufef7\023\ufef7\024\ufef7\027\ufef7\030\ufef7\033\ufef7\061\ufef7" +
    "\064\ufef7\075\ufef7\077\ufef7\100\ufef7\110\ufef7\113\ufef7\114" +
    "\ufef7\115\ufef7\116\ufef7\117\ufef7\120\ufef7\121\ufef7\122\ufef7" +
    "\001\002\000\004\060\u02a3\001\002\000\056\011\042\013" +
    "\035\014\051\015\101\020\066\023\071\024\070\027\102" +
    "\030\043\064\077\075\075\077\054\100\040\110\033\113" +
    "\073\114\060\115\041\116\012\117\011\120\007\121\006" +
    "\122\005\001\002\000\004\061\u02a5\001\002\000\070\003" +
    "\uff23\004\uff23\010\uff23\011\uff23\013\uff23\014\uff23\015\uff23" +
    "\020\uff23\023\uff23\024\uff23\027\uff23\030\uff23\033\uff23\061" +
    "\uff23\064\uff23\075\uff23\077\uff23\100\uff23\110\uff23\113\uff23" +
    "\114\uff23\115\uff23\116\uff23\117\uff23\120\uff23\121\uff23\122" +
    "\uff23\001\002\000\004\055\u02a7\001\002\000\004\060\u02a8" +
    "\001\002\000\056\011\042\013\035\014\051\015\101\020" +
    "\066\023\071\024\070\027\102\030\043\064\077\075\075" +
    "\077\054\100\040\110\033\113\073\114\060\115\041\116" +
    "\012\117\011\120\007\121\006\122\005\001\002\000\004" +
    "\061\u02aa\001\002\000\066\003\ufe3a\004\ufe3a\011\ufe3a\013" +
    "\ufe3a\014\ufe3a\015\ufe3a\020\ufe3a\023\ufe3a\024\ufe3a\027\ufe3a" +
    "\030\ufe3a\033\ufe3a\061\ufe3a\064\ufe3a\075\ufe3a\077\ufe3a\100" +
    "\ufe3a\110\ufe3a\113\ufe3a\114\ufe3a\115\ufe3a\116\ufe3a\117\ufe3a" +
    "\120\ufe3a\121\ufe3a\122\ufe3a\001\002\000\004\063\u02ac\001" +
    "\002\000\066\003\uff32\004\uff32\011\uff32\013\uff32\014\uff32" +
    "\015\uff32\020\uff32\023\uff32\024\uff32\027\uff32\030\uff32\033" +
    "\uff32\061\uff32\064\uff32\075\uff32\077\uff32\100\uff32\110\uff32" +
    "\113\uff32\114\uff32\115\uff32\116\uff32\117\uff32\120\uff32\121" +
    "\uff32\122\uff32\001\002\000\004\062\u02f0\001\002\000\004" +
    "\062\u02af\001\002\000\016\067\u02b0\116\012\117\011\120" +
    "\007\121\006\122\005\001\002\000\004\063\u02c7\001\002" +
    "\000\004\063\u02b2\001\002\000\016\064\u02b4\116\012\117" +
    "\011\120\007\121\006\122\005\001\002\000\016\041\113" +
    "\042\115\043\163\044\114\045\112\046\120\001\002\000" +
    "\016\041\113\042\115\043\163\044\114\045\112\046\120" +
    "\001\002\000\004\067\u02b6\001\002\000\004\063\u02b7\001" +
    "\002\000\004\064\u02b8\001\002\000\006\047\u0219\050\u021b" +
    "\001\002\000\004\055\u02ba\001\002\000\004\060\u02bb\001" +
    "\002\000\056\011\042\013\035\014\051\015\101\020\066" +
    "\023\071\024\070\027\102\030\043\064\077\075\075\077" +
    "\054\100\040\110\033\113\073\114\060\115\041\116\012" +
    "\117\011\120\007\121\006\122\005\001\002\000\004\061" +
    "\u02bd\001\002\000\066\003\uff0c\004\uff0c\011\uff0c\013\uff0c" +
    "\014\uff0c\015\uff0c\020\uff0c\023\uff0c\024\uff0c\027\uff0c\030" +
    "\uff0c\033\uff0c\061\uff0c\064\uff0c\075\uff0c\077\uff0c\100\uff0c" +
    "\110\uff0c\113\uff0c\114\uff0c\115\uff0c\116\uff0c\117\uff0c\120" +
    "\uff0c\121\uff0c\122\uff0c\001\002\000\014\116\012\117\011" +
    "\120\007\121\006\122\005\001\002\000\004\063\u02c0\001" +
    "\002\000\014\116\012\117\011\120\007\121\006\122\005" +
    "\001\002\000\006\047\u0219\050\u021b\001\002\000\004\055" +
    "\u02c3\001\002\000\004\060\u02c4\001\002\000\056\011\042" +
    "\013\035\014\051\015\101\020\066\023\071\024\070\027" +
    "\102\030\043\064\077\075\075\077\054\100\040\110\033" +
    "\113\073\114\060\115\041\116\012\117\011\120\007\121" +
    "\006\122\005\001\002\000\004\061\u02c6\001\002\000\066" +
    "\003\ufed7\004\ufed7\011\ufed7\013\ufed7\014\ufed7\015\ufed7\020" +
    "\ufed7\023\ufed7\024\ufed7\027\ufed7\030\ufed7\033\ufed7\061\ufed7" +
    "\064\ufed7\075\ufed7\077\ufed7\100\ufed7\110\ufed7\113\ufed7\114" +
    "\ufed7\115\ufed7\116\ufed7\117\ufed7\120\ufed7\121\ufed7\122\ufed7" +
    "\001\002\000\016\064\u02c9\116\012\117\011\120\007\121" +
    "\006\122\005\001\002\000\016\041\113\042\115\043\163" +
    "\044\114\045\112\046\120\001\002\000\016\041\113\042" +
    "\115\043\163\044\114\045\112\046\120\001\002\000\016" +
    "\067\u02cb\116\012\117\011\120\007\121\006\122\005\001" +
    "\002\000\004\063\u02da\001\002\000\004\063\u02cd\001\002" +
    "\000\016\064\u02cf\116\012\117\011\120\007\121\006\122" +
    "\005\001\002\000\006\047\u0219\050\u021b\001\002\000\006" +
    "\047\u0219\050\u021b\001\002\000\004\055\u02d1\001\002\000" +
    "\004\060\u02d2\001\002\000\056\011\042\013\035\014\051" +
    "\015\101\020\066\023\071\024\070\027\102\030\043\064" +
    "\077\075\075\077\054\100\040\110\033\113\073\114\060" +
    "\115\041\116\012\117\011\120\007\121\006\122\005\001" +
    "\002\000\004\061\u02d4\001\002\000\066\003\uff0a\004\uff0a" +
    "\011\uff0a\013\uff0a\014\uff0a\015\uff0a\020\uff0a\023\uff0a\024" +
    "\uff0a\027\uff0a\030\uff0a\033\uff0a\061\uff0a\064\uff0a\075\uff0a" +
    "\077\uff0a\100\uff0a\110\uff0a\113\uff0a\114\uff0a\115\uff0a\116" +
    "\uff0a\117\uff0a\120\uff0a\121\uff0a\122\uff0a\001\002\000\004" +
    "\055\u02d6\001\002\000\004\060\u02d7\001\002\000\056\011" +
    "\042\013\035\014\051\015\101\020\066\023\071\024\070" +
    "\027\102\030\043\064\077\075\075\077\054\100\040\110" +
    "\033\113\073\114\060\115\041\116\012\117\011\120\007" +
    "\121\006\122\005\001\002\000\004\061\u02d9\001\002\000" +
    "\066\003\ufee3\004\ufee3\011\ufee3\013\ufee3\014\ufee3\015\ufee3" +
    "\020\ufee3\023\ufee3\024\ufee3\027\ufee3\030\ufee3\033\ufee3\061" +
    "\ufee3\064\ufee3\075\ufee3\077\ufee3\100\ufee3\110\ufee3\113\ufee3" +
    "\114\ufee3\115\ufee3\116\ufee3\117\ufee3\120\ufee3\121\ufee3\122" +
    "\ufee3\001\002\000\016\064\u02dc\116\012\117\011\120\007" +
    "\121\006\122\005\001\002\000\006\047\u0219\050\u021b\001" +
    "\002\000\006\047\u0219\050\u021b\001\002\000\004\055\u02de" +
    "\001\002\000\004\060\u02df\001\002\000\056\011\042\013" +
    "\035\014\051\015\101\020\066\023\071\024\070\027\102" +
    "\030\043\064\077\075\075\077\054\100\040\110\033\113" +
    "\073\114\060\115\041\116\012\117\011\120\007\121\006" +
    "\122\005\001\002\000\004\061\u02e1\001\002\000\066\003" +
    "\uff15\004\uff15\011\uff15\013\uff15\014\uff15\015\uff15\020\uff15" +
    "\023\uff15\024\uff15\027\uff15\030\uff15\033\uff15\061\uff15\064" +
    "\uff15\075\uff15\077\uff15\100\uff15\110\uff15\113\uff15\114\uff15" +
    "\115\uff15\116\uff15\117\uff15\120\uff15\121\uff15\122\uff15\001" +
    "\002\000\004\055\u02e3\001\002\000\004\060\u02e4\001\002" +
    "\000\056\011\042\013\035\014\051\015\101\020\066\023" +
    "\071\024\070\027\102\030\043\064\077\075\075\077\054" +
    "\100\040\110\033\113\073\114\060\115\041\116\012\117" +
    "\011\120\007\121\006\122\005\001\002\000\004\061\u02e6" +
    "\001\002\000\066\003\uff09\004\uff09\011\uff09\013\uff09\014" +
    "\uff09\015\uff09\020\uff09\023\uff09\024\uff09\027\uff09\030\uff09" +
    "\033\uff09\061\uff09\064\uff09\075\uff09\077\uff09\100\uff09\110" +
    "\uff09\113\uff09\114\uff09\115\uff09\116\uff09\117\uff09\120\uff09" +
    "\121\uff09\122\uff09\001\002\000\004\067\u02e8\001\002\000" +
    "\004\063\u02e9\001\002\000\004\064\u02ea\001\002\000\006" +
    "\047\u0219\050\u021b\001\002\000\004\055\u02ec\001\002\000" +
    "\004\060\u02ed\001\002\000\056\011\042\013\035\014\051" +
    "\015\101\020\066\023\071\024\070\027\102\030\043\064" +
    "\077\075\075\077\054\100\040\110\033\113\073\114\060" +
    "\115\041\116\012\117\011\120\007\121\006\122\005\001" +
    "\002\000\004\061\u02ef\001\002\000\066\003\uff0b\004\uff0b" +
    "\011\uff0b\013\uff0b\014\uff0b\015\uff0b\020\uff0b\023\uff0b\024" +
    "\uff0b\027\uff0b\030\uff0b\033\uff0b\061\uff0b\064\uff0b\075\uff0b" +
    "\077\uff0b\100\uff0b\110\uff0b\113\uff0b\114\uff0b\115\uff0b\116" +
    "\uff0b\117\uff0b\120\uff0b\121\uff0b\122\uff0b\001\002\000\016" +
    "\067\u02f1\116\012\117\011\120\007\121\006\122\005\001" +
    "\002\000\004\063\u0316\001\002\000\004\063\u02f3\001\002" +
    "\000\016\064\u02f5\116\012\117\011\120\007\121\006\122" +
    "\005\001\002\000\016\041\113\042\115\043\163\044\114" +
    "\045\112\046\120\001\002\000\016\041\113\042\115\043" +
    "\163\044\114\045\112\046\120\001\002\000\014\116\012" +
    "\117\011\120\007\121\006\122\005\001\002\000\004\063" +
    "\u02f8\001\002\000\014\116\012\117\011\120\007\121\006" +
    "\122\005\001\002\000\006\047\u0219\050\u021b\001\002\000" +
    "\004\055\u02fb\001\002\000\004\060\u02fc\001\002\000\056" +
    "\011\042\013\035\014\051\015\101\020\066\023\071\024" +
    "\070\027\102\030\043\064\077\075\075\077\054\100\040" +
    "\110\033\113\073\114\060\115\041\116\012\117\011\120" +
    "\007\121\006\122\005\001\002\000\004\061\u02fe\001\002" +
    "\000\066\003\ufed5\004\ufed5\011\ufed5\013\ufed5\014\ufed5\015" +
    "\ufed5\020\ufed5\023\ufed5\024\ufed5\027\ufed5\030\ufed5\033\ufed5" +
    "\061\ufed5\064\ufed5\075\ufed5\077\ufed5\100\ufed5\110\ufed5\113" +
    "\ufed5\114\ufed5\115\ufed5\116\ufed5\117\ufed5\120\ufed5\121\ufed5" +
    "\122\ufed5\001\002\000\016\067\u0300\116\012\117\011\120" +
    "\007\121\006\122\005\001\002\000\004\063\u030f\001\002" +
    "\000\004\063\u0302\001\002\000\016\064\u0304\116\012\117" +
    "\011\120\007\121\006\122\005\001\002\000\006\047\u0219" +
    "\050\u021b\001\002\000\006\047\u0219\050\u021b\001\002\000" +
    "\004\055\u0306\001\002\000\004\060\u0307\001\002\000\056" +
    "\011\042\013\035\014\051\015\101\020\066\023\071\024" +
    "\070\027\102\030\043\064\077\075\075\077\054\100\040" +
    "\110\033\113\073\114\060\115\041\116\012\117\011\120" +
    "\007\121\006\122\005\001\002\000\004\061\u0309\001\002" +
    "\000\066\003\ufed9\004\ufed9\011\ufed9\013\ufed9\014\ufed9\015" +
    "\ufed9\020\ufed9\023\ufed9\024\ufed9\027\ufed9\030\ufed9\033\ufed9" +
    "\061\ufed9\064\ufed9\075\ufed9\077\ufed9\100\ufed9\110\ufed9\113" +
    "\ufed9\114\ufed9\115\ufed9\116\ufed9\117\ufed9\120\ufed9\121\ufed9" +
    "\122\ufed9\001\002\000\004\055\u030b\001\002\000\004\060" +
    "\u030c\001\002\000\056\011\042\013\035\014\051\015\101" +
    "\020\066\023\071\024\070\027\102\030\043\064\077\075" +
    "\075\077\054\100\040\110\033\113\073\114\060\115\041" +
    "\116\012\117\011\120\007\121\006\122\005\001\002\000" +
    "\004\061\u030e\001\002\000\066\003\ufed3\004\ufed3\011\ufed3" +
    "\013\ufed3\014\ufed3\015\ufed3\020\ufed3\023\ufed3\024\ufed3\027" +
    "\ufed3\030\ufed3\033\ufed3\061\ufed3\064\ufed3\075\ufed3\077\ufed3" +
    "\100\ufed3\110\ufed3\113\ufed3\114\ufed3\115\ufed3\116\ufed3\117" +
    "\ufed3\120\ufed3\121\ufed3\122\ufed3\001\002\000\014\116\012" +
    "\117\011\120\007\121\006\122\005\001\002\000\006\047" +
    "\u0219\050\u021b\001\002\000\004\055\u0312\001\002\000\004" +
    "\060\u0313\001\002\000\056\011\042\013\035\014\051\015" +
    "\101\020\066\023\071\024\070\027\102\030\043\064\077" +
    "\075\075\077\054\100\040\110\033\113\073\114\060\115" +
    "\041\116\012\117\011\120\007\121\006\122\005\001\002" +
    "\000\004\061\u0315\001\002\000\066\003\ufed8\004\ufed8\011" +
    "\ufed8\013\ufed8\014\ufed8\015\ufed8\020\ufed8\023\ufed8\024\ufed8" +
    "\027\ufed8\030\ufed8\033\ufed8\061\ufed8\064\ufed8\075\ufed8\077" +
    "\ufed8\100\ufed8\110\ufed8\113\ufed8\114\ufed8\115\ufed8\116\ufed8" +
    "\117\ufed8\120\ufed8\121\ufed8\122\ufed8\001\002\000\004\064" +
    "\u0317\001\002\000\016\041\113\042\115\043\163\044\114" +
    "\045\112\046\120\001\002\000\004\067\u0319\001\002\000" +
    "\004\063\u031a\001\002\000\004\064\u031b\001\002\000\006" +
    "\047\u0219\050\u021b\001\002\000\004\055\u031d\001\002\000" +
    "\004\060\u031e\001\002\000\056\011\042\013\035\014\051" +
    "\015\101\020\066\023\071\024\070\027\102\030\043\064" +
    "\077\075\075\077\054\100\040\110\033\113\073\114\060" +
    "\115\041\116\012\117\011\120\007\121\006\122\005\001" +
    "\002\000\004\061\u0320\001\002\000\066\003\uff0d\004\uff0d" +
    "\011\uff0d\013\uff0d\014\uff0d\015\uff0d\020\uff0d\023\uff0d\024" +
    "\uff0d\027\uff0d\030\uff0d\033\uff0d\061\uff0d\064\uff0d\075\uff0d" +
    "\077\uff0d\100\uff0d\110\uff0d\113\uff0d\114\uff0d\115\uff0d\116" +
    "\uff0d\117\uff0d\120\uff0d\121\uff0d\122\uff0d\001\002\000\026" +
    "\031\u01f8\032\u01f6\065\u0324\066\u0326\067\u0323\116\012\117" +
    "\011\120\007\121\006\122\005\001\002\000\066\003\uffb5" +
    "\004\uffb5\011\uffb5\013\uffb5\014\uffb5\015\uffb5\020\uffb5\023" +
    "\uffb5\024\uffb5\027\uffb5\030\uffb5\033\uffb5\061\uffb5\064\uffb5" +
    "\075\uffb5\077\uffb5\100\uffb5\110\uffb5\113\uffb5\114\uffb5\115" +
    "\uffb5\116\uffb5\117\uffb5\120\uffb5\121\uffb5\122\uffb5\001\002" +
    "\000\004\063\u032c\001\002\000\004\063\u032b\001\002\000" +
    "\004\063\u032a\001\002\000\004\063\u0329\001\002\000\004" +
    "\063\u0328\001\002\000\066\003\uffbe\004\uffbe\011\uffbe\013" +
    "\uffbe\014\uffbe\015\uffbe\020\uffbe\023\uffbe\024\uffbe\027\uffbe" +
    "\030\uffbe\033\uffbe\061\uffbe\064\uffbe\075\uffbe\077\uffbe\100" +
    "\uffbe\110\uffbe\113\uffbe\114\uffbe\115\uffbe\116\uffbe\117\uffbe" +
    "\120\uffbe\121\uffbe\122\uffbe\001\002\000\066\003\uff9c\004" +
    "\uff9c\011\uff9c\013\uff9c\014\uff9c\015\uff9c\020\uff9c\023\uff9c" +
    "\024\uff9c\027\uff9c\030\uff9c\033\uff9c\061\uff9c\064\uff9c\075" +
    "\uff9c\077\uff9c\100\uff9c\110\uff9c\113\uff9c\114\uff9c\115\uff9c" +
    "\116\uff9c\117\uff9c\120\uff9c\121\uff9c\122\uff9c\001\002\000" +
    "\066\003\uff8d\004\uff8d\011\uff8d\013\uff8d\014\uff8d\015\uff8d" +
    "\020\uff8d\023\uff8d\024\uff8d\027\uff8d\030\uff8d\033\uff8d\061" +
    "\uff8d\064\uff8d\075\uff8d\077\uff8d\100\uff8d\110\uff8d\113\uff8d" +
    "\114\uff8d\115\uff8d\116\uff8d\117\uff8d\120\uff8d\121\uff8d\122" +
    "\uff8d\001\002\000\066\003\uffb0\004\uffb0\011\uffb0\013\uffb0" +
    "\014\uffb0\015\uffb0\020\uffb0\023\uffb0\024\uffb0\027\uffb0\030" +
    "\uffb0\033\uffb0\061\uffb0\064\uffb0\075\uffb0\077\uffb0\100\uffb0" +
    "\110\uffb0\113\uffb0\114\uffb0\115\uffb0\116\uffb0\117\uffb0\120" +
    "\uffb0\121\uffb0\122\uffb0\001\002\000\066\003\uffc3\004\uffc3" +
    "\011\uffc3\013\uffc3\014\uffc3\015\uffc3\020\uffc3\023\uffc3\024" +
    "\uffc3\027\uffc3\030\uffc3\033\uffc3\061\uffc3\064\uffc3\075\uffc3" +
    "\077\uffc3\100\uffc3\110\uffc3\113\uffc3\114\uffc3\115\uffc3\116" +
    "\uffc3\117\uffc3\120\uffc3\121\uffc3\122\uffc3\001\002\000\004" +
    "\063\u0338\001\002\000\004\063\u0337\001\002\000\004\054" +
    "\u0334\001\002\000\004\054\u0331\001\002\000\004\055\u0332" +
    "\001\002\000\004\063\u0333\001\002\000\066\003\uff39\004" +
    "\uff39\011\uff39\013\uff39\014\uff39\015\uff39\020\uff39\023\uff39" +
    "\024\uff39\027\uff39\030\uff39\033\uff39\061\uff39\064\uff39\075" +
    "\uff39\077\uff39\100\uff39\110\uff39\113\uff39\114\uff39\115\uff39" +
    "\116\uff39\117\uff39\120\uff39\121\uff39\122\uff39\001\002\000" +
    "\004\055\u0335\001\002\000\004\063\u0336\001\002\000\066" +
    "\003\uff3b\004\uff3b\011\uff3b\013\uff3b\014\uff3b\015\uff3b\020" +
    "\uff3b\023\uff3b\024\uff3b\027\uff3b\030\uff3b\033\uff3b\061\uff3b" +
    "\064\uff3b\075\uff3b\077\uff3b\100\uff3b\110\uff3b\113\uff3b\114" +
    "\uff3b\115\uff3b\116\uff3b\117\uff3b\120\uff3b\121\uff3b\122\uff3b" +
    "\001\002\000\066\003\uff4a\004\uff4a\011\uff4a\013\uff4a\014" +
    "\uff4a\015\uff4a\020\uff4a\023\uff4a\024\uff4a\027\uff4a\030\uff4a" +
    "\033\uff4a\061\uff4a\064\uff4a\075\uff4a\077\uff4a\100\uff4a\110" +
    "\uff4a\113\uff4a\114\uff4a\115\uff4a\116\uff4a\117\uff4a\120\uff4a" +
    "\121\uff4a\122\uff4a\001\002\000\066\003\uff4b\004\uff4b\011" +
    "\uff4b\013\uff4b\014\uff4b\015\uff4b\020\uff4b\023\uff4b\024\uff4b" +
    "\027\uff4b\030\uff4b\033\uff4b\061\uff4b\064\uff4b\075\uff4b\077" +
    "\uff4b\100\uff4b\110\uff4b\113\uff4b\114\uff4b\115\uff4b\116\uff4b" +
    "\117\uff4b\120\uff4b\121\uff4b\122\uff4b\001\002\000\012\003" +
    "\uffd5\004\uffd5\033\uffd5\061\uffd5\001\002\000\012\003\uffdf" +
    "\004\uffdf\033\uffdf\061\uffdf\001\002\000\004\055\u0343\001" +
    "\002\000\006\055\u033d\065\u033e\001\002\000\004\063\u0342" +
    "\001\002\000\006\055\u033f\063\u0340\001\002\000\070\003" +
    "\ufdaa\004\ufdaa\011\ufdaa\013\ufdaa\014\ufdaa\015\ufdaa\020\ufdaa" +
    "\023\ufdaa\024\ufdaa\027\ufdaa\030\ufdaa\033\ufdaa\061\ufdaa\063" +
    "\u0341\064\ufdaa\075\ufdaa\077\ufdaa\100\ufdaa\110\ufdaa\113\ufdaa" +
    "\114\ufdaa\115\ufdaa\116\ufdaa\117\ufdaa\120\ufdaa\121\ufdaa\122" +
    "\ufdaa\001\002\000\066\003\ufda9\004\ufda9\011\ufda9\013\ufda9" +
    "\014\ufda9\015\ufda9\020\ufda9\023\ufda9\024\ufda9\027\ufda9\030" +
    "\ufda9\033\ufda9\061\ufda9\064\ufda9\075\ufda9\077\ufda9\100\ufda9" +
    "\110\ufda9\113\ufda9\114\ufda9\115\ufda9\116\ufda9\117\ufda9\120" +
    "\ufda9\121\ufda9\122\ufda9\001\002\000\066\003\ufdab\004\ufdab" +
    "\011\ufdab\013\ufdab\014\ufdab\015\ufdab\020\ufdab\023\ufdab\024" +
    "\ufdab\027\ufdab\030\ufdab\033\ufdab\061\ufdab\064\ufdab\075\ufdab" +
    "\077\ufdab\100\ufdab\110\ufdab\113\ufdab\114\ufdab\115\ufdab\116" +
    "\ufdab\117\ufdab\120\ufdab\121\ufdab\122\ufdab\001\002\000\066" +
    "\003\ufda8\004\ufda8\011\ufda8\013\ufda8\014\ufda8\015\ufda8\020" +
    "\ufda8\023\ufda8\024\ufda8\027\ufda8\030\ufda8\033\ufda8\061\ufda8" +
    "\064\ufda8\075\ufda8\077\ufda8\100\ufda8\110\ufda8\113\ufda8\114" +
    "\ufda8\115\ufda8\116\ufda8\117\ufda8\120\ufda8\121\ufda8\122\ufda8" +
    "\001\002\000\004\063\u0344\001\002\000\066\003\ufda7\004" +
    "\ufda7\011\ufda7\013\ufda7\014\ufda7\015\ufda7\020\ufda7\023\ufda7" +
    "\024\ufda7\027\ufda7\030\ufda7\033\ufda7\061\ufda7\064\ufda7\075" +
    "\ufda7\077\ufda7\100\ufda7\110\ufda7\113\ufda7\114\ufda7\115\ufda7" +
    "\116\ufda7\117\ufda7\120\ufda7\121\ufda7\122\ufda7\001\002\000" +
    "\012\003\uffe9\004\uffe9\033\uffe9\061\uffe9\001\002\000\024" +
    "\054\u01f3\060\u0350\062\u01f1\064\u01f2\116\012\117\011\120" +
    "\007\121\006\122\005\001\002\000\060\011\042\013\035" +
    "\014\051\015\101\020\066\023\071\024\070\027\102\030" +
    "\043\060\u0349\064\077\075\075\077\054\100\040\110\033" +
    "\113\073\114\060\115\041\116\012\117\011\120\007\121" +
    "\006\122\005\001\002\000\004\061\u034f\001\002\000\062" +
    "\003\u034b\011\042\013\035\014\051\015\101\020\066\023" +
    "\071\024\070\027\102\030\043\061\u034c\064\077\075\075" +
    "\077\054\100\040\110\033\113\073\114\060\115\041\116" +
    "\012\117\011\120\007\121\006\122\005\001\002\000\006" +
    "\003\u034d\061\u034e\001\002\000\066\003\uff17\004\uff17\011" +
    "\uff17\013\uff17\014\uff17\015\uff17\020\uff17\023\uff17\024\uff17" +
    "\027\uff17\030\uff17\033\uff17\061\uff17\064\uff17\075\uff17\077" +
    "\uff17\100\uff17\110\uff17\113\uff17\114\uff17\115\uff17\116\uff17" +
    "\117\uff17\120\uff17\121\uff17\122\uff17\001\002\000\066\003" +
    "\uff19\004\uff19\011\uff19\013\uff19\014\uff19\015\uff19\020\uff19" +
    "\023\uff19\024\uff19\027\uff19\030\uff19\033\uff19\061\uff19\064" +
    "\uff19\075\uff19\077\uff19\100\uff19\110\uff19\113\uff19\114\uff19" +
    "\115\uff19\116\uff19\117\uff19\120\uff19\121\uff19\122\uff19\001" +
    "\002\000\066\003\uff18\004\uff18\011\uff18\013\uff18\014\uff18" +
    "\015\uff18\020\uff18\023\uff18\024\uff18\027\uff18\030\uff18\033" +
    "\uff18\061\uff18\064\uff18\075\uff18\077\uff18\100\uff18\110\uff18" +
    "\113\uff18\114\uff18\115\uff18\116\uff18\117\uff18\120\uff18\121" +
    "\uff18\122\uff18\001\002\000\066\003\uff1c\004\uff1c\011\uff1c" +
    "\013\uff1c\014\uff1c\015\uff1c\020\uff1c\023\uff1c\024\uff1c\027" +
    "\uff1c\030\uff1c\033\uff1c\061\uff1c\064\uff1c\075\uff1c\077\uff1c" +
    "\100\uff1c\110\uff1c\113\uff1c\114\uff1c\115\uff1c\116\uff1c\117" +
    "\uff1c\120\uff1c\121\uff1c\122\uff1c\001\002\000\066\003\uff1a" +
    "\004\uff1a\011\uff1a\013\uff1a\014\uff1a\015\uff1a\020\uff1a\023" +
    "\uff1a\024\uff1a\027\uff1a\030\uff1a\033\uff1a\061\uff1a\064\uff1a" +
    "\075\uff1a\077\uff1a\100\uff1a\110\uff1a\113\uff1a\114\uff1a\115" +
    "\uff1a\116\uff1a\117\uff1a\120\uff1a\121\uff1a\122\uff1a\001\002" +
    "\000\056\011\042\013\035\014\051\015\101\020\066\023" +
    "\071\024\070\027\102\030\043\064\077\075\075\077\054" +
    "\100\040\110\033\113\073\114\060\115\041\116\012\117" +
    "\011\120\007\121\006\122\005\001\002\000\004\061\u0352" +
    "\001\002\000\066\003\uff1b\004\uff1b\011\uff1b\013\uff1b\014" +
    "\uff1b\015\uff1b\020\uff1b\023\uff1b\024\uff1b\027\uff1b\030\uff1b" +
    "\033\uff1b\061\uff1b\064\uff1b\075\uff1b\077\uff1b\100\uff1b\110" +
    "\uff1b\113\uff1b\114\uff1b\115\uff1b\116\uff1b\117\uff1b\120\uff1b" +
    "\121\uff1b\122\uff1b\001\002\000\012\003\uffc7\004\uffc7\033" +
    "\uffc7\061\uffc7\001\002\000\020\011\u0366\064\u0365\116\012" +
    "\117\011\120\007\121\006\122\005\001\002\000\004\064" +
    "\u0356\001\002\000\004\062\u0357\001\002\000\004\067\u0358" +
    "\001\002\000\004\063\u0359\001\002\000\004\064\u035a\001" +
    "\002\000\016\041\113\042\115\043\163\044\114\045\112" +
    "\046\120\001\002\000\004\067\u035c\001\002\000\004\063" +
    "\u035d\001\002\000\004\064\u035e\001\002\000\006\047\u0219" +
    "\050\u021b\001\002\000\004\055\u0360\001\002\000\004\060" +
    "\u0361\001\002\000\056\011\042\013\035\014\051\015\101" +
    "\020\066\023\071\024\070\027\102\030\043\064\077\075" +
    "\075\077\054\100\040\110\033\113\073\114\060\115\041" +
    "\116\012\117\011\120\007\121\006\122\005\001\002\000" +
    "\004\061\u0363\001\002\000\066\003\ufecf\004\ufecf\011\ufecf" +
    "\013\ufecf\014\ufecf\015\ufecf\020\ufecf\023\ufecf\024\ufecf\027" +
    "\ufecf\030\ufecf\033\ufecf\061\ufecf\064\ufecf\075\ufecf\077\ufecf" +
    "\100\ufecf\110\ufecf\113\ufecf\114\ufecf\115\ufecf\116\ufecf\117" +
    "\ufecf\120\ufecf\121\ufecf\122\ufecf\001\002\000\016\064\u04a7" +
    "\116\012\117\011\120\007\121\006\122\005\001\002\000" +
    "\004\062\u0499\001\002\000\020\062\u0367\064\u0369\116\012" +
    "\117\011\120\007\121\006\122\005\001\002\000\004\067" +
    "\u048d\001\002\000\004\062\u0430\001\002\000\006\062\u036a" +
    "\067\u036b\001\002\000\020\063\u0379\067\u0377\116\012\117" +
    "\011\120\007\121\006\122\005\001\002\000\004\063\u036c" +
    "\001\002\000\004\064\u036d\001\002\000\016\041\113\042" +
    "\115\043\163\044\114\045\112\046\120\001\002\000\004" +
    "\067\u036f\001\002\000\004\063\u0370\001\002\000\004\064" +
    "\u0371\001\002\000\006\047\u0219\050\u021b\001\002\000\004" +
    "\055\u0373\001\002\000\004\060\u0374\001\002\000\056\011" +
    "\042\013\035\014\051\015\101\020\066\023\071\024\070" +
    "\027\102\030\043\064\077\075\075\077\054\100\040\110" +
    "\033\113\073\114\060\115\041\116\012\117\011\120\007" +
    "\121\006\122\005\001\002\000\004\061\u0376\001\002\000" +
    "\066\003\ufecc\004\ufecc\011\ufecc\013\ufecc\014\ufecc\015\ufecc" +
    "\020\ufecc\023\ufecc\024\ufecc\027\ufecc\030\ufecc\033\ufecc\061" +
    "\ufecc\064\ufecc\075\ufecc\077\ufecc\100\ufecc\110\ufecc\113\ufecc" +
    "\114\ufecc\115\ufecc\116\ufecc\117\ufecc\120\ufecc\121\ufecc\122" +
    "\ufecc\001\002\000\006\063\u03bc\064\u03bb\001\002\000\004" +
    "\063\u0384\001\002\000\004\064\u037a\001\002\000\016\041" +
    "\113\042\115\043\163\044\114\045\112\046\120\001\002" +
    "\000\004\067\u037c\001\002\000\004\063\u037d\001\002\000" +
    "\004\064\u037e\001\002\000\006\047\u0219\050\u021b\001\002" +
    "\000\004\055\u0380\001\002\000\004\060\u0381\001\002\000" +
    "\056\011\042\013\035\014\051\015\101\020\066\023\071" +
    "\024\070\027\102\030\043\064\077\075\075\077\054\100" +
    "\040\110\033\113\073\114\060\115\041\116\012\117\011" +
    "\120\007\121\006\122\005\001\002\000\004\061\u0383\001" +
    "\002\000\066\003\ufecb\004\ufecb\011\ufecb\013\ufecb\014\ufecb" +
    "\015\ufecb\020\ufecb\023\ufecb\024\ufecb\027\ufecb\030\ufecb\033" +
    "\ufecb\061\ufecb\064\ufecb\075\ufecb\077\ufecb\100\ufecb\110\ufecb" +
    "\113\ufecb\114\ufecb\115\ufecb\116\ufecb\117\ufecb\120\ufecb\121" +
    "\ufecb\122\ufecb\001\002\000\016\064\u0386\116\012\117\011" +
    "\120\007\121\006\122\005\001\002\000\016\041\113\042" +
    "\115\043\163\044\114\045\112\046\120\001\002\000\016" +
    "\041\113\042\115\043\163\044\114\045\112\046\120\001" +
    "\002\000\016\067\u0388\116\012\117\011\120\007\121\006" +
    "\122\005\001\002\000\004\063\u0391\001\002\000\004\063" +
    "\u038a\001\002\000\004\064\u038b\001\002\000\006\047\u0219" +
    "\050\u021b\001\002\000\004\055\u038d\001\002\000\004\060" +
    "\u038e\001\002\000\056\011\042\013\035\014\051\015\101" +
    "\020\066\023\071\024\070\027\102\030\043\064\077\075" +
    "\075\077\054\100\040\110\033\113\073\114\060\115\041" +
    "\116\012\117\011\120\007\121\006\122\005\001\002\000" +
    "\004\061\u0390\001\002\000\066\003\ufefe\004\ufefe\011\ufefe" +
    "\013\ufefe\014\ufefe\015\ufefe\020\ufefe\023\ufefe\024\ufefe\027" +
    "\ufefe\030\ufefe\033\ufefe\061\ufefe\064\ufefe\075\ufefe\077\ufefe" +
    "\100\ufefe\110\ufefe\113\ufefe\114\ufefe\115\ufefe\116\ufefe\117" +
    "\ufefe\120\ufefe\121\ufefe\122\ufefe\001\002\000\016\064\u0393" +
    "\116\012\117\011\120\007\121\006\122\005\001\002\000" +
    "\006\047\u0219\050\u021b\001\002\000\006\047\u0219\050\u021b" +
    "\001\002\000\004\055\u0395\001\002\000\004\060\u0396\001" +
    "\002\000\056\011\042\013\035\014\051\015\101\020\066" +
    "\023\071\024\070\027\102\030\043\064\077\075\075\077" +
    "\054\100\040\110\033\113\073\114\060\115\041\116\012" +
    "\117\011\120\007\121\006\122\005\001\002\000\004\061" +
    "\u0398\001\002\000\066\003\uff12\004\uff12\011\uff12\013\uff12" +
    "\014\uff12\015\uff12\020\uff12\023\uff12\024\uff12\027\uff12\030" +
    "\uff12\033\uff12\061\uff12\064\uff12\075\uff12\077\uff12\100\uff12" +
    "\110\uff12\113\uff12\114\uff12\115\uff12\116\uff12\117\uff12\120" +
    "\uff12\121\uff12\122\uff12\001\002\000\004\055\u039a\001\002" +
    "\000\004\060\u039b\001\002\000\056\011\042\013\035\014" +
    "\051\015\101\020\066\023\071\024\070\027\102\030\043" +
    "\064\077\075\075\077\054\100\040\110\033\113\073\114" +
    "\060\115\041\116\012\117\011\120\007\121\006\122\005" +
    "\001\002\000\004\061\u039d\001\002\000\066\003\ufefd\004" +
    "\ufefd\011\ufefd\013\ufefd\014\ufefd\015\ufefd\020\ufefd\023\ufefd" +
    "\024\ufefd\027\ufefd\030\ufefd\033\ufefd\061\ufefd\064\ufefd\075" +
    "\ufefd\077\ufefd\100\ufefd\110\ufefd\113\ufefd\114\ufefd\115\ufefd" +
    "\116\ufefd\117\ufefd\120\ufefd\121\ufefd\122\ufefd\001\002\000" +
    "\016\067\u039f\116\012\117\011\120\007\121\006\122\005" +
    "\001\002\000\004\063\u03ae\001\002\000\004\063\u03a1\001" +
    "\002\000\016\064\u03a3\116\012\117\011\120\007\121\006" +
    "\122\005\001\002\000\006\047\u0219\050\u021b\001\002\000" +
    "\006\047\u0219\050\u021b\001\002\000\004\055\u03a5\001\002" +
    "\000\004\060\u03a6\001\002\000\056\011\042\013\035\014" +
    "\051\015\101\020\066\023\071\024\070\027\102\030\043" +
    "\064\077\075\075\077\054\100\040\110\033\113\073\114" +
    "\060\115\041\116\012\117\011\120\007\121\006\122\005" +
    "\001\002\000\004\061\u03a8\001\002\000\066\003\ufeed\004" +
    "\ufeed\011\ufeed\013\ufeed\014\ufeed\015\ufeed\020\ufeed\023\ufeed" +
    "\024\ufeed\027\ufeed\030\ufeed\033\ufeed\061\ufeed\064\ufeed\075" +
    "\ufeed\077\ufeed\100\ufeed\110\ufeed\113\ufeed\114\ufeed\115\ufeed" +
    "\116\ufeed\117\ufeed\120\ufeed\121\ufeed\122\ufeed\001\002\000" +
    "\004\055\u03aa\001\002\000\004\060\u03ab\001\002\000\056" +
    "\011\042\013\035\014\051\015\101\020\066\023\071\024" +
    "\070\027\102\030\043\064\077\075\075\077\054\100\040" +
    "\110\033\113\073\114\060\115\041\116\012\117\011\120" +
    "\007\121\006\122\005\001\002\000\004\061\u03ad\001\002" +
    "\000\066\003\ufee0\004\ufee0\011\ufee0\013\ufee0\014\ufee0\015" +
    "\ufee0\020\ufee0\023\ufee0\024\ufee0\027\ufee0\030\ufee0\033\ufee0" +
    "\061\ufee0\064\ufee0\075\ufee0\077\ufee0\100\ufee0\110\ufee0\113" +
    "\ufee0\114\ufee0\115\ufee0\116\ufee0\117\ufee0\120\ufee0\121\ufee0" +
    "\122\ufee0\001\002\000\016\064\u03b0\116\012\117\011\120" +
    "\007\121\006\122\005\001\002\000\006\047\u0219\050\u021b" +
    "\001\002\000\006\047\u0219\050\u021b\001\002\000\004\055" +
    "\u03b2\001\002\000\004\060\u03b3\001\002\000\056\011\042" +
    "\013\035\014\051\015\101\020\066\023\071\024\070\027" +
    "\102\030\043\064\077\075\075\077\054\100\040\110\033" +
    "\113\073\114\060\115\041\116\012\117\011\120\007\121" +
    "\006\122\005\001\002\000\004\061\u03b5\001\002\000\066" +
    "\003\ufeff\004\ufeff\011\ufeff\013\ufeff\014\ufeff\015\ufeff\020" +
    "\ufeff\023\ufeff\024\ufeff\027\ufeff\030\ufeff\033\ufeff\061\ufeff" +
    "\064\ufeff\075\ufeff\077\ufeff\100\ufeff\110\ufeff\113\ufeff\114" +
    "\ufeff\115\ufeff\116\ufeff\117\ufeff\120\ufeff\121\ufeff\122\ufeff" +
    "\001\002\000\004\055\u03b7\001\002\000\004\060\u03b8\001" +
    "\002\000\056\011\042\013\035\014\051\015\101\020\066" +
    "\023\071\024\070\027\102\030\043\064\077\075\075\077" +
    "\054\100\040\110\033\113\073\114\060\115\041\116\012" +
    "\117\011\120\007\121\006\122\005\001\002\000\004\061" +
    "\u03ba\001\002\000\066\003\ufeec\004\ufeec\011\ufeec\013\ufeec" +
    "\014\ufeec\015\ufeec\020\ufeec\023\ufeec\024\ufeec\027\ufeec\030" +
    "\ufeec\033\ufeec\061\ufeec\064\ufeec\075\ufeec\077\ufeec\100\ufeec" +
    "\110\ufeec\113\ufeec\114\ufeec\115\ufeec\116\ufeec\117\ufeec\120" +
    "\ufeec\121\ufeec\122\ufeec\001\002\000\016\041\113\042\115" +
    "\043\163\044\114\045\112\046\120\001\002\000\032\041" +
    "\113\042\115\043\163\044\114\045\112\046\120\064\u03be" +
    "\116\012\117\011\120\007\121\006\122\005\001\002\000" +
    "\004\067\u041f\001\002\000\020\041\113\042\115\043\163" +
    "\044\114\045\112\046\120\067\u03de\001\002\000\016\041" +
    "\113\042\115\043\163\044\114\045\112\046\120\001\002" +
    "\000\016\067\u03c1\116\012\117\011\120\007\121\006\122" +
    "\005\001\002\000\004\063\u03d0\001\002\000\004\063\u03c3" +
    "\001\002\000\016\064\u03c5\116\012\117\011\120\007\121" +
    "\006\122\005\001\002\000\006\047\u0219\050\u021b\001\002" +
    "\000\006\047\u0219\050\u021b\001\002\000\004\055\u03c7\001" +
    "\002\000\004\060\u03c8\001\002\000\056\011\042\013\035" +
    "\014\051\015\101\020\066\023\071\024\070\027\102\030" +
    "\043\064\077\075\075\077\054\100\040\110\033\113\073" +
    "\114\060\115\041\116\012\117\011\120\007\121\006\122" +
    "\005\001\002\000\004\061\u03ca\001\002\000\066\003\ufefc" +
    "\004\ufefc\011\ufefc\013\ufefc\014\ufefc\015\ufefc\020\ufefc\023" +
    "\ufefc\024\ufefc\027\ufefc\030\ufefc\033\ufefc\061\ufefc\064\ufefc" +
    "\075\ufefc\077\ufefc\100\ufefc\110\ufefc\113\ufefc\114\ufefc\115" +
    "\ufefc\116\ufefc\117\ufefc\120\ufefc\121\ufefc\122\ufefc\001\002" +
    "\000\004\055\u03cc\001\002\000\004\060\u03cd\001\002\000" +
    "\056\011\042\013\035\014\051\015\101\020\066\023\071" +
    "\024\070\027\102\030\043\064\077\075\075\077\054\100" +
    "\040\110\033\113\073\114\060\115\041\116\012\117\011" +
    "\120\007\121\006\122\005\001\002\000\004\061\u03cf\001" +
    "\002\000\066\003\ufeeb\004\ufeeb\011\ufeeb\013\ufeeb\014\ufeeb" +
    "\015\ufeeb\020\ufeeb\023\ufeeb\024\ufeeb\027\ufeeb\030\ufeeb\033" +
    "\ufeeb\061\ufeeb\064\ufeeb\075\ufeeb\077\ufeeb\100\ufeeb\110\ufeeb" +
    "\113\ufeeb\114\ufeeb\115\ufeeb\116\ufeeb\117\ufeeb\120\ufeeb\121" +
    "\ufeeb\122\ufeeb\001\002\000\016\064\u03d2\116\012\117\011" +
    "\120\007\121\006\122\005\001\002\000\006\047\u0219\050" +
    "\u021b\001\002\000\006\047\u0219\050\u021b\001\002\000\004" +
    "\055\u03d4\001\002\000\004\060\u03d5\001\002\000\056\011" +
    "\042\013\035\014\051\015\101\020\066\023\071\024\070" +
    "\027\102\030\043\064\077\075\075\077\054\100\040\110" +
    "\033\113\073\114\060\115\041\116\012\117\011\120\007" +
    "\121\006\122\005\001\002\000\004\061\u03d7\001\002\000" +
    "\066\003\uff11\004\uff11\011\uff11\013\uff11\014\uff11\015\uff11" +
    "\020\uff11\023\uff11\024\uff11\027\uff11\030\uff11\033\uff11\061" +
    "\uff11\064\uff11\075\uff11\077\uff11\100\uff11\110\uff11\113\uff11" +
    "\114\uff11\115\uff11\116\uff11\117\uff11\120\uff11\121\uff11\122" +
    "\uff11\001\002\000\004\055\u03d9\001\002\000\004\060\u03da" +
    "\001\002\000\056\011\042\013\035\014\051\015\101\020" +
    "\066\023\071\024\070\027\102\030\043\064\077\075\075" +
    "\077\054\100\040\110\033\113\073\114\060\115\041\116" +
    "\012\117\011\120\007\121\006\122\005\001\002\000\004" +
    "\061\u03dc\001\002\000\066\003\ufefb\004\ufefb\011\ufefb\013" +
    "\ufefb\014\ufefb\015\ufefb\020\ufefb\023\ufefb\024\ufefb\027\ufefb" +
    "\030\ufefb\033\ufefb\061\ufefb\064\ufefb\075\ufefb\077\ufefb\100" +
    "\ufefb\110\ufefb\113\ufefb\114\ufefb\115\ufefb\116\ufefb\117\ufefb" +
    "\120\ufefb\121\ufefb\122\ufefb\001\002\000\020\063\u03e8\067" +
    "\u03e6\116\012\117\011\120\007\121\006\122\005\001\002" +
    "\000\004\063\u03df\001\002\000\004\064\u03e0\001\002\000" +
    "\006\047\u0219\050\u021b\001\002\000\004\055\u03e2\001\002" +
    "\000\004\060\u03e3\001\002\000\056\011\042\013\035\014" +
    "\051\015\101\020\066\023\071\024\070\027\102\030\043" +
    "\064\077\075\075\077\054\100\040\110\033\113\073\114" +
    "\060\115\041\116\012\117\011\120\007\121\006\122\005" +
    "\001\002\000\004\061\u03e5\001\002\000\066\003\ufec8\004" +
    "\ufec8\011\ufec8\013\ufec8\014\ufec8\015\ufec8\020\ufec8\023\ufec8" +
    "\024\ufec8\027\ufec8\030\ufec8\033\ufec8\061\ufec8\064\ufec8\075" +
    "\ufec8\077\ufec8\100\ufec8\110\ufec8\113\ufec8\114\ufec8\115\ufec8" +
    "\116\ufec8\117\ufec8\120\ufec8\121\ufec8\122\ufec8\001\002\000" +
    "\006\063\u03fd\064\u03fc\001\002\000\004\063\u03ef\001\002" +
    "\000\004\064\u03e9\001\002\000\006\047\u0219\050\u021b\001" +
    "\002\000\004\055\u03eb\001\002\000\004\060\u03ec\001\002" +
    "\000\056\011\042\013\035\014\051\015\101\020\066\023" +
    "\071\024\070\027\102\030\043\064\077\075\075\077\054" +
    "\100\040\110\033\113\073\114\060\115\041\116\012\117" +
    "\011\120\007\121\006\122\005\001\002\000\004\061\u03ee" +
    "\001\002\000\066\003\ufec7\004\ufec7\011\ufec7\013\ufec7\014" +
    "\ufec7\015\ufec7\020\ufec7\023\ufec7\024\ufec7\027\ufec7\030\ufec7" +
    "\033\ufec7\061\ufec7\064\ufec7\075\ufec7\077\ufec7\100\ufec7\110" +
    "\ufec7\113\ufec7\114\ufec7\115\ufec7\116\ufec7\117\ufec7\120\ufec7" +
    "\121\ufec7\122\ufec7\001\002\000\016\064\u03f1\116\012\117" +
    "\011\120\007\121\006\122\005\001\002\000\006\047\u0219" +
    "\050\u021b\001\002\000\006\047\u0219\050\u021b\001\002\000" +
    "\004\055\u03f3\001\002\000\004\060\u03f4\001\002\000\056" +
    "\011\042\013\035\014\051\015\101\020\066\023\071\024" +
    "\070\027\102\030\043\064\077\075\075\077\054\100\040" +
    "\110\033\113\073\114\060\115\041\116\012\117\011\120" +
    "\007\121\006\122\005\001\002\000\004\061\u03f6\001\002" +
    "\000\066\003\uff10\004\uff10\011\uff10\013\uff10\014\uff10\015" +
    "\uff10\020\uff10\023\uff10\024\uff10\027\uff10\030\uff10\033\uff10" +
    "\061\uff10\064\uff10\075\uff10\077\uff10\100\uff10\110\uff10\113" +
    "\uff10\114\uff10\115\uff10\116\uff10\117\uff10\120\uff10\121\uff10" +
    "\122\uff10\001\002\000\004\055\u03f8\001\002\000\004\060" +
    "\u03f9\001\002\000\056\011\042\013\035\014\051\015\101" +
    "\020\066\023\071\024\070\027\102\030\043\064\077\075" +
    "\075\077\054\100\040\110\033\113\073\114\060\115\041" +
    "\116\012\117\011\120\007\121\006\122\005\001\002\000" +
    "\004\061\u03fb\001\002\000\066\003\ufefa\004\ufefa\011\ufefa" +
    "\013\ufefa\014\ufefa\015\ufefa\020\ufefa\023\ufefa\024\ufefa\027" +
    "\ufefa\030\ufefa\033\ufefa\061\ufefa\064\ufefa\075\ufefa\077\ufefa" +
    "\100\ufefa\110\ufefa\113\ufefa\114\ufefa\115\ufefa\116\ufefa\117" +
    "\ufefa\120\ufefa\121\ufefa\122\ufefa\001\002\000\006\047\u0219" +
    "\050\u021b\001\002\000\022\047\u0219\050\u021b\064\u03ff\116" +
    "\012\117\011\120\007\121\006\122\005\001\002\000\004" +
    "\055\u0416\001\002\000\010\047\u0219\050\u021b\055\u0406\001" +
    "\002\000\006\047\u0219\050\u021b\001\002\000\004\055\u0402" +
    "\001\002\000\004\060\u0403\001\002\000\056\011\042\013" +
    "\035\014\051\015\101\020\066\023\071\024\070\027\102" +
    "\030\043\064\077\075\075\077\054\100\040\110\033\113" +
    "\073\114\060\115\041\116\012\117\011\120\007\121\006" +
    "\122\005\001\002\000\004\061\u0405\001\002\000\066\003" +
    "\uff0f\004\uff0f\011\uff0f\013\uff0f\014\uff0f\015\uff0f\020\uff0f" +
    "\023\uff0f\024\uff0f\027\uff0f\030\uff0f\033\uff0f\061\uff0f\064" +
    "\uff0f\075\uff0f\077\uff0f\100\uff0f\110\uff0f\113\uff0f\114\uff0f" +
    "\115\uff0f\116\uff0f\117\uff0f\120\uff0f\121\uff0f\122\uff0f\001" +
    "\002\000\004\060\u0413\001\002\000\006\055\u0408\060\u0409" +
    "\001\002\000\060\011\042\013\035\014\051\015\101\020" +
    "\066\023\071\024\070\027\102\030\043\060\u040d\064\077" +
    "\075\075\077\054\100\040\110\033\113\073\114\060\115" +
    "\041\116\012\117\011\120\007\121\006\122\005\001\002" +
    "\000\056\011\042\013\035\014\051\015\101\020\066\023" +
    "\071\024\070\027\102\030\043\064\077\075\075\077\054" +
    "\100\040\110\033\113\073\114\060\115\041\116\012\117" +
    "\011\120\007\121\006\122\005\001\002\000\004\061\u040b" +
    "\001\002\000\066\003\ufec3\004\ufec3\011\ufec3\013\ufec3\014" +
    "\ufec3\015\ufec3\020\ufec3\023\ufec3\024\ufec3\027\ufec3\030\ufec3" +
    "\033\ufec3\061\ufec3\064\ufec3\075\ufec3\077\ufec3\100\ufec3\110" +
    "\ufec3\113\ufec3\114\ufec3\115\ufec3\116\ufec3\117\ufec3\120\ufec3" +
    "\121\ufec3\122\ufec3\001\002\000\004\061\u0412\001\002\000" +
    "\060\011\042\013\035\014\051\015\101\020\066\023\071" +
    "\024\070\027\102\030\043\061\u040f\064\077\075\075\077" +
    "\054\100\040\110\033\113\073\114\060\115\041\116\012" +
    "\117\011\120\007\121\006\122\005\001\002\000\006\003" +
    "\u0410\061\u0411\001\002\000\066\003\ufec1\004\ufec1\011\ufec1" +
    "\013\ufec1\014\ufec1\015\ufec1\020\ufec1\023\ufec1\024\ufec1\027" +
    "\ufec1\030\ufec1\033\ufec1\061\ufec1\064\ufec1\075\ufec1\077\ufec1" +
    "\100\ufec1\110\ufec1\113\ufec1\114\ufec1\115\ufec1\116\ufec1\117" +
    "\ufec1\120\ufec1\121\ufec1\122\ufec1\001\002\000\066\003\ufec0" +
    "\004\ufec0\011\ufec0\013\ufec0\014\ufec0\015\ufec0\020\ufec0\023" +
    "\ufec0\024\ufec0\027\ufec0\030\ufec0\033\ufec0\061\ufec0\064\ufec0" +
    "\075\ufec0\077\ufec0\100\ufec0\110\ufec0\113\ufec0\114\ufec0\115" +
    "\ufec0\116\ufec0\117\ufec0\120\ufec0\121\ufec0\122\ufec0\001\002" +
    "\000\066\003\uff16\004\uff16\011\uff16\013\uff16\014\uff16\015" +
    "\uff16\020\uff16\023\uff16\024\uff16\027\uff16\030\uff16\033\uff16" +
    "\061\uff16\064\uff16\075\uff16\077\uff16\100\uff16\110\uff16\113" +
    "\uff16\114\uff16\115\uff16\116\uff16\117\uff16\120\uff16\121\uff16" +
    "\122\uff16\001\002\000\066\003\ufec2\004\ufec2\011\ufec2\013" +
    "\ufec2\014\ufec2\015\ufec2\020\ufec2\023\ufec2\024\ufec2\027\ufec2" +
    "\030\ufec2\033\ufec2\061\ufec2\064\ufec2\075\ufec2\077\ufec2\100" +
    "\ufec2\110\ufec2\113\ufec2\114\ufec2\115\ufec2\116\ufec2\117\ufec2" +
    "\120\ufec2\121\ufec2\122\ufec2\001\002\000\056\011\042\013" +
    "\035\014\051\015\101\020\066\023\071\024\070\027\102" +
    "\030\043\064\077\075\075\077\054\100\040\110\033\113" +
    "\073\114\060\115\041\116\012\117\011\120\007\121\006" +
    "\122\005\001\002\000\004\061\u0415\001\002\000\066\003" +
    "\ufec4\004\ufec4\011\ufec4\013\ufec4\014\ufec4\015\ufec4\020\ufec4" +
    "\023\ufec4\024\ufec4\027\ufec4\030\ufec4\033\ufec4\061\ufec4\064" +
    "\ufec4\075\ufec4\077\ufec4\100\ufec4\110\ufec4\113\ufec4\114\ufec4" +
    "\115\ufec4\116\ufec4\117\ufec4\120\ufec4\121\ufec4\122\ufec4\001" +
    "\002\000\004\060\u0417\001\002\000\056\011\042\013\035" +
    "\014\051\015\101\020\066\023\071\024\070\027\102\030" +
    "\043\064\077\075\075\077\054\100\040\110\033\113\073" +
    "\114\060\115\041\116\012\117\011\120\007\121\006\122" +
    "\005\001\002\000\004\061\u0419\001\002\000\066\003\ufec5" +
    "\004\ufec5\011\ufec5\013\ufec5\014\ufec5\015\ufec5\020\ufec5\023" +
    "\ufec5\024\ufec5\027\ufec5\030\ufec5\033\ufec5\061\ufec5\064\ufec5" +
    "\075\ufec5\077\ufec5\100\ufec5\110\ufec5\113\ufec5\114\ufec5\115" +
    "\ufec5\116\ufec5\117\ufec5\120\ufec5\121\ufec5\122\ufec5\001\002" +
    "\000\004\055\u041b\001\002\000\004\060\u041c\001\002\000" +
    "\056\011\042\013\035\014\051\015\101\020\066\023\071" +
    "\024\070\027\102\030\043\064\077\075\075\077\054\100" +
    "\040\110\033\113\073\114\060\115\041\116\012\117\011" +
    "\120\007\121\006\122\005\001\002\000\004\061\u041e\001" +
    "\002\000\066\003\ufec6\004\ufec6\011\ufec6\013\ufec6\014\ufec6" +
    "\015\ufec6\020\ufec6\023\ufec6\024\ufec6\027\ufec6\030\ufec6\033" +
    "\ufec6\061\ufec6\064\ufec6\075\ufec6\077\ufec6\100\ufec6\110\ufec6" +
    "\113\ufec6\114\ufec6\115\ufec6\116\ufec6\117\ufec6\120\ufec6\121" +
    "\ufec6\122\ufec6\001\002\000\004\063\u0420\001\002\000\004" +
    "\064\u0421\001\002\000\006\047\u0219\050\u021b\001\002\000" +
    "\004\055\u0423\001\002\000\004\060\u0424\001\002\000\056" +
    "\011\042\013\035\014\051\015\101\020\066\023\071\024" +
    "\070\027\102\030\043\064\077\075\075\077\054\100\040" +
    "\110\033\113\073\114\060\115\041\116\012\117\011\120" +
    "\007\121\006\122\005\001\002\000\004\061\u0426\001\002" +
    "\000\066\003\ufec9\004\ufec9\011\ufec9\013\ufec9\014\ufec9\015" +
    "\ufec9\020\ufec9\023\ufec9\024\ufec9\027\ufec9\030\ufec9\033\ufec9" +
    "\061\ufec9\064\ufec9\075\ufec9\077\ufec9\100\ufec9\110\ufec9\113" +
    "\ufec9\114\ufec9\115\ufec9\116\ufec9\117\ufec9\120\ufec9\121\ufec9" +
    "\122\ufec9\001\002\000\004\067\u0428\001\002\000\004\063" +
    "\u0429\001\002\000\004\064\u042a\001\002\000\006\047\u0219" +
    "\050\u021b\001\002\000\004\055\u042c\001\002\000\004\060" +
    "\u042d\001\002\000\056\011\042\013\035\014\051\015\101" +
    "\020\066\023\071\024\070\027\102\030\043\064\077\075" +
    "\075\077\054\100\040\110\033\113\073\114\060\115\041" +
    "\116\012\117\011\120\007\121\006\122\005\001\002\000" +
    "\004\061\u042f\001\002\000\066\003\ufeca\004\ufeca\011\ufeca" +
    "\013\ufeca\014\ufeca\015\ufeca\020\ufeca\023\ufeca\024\ufeca\027" +
    "\ufeca\030\ufeca\033\ufeca\061\ufeca\064\ufeca\075\ufeca\077\ufeca" +
    "\100\ufeca\110\ufeca\113\ufeca\114\ufeca\115\ufeca\116\ufeca\117" +
    "\ufeca\120\ufeca\121\ufeca\122\ufeca\001\002\000\016\067\u0431" +
    "\116\012\117\011\120\007\121\006\122\005\001\002\000" +
    "\004\063\u046a\001\002\000\004\063\u0433\001\002\000\016" +
    "\064\u0435\116\012\117\011\120\007\121\006\122\005\001" +
    "\002\000\016\041\113\042\115\043\163\044\114\045\112" +
    "\046\120\001\002\000\016\041\113\042\115\043\163\044" +
    "\114\045\112\046\120\001\002\000\016\067\u0437\116\012" +
    "\117\011\120\007\121\006\122\005\001\002\000\004\063" +
    "\u0440\001\002\000\004\063\u0439\001\002\000\004\064\u043a" +
    "\001\002\000\006\047\u0219\050\u021b\001\002\000\004\055" +
    "\u043c\001\002\000\004\060\u043d\001\002\000\056\011\042" +
    "\013\035\014\051\015\101\020\066\023\071\024\070\027" +
    "\102\030\043\064\077\075\075\077\054\100\040\110\033" +
    "\113\073\114\060\115\041\116\012\117\011\120\007\121" +
    "\006\122\005\001\002\000\004\061\u043f\001\002\000\066" +
    "\003\ufeef\004\ufeef\011\ufeef\013\ufeef\014\ufeef\015\ufeef\020" +
    "\ufeef\023\ufeef\024\ufeef\027\ufeef\030\ufeef\033\ufeef\061\ufeef" +
    "\064\ufeef\075\ufeef\077\ufeef\100\ufeef\110\ufeef\113\ufeef\114" +
    "\ufeef\115\ufeef\116\ufeef\117\ufeef\120\ufeef\121\ufeef\122\ufeef" +
    "\001\002\000\016\064\u0442\116\012\117\011\120\007\121" +
    "\006\122\005\001\002\000\006\047\u0219\050\u021b\001\002" +
    "\000\006\047\u0219\050\u021b\001\002\000\004\055\u0444\001" +
    "\002\000\004\060\u0445\001\002\000\056\011\042\013\035" +
    "\014\051\015\101\020\066\023\071\024\070\027\102\030" +
    "\043\064\077\075\075\077\054\100\040\110\033\113\073" +
    "\114\060\115\041\116\012\117\011\120\007\121\006\122" +
    "\005\001\002\000\004\061\u0447\001\002\000\066\003\uff03" +
    "\004\uff03\011\uff03\013\uff03\014\uff03\015\uff03\020\uff03\023" +
    "\uff03\024\uff03\027\uff03\030\uff03\033\uff03\061\uff03\064\uff03" +
    "\075\uff03\077\uff03\100\uff03\110\uff03\113\uff03\114\uff03\115" +
    "\uff03\116\uff03\117\uff03\120\uff03\121\uff03\122\uff03\001\002" +
    "\000\004\055\u0449\001\002\000\004\060\u044a\001\002\000" +
    "\056\011\042\013\035\014\051\015\101\020\066\023\071" +
    "\024\070\027\102\030\043\064\077\075\075\077\054\100" +
    "\040\110\033\113\073\114\060\115\041\116\012\117\011" +
    "\120\007\121\006\122\005\001\002\000\004\061\u044c\001" +
    "\002\000\066\003\ufeee\004\ufeee\011\ufeee\013\ufeee\014\ufeee" +
    "\015\ufeee\020\ufeee\023\ufeee\024\ufeee\027\ufeee\030\ufeee\033" +
    "\ufeee\061\ufeee\064\ufeee\075\ufeee\077\ufeee\100\ufeee\110\ufeee" +
    "\113\ufeee\114\ufeee\115\ufeee\116\ufeee\117\ufeee\120\ufeee\121" +
    "\ufeee\122\ufeee\001\002\000\016\067\u044e\116\012\117\011" +
    "\120\007\121\006\122\005\001\002\000\004\063\u045d\001" +
    "\002\000\004\063\u0450\001\002\000\016\064\u0452\116\012" +
    "\117\011\120\007\121\006\122\005\001\002\000\006\047" +
    "\u0219\050\u021b\001\002\000\006\047\u0219\050\u021b\001\002" +
    "\000\004\055\u0454\001\002\000\004\060\u0455\001\002\000" +
    "\056\011\042\013\035\014\051\015\101\020\066\023\071" +
    "\024\070\027\102\030\043\064\077\075\075\077\054\100" +
    "\040\110\033\113\073\114\060\115\041\116\012\117\011" +
    "\120\007\121\006\122\005\001\002\000\004\061\u0457\001" +
    "\002\000\066\003\ufee2\004\ufee2\011\ufee2\013\ufee2\014\ufee2" +
    "\015\ufee2\020\ufee2\023\ufee2\024\ufee2\027\ufee2\030\ufee2\033" +
    "\ufee2\061\ufee2\064\ufee2\075\ufee2\077\ufee2\100\ufee2\110\ufee2" +
    "\113\ufee2\114\ufee2\115\ufee2\116\ufee2\117\ufee2\120\ufee2\121" +
    "\ufee2\122\ufee2\001\002\000\004\055\u0459\001\002\000\004" +
    "\060\u045a\001\002\000\056\011\042\013\035\014\051\015" +
    "\101\020\066\023\071\024\070\027\102\030\043\064\077" +
    "\075\075\077\054\100\040\110\033\113\073\114\060\115" +
    "\041\116\012\117\011\120\007\121\006\122\005\001\002" +
    "\000\004\061\u045c\001\002\000\066\003\ufeda\004\ufeda\011" +
    "\ufeda\013\ufeda\014\ufeda\015\ufeda\020\ufeda\023\ufeda\024\ufeda" +
    "\027\ufeda\030\ufeda\033\ufeda\061\ufeda\064\ufeda\075\ufeda\077" +
    "\ufeda\100\ufeda\110\ufeda\113\ufeda\114\ufeda\115\ufeda\116\ufeda" +
    "\117\ufeda\120\ufeda\121\ufeda\122\ufeda\001\002\000\016\064" +
    "\u045f\116\012\117\011\120\007\121\006\122\005\001\002" +
    "\000\006\047\u0219\050\u021b\001\002\000\006\047\u0219\050" +
    "\u021b\001\002\000\004\055\u0461\001\002\000\004\060\u0462" +
    "\001\002\000\056\011\042\013\035\014\051\015\101\020" +
    "\066\023\071\024\070\027\102\030\043\064\077\075\075" +
    "\077\054\100\040\110\033\113\073\114\060\115\041\116" +
    "\012\117\011\120\007\121\006\122\005\001\002\000\004" +
    "\061\u0464\001\002\000\066\003\ufef0\004\ufef0\011\ufef0\013" +
    "\ufef0\014\ufef0\015\ufef0\020\ufef0\023\ufef0\024\ufef0\027\ufef0" +
    "\030\ufef0\033\ufef0\061\ufef0\064\ufef0\075\ufef0\077\ufef0\100" +
    "\ufef0\110\ufef0\113\ufef0\114\ufef0\115\ufef0\116\ufef0\117\ufef0" +
    "\120\ufef0\121\ufef0\122\ufef0\001\002\000\004\055\u0466\001" +
    "\002\000\004\060\u0467\001\002\000\056\011\042\013\035" +
    "\014\051\015\101\020\066\023\071\024\070\027\102\030" +
    "\043\064\077\075\075\077\054\100\040\110\033\113\073" +
    "\114\060\115\041\116\012\117\011\120\007\121\006\122" +
    "\005\001\002\000\004\061\u0469\001\002\000\066\003\ufee1" +
    "\004\ufee1\011\ufee1\013\ufee1\014\ufee1\015\ufee1\020\ufee1\023" +
    "\ufee1\024\ufee1\027\ufee1\030\ufee1\033\ufee1\061\ufee1\064\ufee1" +
    "\075\ufee1\077\ufee1\100\ufee1\110\ufee1\113\ufee1\114\ufee1\115" +
    "\ufee1\116\ufee1\117\ufee1\120\ufee1\121\ufee1\122\ufee1\001\002" +
    "\000\016\064\u046c\116\012\117\011\120\007\121\006\122" +
    "\005\001\002\000\016\041\113\042\115\043\163\044\114" +
    "\045\112\046\120\001\002\000\016\041\113\042\115\043" +
    "\163\044\114\045\112\046\120\001\002\000\016\067\u046e" +
    "\116\012\117\011\120\007\121\006\122\005\001\002\000" +
    "\004\063\u0477\001\002\000\004\063\u0470\001\002\000\004" +
    "\064\u0471\001\002\000\006\047\u0219\050\u021b\001\002\000" +
    "\004\055\u0473\001\002\000\004\060\u0474\001\002\000\056" +
    "\011\042\013\035\014\051\015\101\020\066\023\071\024" +
    "\070\027\102\030\043\064\077\075\075\077\054\100\040" +
    "\110\033\113\073\114\060\115\041\116\012\117\011\120" +
    "\007\121\006\122\005\001\002\000\004\061\u0476\001\002" +
    "\000\066\003\uff01\004\uff01\011\uff01\013\uff01\014\uff01\015" +
    "\uff01\020\uff01\023\uff01\024\uff01\027\uff01\030\uff01\033\uff01" +
    "\061\uff01\064\uff01\075\uff01\077\uff01\100\uff01\110\uff01\113" +
    "\uff01\114\uff01\115\uff01\116\uff01\117\uff01\120\uff01\121\uff01" +
    "\122\uff01\001\002\000\016\064\u0479\116\012\117\011\120" +
    "\007\121\006\122\005\001\002\000\006\047\u0219\050\u021b" +
    "\001\002\000\006\047\u0219\050\u021b\001\002\000\004\055" +
    "\u047b\001\002\000\004\060\u047c\001\002\000\056\011\042" +
    "\013\035\014\051\015\101\020\066\023\071\024\070\027" +
    "\102\030\043\064\077\075\075\077\054\100\040\110\033" +
    "\113\073\114\060\115\041\116\012\117\011\120\007\121" +
    "\006\122\005\001\002\000\004\061\u047e\001\002\000\066" +
    "\003\uff13\004\uff13\011\uff13\013\uff13\014\uff13\015\uff13\020" +
    "\uff13\023\uff13\024\uff13\027\uff13\030\uff13\033\uff13\061\uff13" +
    "\064\uff13\075\uff13\077\uff13\100\uff13\110\uff13\113\uff13\114" +
    "\uff13\115\uff13\116\uff13\117\uff13\120\uff13\121\uff13\122\uff13" +
    "\001\002\000\004\055\u0480\001\002\000\004\060\u0481\001" +
    "\002\000\056\011\042\013\035\014\051\015\101\020\066" +
    "\023\071\024\070\027\102\030\043\064\077\075\075\077" +
    "\054\100\040\110\033\113\073\114\060\115\041\116\012" +
    "\117\011\120\007\121\006\122\005\001\002\000\004\061" +
    "\u0483\001\002\000\066\003\uff00\004\uff00\011\uff00\013\uff00" +
    "\014\uff00\015\uff00\020\uff00\023\uff00\024\uff00\027\uff00\030" +
    "\uff00\033\uff00\061\uff00\064\uff00\075\uff00\077\uff00\100\uff00" +
    "\110\uff00\113\uff00\114\uff00\115\uff00\116\uff00\117\uff00\120" +
    "\uff00\121\uff00\122\uff00\001\002\000\004\067\u0485\001\002" +
    "\000\004\063\u0486\001\002\000\004\064\u0487\001\002\000" +
    "\006\047\u0219\050\u021b\001\002\000\004\055\u0489\001\002" +
    "\000\004\060\u048a\001\002\000\056\011\042\013\035\014" +
    "\051\015\101\020\066\023\071\024\070\027\102\030\043" +
    "\064\077\075\075\077\054\100\040\110\033\113\073\114" +
    "\060\115\041\116\012\117\011\120\007\121\006\122\005" +
    "\001\002\000\004\061\u048c\001\002\000\066\003\uff02\004" +
    "\uff02\011\uff02\013\uff02\014\uff02\015\uff02\020\uff02\023\uff02" +
    "\024\uff02\027\uff02\030\uff02\033\uff02\061\uff02\064\uff02\075" +
    "\uff02\077\uff02\100\uff02\110\uff02\113\uff02\114\uff02\115\uff02" +
    "\116\uff02\117\uff02\120\uff02\121\uff02\122\uff02\001\002\000" +
    "\004\063\u048e\001\002\000\004\064\u048f\001\002\000\016" +
    "\041\113\042\115\043\163\044\114\045\112\046\120\001" +
    "\002\000\004\067\u0491\001\002\000\004\063\u0492\001\002" +
    "\000\004\064\u0493\001\002\000\006\047\u0219\050\u021b\001" +
    "\002\000\004\055\u0495\001\002\000\004\060\u0496\001\002" +
    "\000\056\011\042\013\035\014\051\015\101\020\066\023" +
    "\071\024\070\027\102\030\043\064\077\075\075\077\054" +
    "\100\040\110\033\113\073\114\060\115\041\116\012\117" +
    "\011\120\007\121\006\122\005\001\002\000\004\061\u0498" +
    "\001\002\000\066\003\ufecd\004\ufecd\011\ufecd\013\ufecd\014" +
    "\ufecd\015\ufecd\020\ufecd\023\ufecd\024\ufecd\027\ufecd\030\ufecd" +
    "\033\ufecd\061\ufecd\064\ufecd\075\ufecd\077\ufecd\100\ufecd\110" +
    "\ufecd\113\ufecd\114\ufecd\115\ufecd\116\ufecd\117\ufecd\120\ufecd" +
    "\121\ufecd\122\ufecd\001\002\000\004\067\u049a\001\002\000" +
    "\004\063\u049b\001\002\000\004\064\u049c\001\002\000\016" +
    "\041\113\042\115\043\163\044\114\045\112\046\120\001" +
    "\002\000\004\067\u049e\001\002\000\004\063\u049f\001\002" +
    "\000\004\064\u04a0\001\002\000\006\047\u0219\050\u021b\001" +
    "\002\000\004\055\u04a2\001\002\000\004\060\u04a3\001\002" +
    "\000\056\011\042\013\035\014\051\015\101\020\066\023" +
    "\071\024\070\027\102\030\043\064\077\075\075\077\054" +
    "\100\040\110\033\113\073\114\060\115\041\116\012\117" +
    "\011\120\007\121\006\122\005\001\002\000\004\061\u04a5" +
    "\001\002\000\066\003\ufece\004\ufece\011\ufece\013\ufece\014" +
    "\ufece\015\ufece\020\ufece\023\ufece\024\ufece\027\ufece\030\ufece" +
    "\033\ufece\061\ufece\064\ufece\075\ufece\077\ufece\100\ufece\110" +
    "\ufece\113\ufece\114\ufece\115\ufece\116\ufece\117\ufece\120\ufece" +
    "\121\ufece\122\ufece\001\002\000\004\062\u04e3\001\002\000" +
    "\004\062\u04a8\001\002\000\016\067\u04a9\116\012\117\011" +
    "\120\007\121\006\122\005\001\002\000\004\063\u04c0\001" +
    "\002\000\004\063\u04ab\001\002\000\016\064\u04ad\116\012" +
    "\117\011\120\007\121\006\122\005\001\002\000\016\041" +
    "\113\042\115\043\163\044\114\045\112\046\120\001\002" +
    "\000\016\041\113\042\115\043\163\044\114\045\112\046" +
    "\120\001\002\000\004\067\u04af\001\002\000\004\063\u04b0" +
    "\001\002\000\004\064\u04b1\001\002\000\006\047\u0219\050" +
    "\u021b\001\002\000\004\055\u04b3\001\002\000\004\060\u04b4" +
    "\001\002\000\056\011\042\013\035\014\051\015\101\020" +
    "\066\023\071\024\070\027\102\030\043\064\077\075\075" +
    "\077\054\100\040\110\033\113\073\114\060\115\041\116" +
    "\012\117\011\120\007\121\006\122\005\001\002\000\004" +
    "\061\u04b6\001\002\000\066\003\uff07\004\uff07\011\uff07\013" +
    "\uff07\014\uff07\015\uff07\020\uff07\023\uff07\024\uff07\027\uff07" +
    "\030\uff07\033\uff07\061\uff07\064\uff07\075\uff07\077\uff07\100" +
    "\uff07\110\uff07\113\uff07\114\uff07\115\uff07\116\uff07\117\uff07" +
    "\120\uff07\121\uff07\122\uff07\001\002\000\014\116\012\117" +
    "\011\120\007\121\006\122\005\001\002\000\004\063\u04b9" +
    "\001\002\000\014\116\012\117\011\120\007\121\006\122" +
    "\005\001\002\000\006\047\u0219\050\u021b\001\002\000\004" +
    "\055\u04bc\001\002\000\004\060\u04bd\001\002\000\056\011" +
    "\042\013\035\014\051\015\101\020\066\023\071\024\070" +
    "\027\102\030\043\064\077\075\075\077\054\100\040\110" +
    "\033\113\073\114\060\115\041\116\012\117\011\120\007" +
    "\121\006\122\005\001\002\000\004\061\u04bf\001\002\000" +
    "\066\003\ufed6\004\ufed6\011\ufed6\013\ufed6\014\ufed6\015\ufed6" +
    "\020\ufed6\023\ufed6\024\ufed6\027\ufed6\030\ufed6\033\ufed6\061" +
    "\ufed6\064\ufed6\075\ufed6\077\ufed6\100\ufed6\110\ufed6\113\ufed6" +
    "\114\ufed6\115\ufed6\116\ufed6\117\ufed6\120\ufed6\121\ufed6\122" +
    "\ufed6\001\002\000\016\064\u04c2\116\012\117\011\120\007" +
    "\121\006\122\005\001\002\000\016\041\113\042\115\043" +
    "\163\044\114\045\112\046\120\001\002\000\016\041\113" +
    "\042\115\043\163\044\114\045\112\046\120\001\002\000" +
    "\016\067\u04c4\116\012\117\011\120\007\121\006\122\005" +
    "\001\002\000\004\063\u04cd\001\002\000\004\063\u04c6\001" +
    "\002\000\004\064\u04c7\001\002\000\006\047\u0219\050\u021b" +
    "\001\002\000\004\055\u04c9\001\002\000\004\060\u04ca\001" +
    "\002\000\056\011\042\013\035\014\051\015\101\020\066" +
    "\023\071\024\070\027\102\030\043\064\077\075\075\077" +
    "\054\100\040\110\033\113\073\114\060\115\041\116\012" +
    "\117\011\120\007\121\006\122\005\001\002\000\004\061" +
    "\u04cc\001\002\000\066\003\uff05\004\uff05\011\uff05\013\uff05" +
    "\014\uff05\015\uff05\020\uff05\023\uff05\024\uff05\027\uff05\030" +
    "\uff05\033\uff05\061\uff05\064\uff05\075\uff05\077\uff05\100\uff05" +
    "\110\uff05\113\uff05\114\uff05\115\uff05\116\uff05\117\uff05\120" +
    "\uff05\121\uff05\122\uff05\001\002\000\016\064\u04cf\116\012" +
    "\117\011\120\007\121\006\122\005\001\002\000\006\047" +
    "\u0219\050\u021b\001\002\000\006\047\u0219\050\u021b\001\002" +
    "\000\004\055\u04d1\001\002\000\004\060\u04d2\001\002\000" +
    "\056\011\042\013\035\014\051\015\101\020\066\023\071" +
    "\024\070\027\102\030\043\064\077\075\075\077\054\100" +
    "\040\110\033\113\073\114\060\115\041\116\012\117\011" +
    "\120\007\121\006\122\005\001\002\000\004\061\u04d4\001" +
    "\002\000\066\003\uff14\004\uff14\011\uff14\013\uff14\014\uff14" +
    "\015\uff14\020\uff14\023\uff14\024\uff14\027\uff14\030\uff14\033" +
    "\uff14\061\uff14\064\uff14\075\uff14\077\uff14\100\uff14\110\uff14" +
    "\113\uff14\114\uff14\115\uff14\116\uff14\117\uff14\120\uff14\121" +
    "\uff14\122\uff14\001\002\000\004\055\u04d6\001\002\000\004" +
    "\060\u04d7\001\002\000\056\011\042\013\035\014\051\015" +
    "\101\020\066\023\071\024\070\027\102\030\043\064\077" +
    "\075\075\077\054\100\040\110\033\113\073\114\060\115" +
    "\041\116\012\117\011\120\007\121\006\122\005\001\002" +
    "\000\004\061\u04d9\001\002\000\066\003\uff04\004\uff04\011" +
    "\uff04\013\uff04\014\uff04\015\uff04\020\uff04\023\uff04\024\uff04" +
    "\027\uff04\030\uff04\033\uff04\061\uff04\064\uff04\075\uff04\077" +
    "\uff04\100\uff04\110\uff04\113\uff04\114\uff04\115\uff04\116\uff04" +
    "\117\uff04\120\uff04\121\uff04\122\uff04\001\002\000\004\067" +
    "\u04db\001\002\000\004\063\u04dc\001\002\000\004\064\u04dd" +
    "\001\002\000\006\047\u0219\050\u021b\001\002\000\004\055" +
    "\u04df\001\002\000\004\060\u04e0\001\002\000\056\011\042" +
    "\013\035\014\051\015\101\020\066\023\071\024\070\027" +
    "\102\030\043\064\077\075\075\077\054\100\040\110\033" +
    "\113\073\114\060\115\041\116\012\117\011\120\007\121" +
    "\006\122\005\001\002\000\004\061\u04e2\001\002\000\066" +
    "\003\uff06\004\uff06\011\uff06\013\uff06\014\uff06\015\uff06\020" +
    "\uff06\023\uff06\024\uff06\027\uff06\030\uff06\033\uff06\061\uff06" +
    "\064\uff06\075\uff06\077\uff06\100\uff06\110\uff06\113\uff06\114" +
    "\uff06\115\uff06\116\uff06\117\uff06\120\uff06\121\uff06\122\uff06" +
    "\001\002\000\016\067\u04e4\116\012\117\011\120\007\121" +
    "\006\122\005\001\002\000\004\063\u051d\001\002\000\004" +
    "\063\u04e6\001\002\000\016\064\u04e8\116\012\117\011\120" +
    "\007\121\006\122\005\001\002\000\016\041\113\042\115" +
    "\043\163\044\114\045\112\046\120\001\002\000\016\041" +
    "\113\042\115\043\163\044\114\045\112\046\120\001\002" +
    "\000\016\067\u04ea\116\012\117\011\120\007\121\006\122" +
    "\005\001\002\000\004\063\u04f3\001\002\000\004\063\u04ec" +
    "\001\002\000\004\064\u04ed\001\002\000\006\047\u0219\050" +
    "\u021b\001\002\000\004\055\u04ef\001\002\000\004\060\u04f0" +
    "\001\002\000\056\011\042\013\035\014\051\015\101\020" +
    "\066\023\071\024\070\027\102\030\043\064\077\075\075" +
    "\077\054\100\040\110\033\113\073\114\060\115\041\116" +
    "\012\117\011\120\007\121\006\122\005\001\002\000\004" +
    "\061\u04f2\001\002\000\066\003\ufee5\004\ufee5\011\ufee5\013" +
    "\ufee5\014\ufee5\015\ufee5\020\ufee5\023\ufee5\024\ufee5\027\ufee5" +
    "\030\ufee5\033\ufee5\061\ufee5\064\ufee5\075\ufee5\077\ufee5\100" +
    "\ufee5\110\ufee5\113\ufee5\114\ufee5\115\ufee5\116\ufee5\117\ufee5" +
    "\120\ufee5\121\ufee5\122\ufee5\001\002\000\016\064\u04f5\116" +
    "\012\117\011\120\007\121\006\122\005\001\002\000\006" +
    "\047\u0219\050\u021b\001\002\000\006\047\u0219\050\u021b\001" +
    "\002\000\004\055\u04f7\001\002\000\004\060\u04f8\001\002" +
    "\000\056\011\042\013\035\014\051\015\101\020\066\023" +
    "\071\024\070\027\102\030\043\064\077\075\075\077\054" +
    "\100\040\110\033\113\073\114\060\115\041\116\012\117" +
    "\011\120\007\121\006\122\005\001\002\000\004\061\u04fa" +
    "\001\002\000\066\003\ufef4\004\ufef4\011\ufef4\013\ufef4\014" +
    "\ufef4\015\ufef4\020\ufef4\023\ufef4\024\ufef4\027\ufef4\030\ufef4" +
    "\033\ufef4\061\ufef4\064\ufef4\075\ufef4\077\ufef4\100\ufef4\110" +
    "\ufef4\113\ufef4\114\ufef4\115\ufef4\116\ufef4\117\ufef4\120\ufef4" +
    "\121\ufef4\122\ufef4\001\002\000\004\055\u04fc\001\002\000" +
    "\004\060\u04fd\001\002\000\056\011\042\013\035\014\051" +
    "\015\101\020\066\023\071\024\070\027\102\030\043\064" +
    "\077\075\075\077\054\100\040\110\033\113\073\114\060" +
    "\115\041\116\012\117\011\120\007\121\006\122\005\001" +
    "\002\000\004\061\u04ff\001\002\000\066\003\ufee4\004\ufee4" +
    "\011\ufee4\013\ufee4\014\ufee4\015\ufee4\020\ufee4\023\ufee4\024" +
    "\ufee4\027\ufee4\030\ufee4\033\ufee4\061\ufee4\064\ufee4\075\ufee4" +
    "\077\ufee4\100\ufee4\110\ufee4\113\ufee4\114\ufee4\115\ufee4\116" +
    "\ufee4\117\ufee4\120\ufee4\121\ufee4\122\ufee4\001\002\000\016" +
    "\067\u0501\116\012\117\011\120\007\121\006\122\005\001" +
    "\002\000\004\063\u0510\001\002\000\004\063\u0503\001\002" +
    "\000\016\064\u0505\116\012\117\011\120\007\121\006\122" +
    "\005\001\002\000\006\047\u0219\050\u021b\001\002\000\006" +
    "\047\u0219\050\u021b\001\002\000\004\055\u0507\001\002\000" +
    "\004\060\u0508\001\002\000\056\011\042\013\035\014\051" +
    "\015\101\020\066\023\071\024\070\027\102\030\043\064" +
    "\077\075\075\077\054\100\040\110\033\113\073\114\060" +
    "\115\041\116\012\117\011\120\007\121\006\122\005\001" +
    "\002\000\004\061\u050a\001\002\000\066\003\ufedc\004\ufedc" +
    "\011\ufedc\013\ufedc\014\ufedc\015\ufedc\020\ufedc\023\ufedc\024" +
    "\ufedc\027\ufedc\030\ufedc\033\ufedc\061\ufedc\064\ufedc\075\ufedc" +
    "\077\ufedc\100\ufedc\110\ufedc\113\ufedc\114\ufedc\115\ufedc\116" +
    "\ufedc\117\ufedc\120\ufedc\121\ufedc\122\ufedc\001\002\000\004" +
    "\055\u050c\001\002\000\004\060\u050d\001\002\000\056\011" +
    "\042\013\035\014\051\015\101\020\066\023\071\024\070" +
    "\027\102\030\043\064\077\075\075\077\054\100\040\110" +
    "\033\113\073\114\060\115\041\116\012\117\011\120\007" +
    "\121\006\122\005\001\002\000\004\061\u050f\001\002\000" +
    "\066\003\ufed1\004\ufed1\011\ufed1\013\ufed1\014\ufed1\015\ufed1" +
    "\020\ufed1\023\ufed1\024\ufed1\027\ufed1\030\ufed1\033\ufed1\061" +
    "\ufed1\064\ufed1\075\ufed1\077\ufed1\100\ufed1\110\ufed1\113\ufed1" +
    "\114\ufed1\115\ufed1\116\ufed1\117\ufed1\120\ufed1\121\ufed1\122" +
    "\ufed1\001\002\000\016\064\u0512\116\012\117\011\120\007" +
    "\121\006\122\005\001\002\000\006\047\u0219\050\u021b\001" +
    "\002\000\006\047\u0219\050\u021b\001\002\000\004\055\u0514" +
    "\001\002\000\004\060\u0515\001\002\000\056\011\042\013" +
    "\035\014\051\015\101\020\066\023\071\024\070\027\102" +
    "\030\043\064\077\075\075\077\054\100\040\110\033\113" +
    "\073\114\060\115\041\116\012\117\011\120\007\121\006" +
    "\122\005\001\002\000\004\061\u0517\001\002\000\066\003" +
    "\ufee6\004\ufee6\011\ufee6\013\ufee6\014\ufee6\015\ufee6\020\ufee6" +
    "\023\ufee6\024\ufee6\027\ufee6\030\ufee6\033\ufee6\061\ufee6\064" +
    "\ufee6\075\ufee6\077\ufee6\100\ufee6\110\ufee6\113\ufee6\114\ufee6" +
    "\115\ufee6\116\ufee6\117\ufee6\120\ufee6\121\ufee6\122\ufee6\001" +
    "\002\000\004\055\u0519\001\002\000\004\060\u051a\001\002" +
    "\000\056\011\042\013\035\014\051\015\101\020\066\023" +
    "\071\024\070\027\102\030\043\064\077\075\075\077\054" +
    "\100\040\110\033\113\073\114\060\115\041\116\012\117" +
    "\011\120\007\121\006\122\005\001\002\000\004\061\u051c" +
    "\001\002\000\066\003\ufedb\004\ufedb\011\ufedb\013\ufedb\014" +
    "\ufedb\015\ufedb\020\ufedb\023\ufedb\024\ufedb\027\ufedb\030\ufedb" +
    "\033\ufedb\061\ufedb\064\ufedb\075\ufedb\077\ufedb\100\ufedb\110" +
    "\ufedb\113\ufedb\114\ufedb\115\ufedb\116\ufedb\117\ufedb\120\ufedb" +
    "\121\ufedb\122\ufedb\001\002\000\016\064\u051f\116\012\117" +
    "\011\120\007\121\006\122\005\001\002\000\016\041\113" +
    "\042\115\043\163\044\114\045\112\046\120\001\002\000" +
    "\016\041\113\042\115\043\163\044\114\045\112\046\120" +
    "\001\002\000\016\067\u0521\116\012\117\011\120\007\121" +
    "\006\122\005\001\002\000\004\063\u052a\001\002\000\004" +
    "\063\u0523\001\002\000\004\064\u0524\001\002\000\006\047" +
    "\u0219\050\u021b\001\002\000\004\055\u0526\001\002\000\004" +
    "\060\u0527\001\002\000\056\011\042\013\035\014\051\015" +
    "\101\020\066\023\071\024\070\027\102\030\043\064\077" +
    "\075\075\077\054\100\040\110\033\113\073\114\060\115" +
    "\041\116\012\117\011\120\007\121\006\122\005\001\002" +
    "\000\004\061\u0529\001\002\000\066\003\ufef2\004\ufef2\011" +
    "\ufef2\013\ufef2\014\ufef2\015\ufef2\020\ufef2\023\ufef2\024\ufef2" +
    "\027\ufef2\030\ufef2\033\ufef2\061\ufef2\064\ufef2\075\ufef2\077" +
    "\ufef2\100\ufef2\110\ufef2\113\ufef2\114\ufef2\115\ufef2\116\ufef2" +
    "\117\ufef2\120\ufef2\121\ufef2\122\ufef2\001\002\000\016\064" +
    "\u052c\116\012\117\011\120\007\121\006\122\005\001\002" +
    "\000\006\047\u0219\050\u021b\001\002\000\006\047\u0219\050" +
    "\u021b\001\002\000\004\055\u052e\001\002\000\004\060\u052f" +
    "\001\002\000\056\011\042\013\035\014\051\015\101\020" +
    "\066\023\071\024\070\027\102\030\043\064\077\075\075" +
    "\077\054\100\040\110\033\113\073\114\060\115\041\116" +
    "\012\117\011\120\007\121\006\122\005\001\002\000\004" +
    "\061\u0531\001\002\000\066\003\uff08\004\uff08\011\uff08\013" +
    "\uff08\014\uff08\015\uff08\020\uff08\023\uff08\024\uff08\027\uff08" +
    "\030\uff08\033\uff08\061\uff08\064\uff08\075\uff08\077\uff08\100" +
    "\uff08\110\uff08\113\uff08\114\uff08\115\uff08\116\uff08\117\uff08" +
    "\120\uff08\121\uff08\122\uff08\001\002\000\004\055\u0533\001" +
    "\002\000\004\060\u0534\001\002\000\056\011\042\013\035" +
    "\014\051\015\101\020\066\023\071\024\070\027\102\030" +
    "\043\064\077\075\075\077\054\100\040\110\033\113\073" +
    "\114\060\115\041\116\012\117\011\120\007\121\006\122" +
    "\005\001\002\000\004\061\u0536\001\002\000\066\003\ufef1" +
    "\004\ufef1\011\ufef1\013\ufef1\014\ufef1\015\ufef1\020\ufef1\023" +
    "\ufef1\024\ufef1\027\ufef1\030\ufef1\033\ufef1\061\ufef1\064\ufef1" +
    "\075\ufef1\077\ufef1\100\ufef1\110\ufef1\113\ufef1\114\ufef1\115" +
    "\ufef1\116\ufef1\117\ufef1\120\ufef1\121\ufef1\122\ufef1\001\002" +
    "\000\004\067\u0538\001\002\000\004\063\u0539\001\002\000" +
    "\004\064\u053a\001\002\000\006\047\u0219\050\u021b\001\002" +
    "\000\004\055\u053c\001\002\000\004\060\u053d\001\002\000" +
    "\056\011\042\013\035\014\051\015\101\020\066\023\071" +
    "\024\070\027\102\030\043\064\077\075\075\077\054\100" +
    "\040\110\033\113\073\114\060\115\041\116\012\117\011" +
    "\120\007\121\006\122\005\001\002\000\004\061\u053f\001" +
    "\002\000\066\003\ufef3\004\ufef3\011\ufef3\013\ufef3\014\ufef3" +
    "\015\ufef3\020\ufef3\023\ufef3\024\ufef3\027\ufef3\030\ufef3\033" +
    "\ufef3\061\ufef3\064\ufef3\075\ufef3\077\ufef3\100\ufef3\110\ufef3" +
    "\113\ufef3\114\ufef3\115\ufef3\116\ufef3\117\ufef3\120\ufef3\121" +
    "\ufef3\122\ufef3\001\002\000\012\003\uffe5\004\uffe5\033\uffe5" +
    "\061\uffe5\001\002\000\012\003\uffed\004\uffed\033\uffed\061" +
    "\uffed\001\002\000\012\003\uffef\004\uffef\033\uffef\061\uffef" +
    "\001\002\000\022\003\ufe28\006\ufe28\061\ufe28\116\ufe28\117" +
    "\ufe28\120\ufe28\121\ufe28\122\ufe28\001\002\000\012\003\uffdd" +
    "\004\uffdd\033\uffdd\061\uffdd\001\002\000\004\064\u05a4\001" +
    "\002\000\006\057\u0582\064\u0583\001\002\000\004\064\u057d" +
    "\001\002\000\004\065\u057b\001\002\000\004\064\u0576\001" +
    "\002\000\066\003\uff9f\004\uff9f\011\uff9f\013\uff9f\014\uff9f" +
    "\015\uff9f\020\uff9f\023\uff9f\024\uff9f\027\uff9f\030\uff9f\033" +
    "\uff9f\061\uff9f\064\uff9f\075\uff9f\077\uff9f\100\uff9f\110\uff9f" +
    "\113\uff9f\114\uff9f\115\uff9f\116\uff9f\117\uff9f\120\uff9f\121" +
    "\uff9f\122\uff9f\001\002\000\074\003\uff9e\004\uff9e\011\uff9e" +
    "\013\uff9e\014\uff9e\015\uff9e\020\uff9e\023\uff9e\024\uff9e\027" +
    "\uff9e\030\uff9e\033\uff9e\061\uff9e\062\u055f\063\u0561\064\uff9e" +
    "\065\u0560\075\uff9e\077\uff9e\100\uff9e\110\uff9e\113\uff9e\114" +
    "\uff9e\115\uff9e\116\uff9e\117\uff9e\120\uff9e\121\uff9e\122\uff9e" +
    "\001\002\000\004\064\u055a\001\002\000\004\064\u0555\001" +
    "\002\000\006\062\u054f\063\u0550\001\002\000\016\065\u0551" +
    "\116\012\117\011\120\007\121\006\122\005\001\002\000" +
    "\066\003\uffa0\004\uffa0\011\uffa0\013\uffa0\014\uffa0\015\uffa0" +
    "\020\uffa0\023\uffa0\024\uffa0\027\uffa0\030\uffa0\033\uffa0\061" +
    "\uffa0\064\uffa0\075\uffa0\077\uffa0\100\uffa0\110\uffa0\113\uffa0" +
    "\114\uffa0\115\uffa0\116\uffa0\117\uffa0\120\uffa0\121\uffa0\122" +
    "\uffa0\001\002\000\004\063\u0554\001\002\000\004\063\u0553" +
    "\001\002\000\066\003\uffac\004\uffac\011\uffac\013\uffac\014" +
    "\uffac\015\uffac\020\uffac\023\uffac\024\uffac\027\uffac\030\uffac" +
    "\033\uffac\061\uffac\064\uffac\075\uffac\077\uffac\100\uffac\110" +
    "\uffac\113\uffac\114\uffac\115\uffac\116\uffac\117\uffac\120\uffac" +
    "\121\uffac\122\uffac\001\002\000\066\003\uffaf\004\uffaf\011" +
    "\uffaf\013\uffaf\014\uffaf\015\uffaf\020\uffaf\023\uffaf\024\uffaf" +
    "\027\uffaf\030\uffaf\033\uffaf\061\uffaf\064\uffaf\075\uffaf\077" +
    "\uffaf\100\uffaf\110\uffaf\113\uffaf\114\uffaf\115\uffaf\116\uffaf" +
    "\117\uffaf\120\uffaf\121\uffaf\122\uffaf\001\002\000\006\062" +
    "\u0556\063\u0557\001\002\000\004\067\u0558\001\002\000\066" +
    "\003\uff62\004\uff62\011\uff62\013\uff62\014\uff62\015\uff62\020" +
    "\uff62\023\uff62\024\uff62\027\uff62\030\uff62\033\uff62\061\uff62" +
    "\064\uff62\075\uff62\077\uff62\100\uff62\110\uff62\113\uff62\114" +
    "\uff62\115\uff62\116\uff62\117\uff62\120\uff62\121\uff62\122\uff62" +
    "\001\002\000\004\063\u0559\001\002\000\066\003\uff72\004" +
    "\uff72\011\uff72\013\uff72\014\uff72\015\uff72\020\uff72\023\uff72" +
    "\024\uff72\027\uff72\030\uff72\033\uff72\061\uff72\064\uff72\075" +
    "\uff72\077\uff72\100\uff72\110\uff72\113\uff72\114\uff72\115\uff72" +
    "\116\uff72\117\uff72\120\uff72\121\uff72\122\uff72\001\002\000" +
    "\006\062\u055b\063\u055c\001\002\000\004\067\u055d\001\002" +
    "\000\066\003\uff60\004\uff60\011\uff60\013\uff60\014\uff60\015" +
    "\uff60\020\uff60\023\uff60\024\uff60\027\uff60\030\uff60\033\uff60" +
    "\061\uff60\064\uff60\075\uff60\077\uff60\100\uff60\110\uff60\113" +
    "\uff60\114\uff60\115\uff60\116\uff60\117\uff60\120\uff60\121\uff60" +
    "\122\uff60\001\002\000\004\063\u055e\001\002\000\066\003" +
    "\uff70\004\uff70\011\uff70\013\uff70\014\uff70\015\uff70\020\uff70" +
    "\023\uff70\024\uff70\027\uff70\030\uff70\033\uff70\061\uff70\064" +
    "\uff70\075\uff70\077\uff70\100\uff70\110\uff70\113\uff70\114\uff70" +
    "\115\uff70\116\uff70\117\uff70\120\uff70\121\uff70\122\uff70\001" +
    "\002\000\034\031\u0565\032\u0563\063\u0568\064\u0569\065\u0567" +
    "\066\u056a\067\u0564\070\u0566\116\012\117\011\120\007\121" +
    "\006\122\005\001\002\000\004\063\u0562\001\002\000\066" +
    "\003\uffa1\004\uffa1\011\uffa1\013\uffa1\014\uffa1\015\uffa1\020" +
    "\uffa1\023\uffa1\024\uffa1\027\uffa1\030\uffa1\033\uffa1\061\uffa1" +
    "\064\uffa1\075\uffa1\077\uffa1\100\uffa1\110\uffa1\113\uffa1\114" +
    "\uffa1\115\uffa1\116\uffa1\117\uffa1\120\uffa1\121\uffa1\122\uffa1" +
    "\001\002\000\066\003\uffaa\004\uffaa\011\uffaa\013\uffaa\014" +
    "\uffaa\015\uffaa\020\uffaa\023\uffaa\024\uffaa\027\uffaa\030\uffaa" +
    "\033\uffaa\061\uffaa\064\uffaa\075\uffaa\077\uffaa\100\uffaa\110" +
    "\uffaa\113\uffaa\114\uffaa\115\uffaa\116\uffaa\117\uffaa\120\uffaa" +
    "\121\uffaa\122\uffaa\001\002\000\004\063\u0575\001\002\000" +
    "\004\063\u0574\001\002\000\004\063\u0573\001\002\000\004" +
    "\064\u0571\001\002\000\070\003\uffa6\004\uffa6\011\uffa6\013" +
    "\uffa6\014\uffa6\015\uffa6\020\uffa6\023\uffa6\024\uffa6\027\uffa6" +
    "\030\uffa6\033\uffa6\061\uffa6\063\u0570\064\uffa6\075\uffa6\077" +
    "\uffa6\100\uffa6\110\uffa6\113\uffa6\114\uffa6\115\uffa6\116\uffa6" +
    "\117\uffa6\120\uffa6\121\uffa6\122\uffa6\001\002\000\066\003" +
    "\uffa9\004\uffa9\011\uffa9\013\uffa9\014\uffa9\015\uffa9\020\uffa9" +
    "\023\uffa9\024\uffa9\027\uffa9\030\uffa9\033\uffa9\061\uffa9\064" +
    "\uffa9\075\uffa9\077\uffa9\100\uffa9\110\uffa9\113\uffa9\114\uffa9" +
    "\115\uffa9\116\uffa9\117\uffa9\120\uffa9\121\uffa9\122\uffa9\001" +
    "\002\000\004\070\u056e\001\002\000\004\063\u056d\001\002" +
    "\000\004\063\u056c\001\002\000\066\003\uffae\004\uffae\011" +
    "\uffae\013\uffae\014\uffae\015\uffae\020\uffae\023\uffae\024\uffae" +
    "\027\uffae\030\uffae\033\uffae\061\uffae\064\uffae\075\uffae\077" +
    "\uffae\100\uffae\110\uffae\113\uffae\114\uffae\115\uffae\116\uffae" +
    "\117\uffae\120\uffae\121\uffae\122\uffae\001\002\000\066\003" +
    "\uffa5\004\uffa5\011\uffa5\013\uffa5\014\uffa5\015\uffa5\020\uffa5" +
    "\023\uffa5\024\uffa5\027\uffa5\030\uffa5\033\uffa5\061\uffa5\064" +
    "\uffa5\075\uffa5\077\uffa5\100\uffa5\110\uffa5\113\uffa5\114\uffa5" +
    "\115\uffa5\116\uffa5\117\uffa5\120\uffa5\121\uffa5\122\uffa5\001" +
    "\002\000\004\063\u056f\001\002\000\066\003\uffa7\004\uffa7" +
    "\011\uffa7\013\uffa7\014\uffa7\015\uffa7\020\uffa7\023\uffa7\024" +
    "\uffa7\027\uffa7\030\uffa7\033\uffa7\061\uffa7\064\uffa7\075\uffa7" +
    "\077\uffa7\100\uffa7\110\uffa7\113\uffa7\114\uffa7\115\uffa7\116" +
    "\uffa7\117\uffa7\120\uffa7\121\uffa7\122\uffa7\001\002\000\066" +
    "\003\uffb1\004\uffb1\011\uffb1\013\uffb1\014\uffb1\015\uffb1\020" +
    "\uffb1\023\uffb1\024\uffb1\027\uffb1\030\uffb1\033\uffb1\061\uffb1" +
    "\064\uffb1\075\uffb1\077\uffb1\100\uffb1\110\uffb1\113\uffb1\114" +
    "\uffb1\115\uffb1\116\uffb1\117\uffb1\120\uffb1\121\uffb1\122\uffb1" +
    "\001\002\000\004\063\u0572\001\002\000\066\003\uffa8\004" +
    "\uffa8\011\uffa8\013\uffa8\014\uffa8\015\uffa8\020\uffa8\023\uffa8" +
    "\024\uffa8\027\uffa8\030\uffa8\033\uffa8\061\uffa8\064\uffa8\075" +
    "\uffa8\077\uffa8\100\uffa8\110\uffa8\113\uffa8\114\uffa8\115\uffa8" +
    "\116\uffa8\117\uffa8\120\uffa8\121\uffa8\122\uffa8\001\002\000" +
    "\066\003\uffa3\004\uffa3\011\uffa3\013\uffa3\014\uffa3\015\uffa3" +
    "\020\uffa3\023\uffa3\024\uffa3\027\uffa3\030\uffa3\033\uffa3\061" +
    "\uffa3\064\uffa3\075\uffa3\077\uffa3\100\uffa3\110\uffa3\113\uffa3" +
    "\114\uffa3\115\uffa3\116\uffa3\117\uffa3\120\uffa3\121\uffa3\122" +
    "\uffa3\001\002\000\066\003\uffa4\004\uffa4\011\uffa4\013\uffa4" +
    "\014\uffa4\015\uffa4\020\uffa4\023\uffa4\024\uffa4\027\uffa4\030" +
    "\uffa4\033\uffa4\061\uffa4\064\uffa4\075\uffa4\077\uffa4\100\uffa4" +
    "\110\uffa4\113\uffa4\114\uffa4\115\uffa4\116\uffa4\117\uffa4\120" +
    "\uffa4\121\uffa4\122\uffa4\001\002\000\066\003\uffa2\004\uffa2" +
    "\011\uffa2\013\uffa2\014\uffa2\015\uffa2\020\uffa2\023\uffa2\024" +
    "\uffa2\027\uffa2\030\uffa2\033\uffa2\061\uffa2\064\uffa2\075\uffa2" +
    "\077\uffa2\100\uffa2\110\uffa2\113\uffa2\114\uffa2\115\uffa2\116" +
    "\uffa2\117\uffa2\120\uffa2\121\uffa2\122\uffa2\001\002\000\006" +
    "\062\u0577\063\u0578\001\002\000\004\067\u0579\001\002\000" +
    "\066\003\uff5f\004\uff5f\011\uff5f\013\uff5f\014\uff5f\015\uff5f" +
    "\020\uff5f\023\uff5f\024\uff5f\027\uff5f\030\uff5f\033\uff5f\061" +
    "\uff5f\064\uff5f\075\uff5f\077\uff5f\100\uff5f\110\uff5f\113\uff5f" +
    "\114\uff5f\115\uff5f\116\uff5f\117\uff5f\120\uff5f\121\uff5f\122" +
    "\uff5f\001\002\000\004\063\u057a\001\002\000\066\003\uff6f" +
    "\004\uff6f\011\uff6f\013\uff6f\014\uff6f\015\uff6f\020\uff6f\023" +
    "\uff6f\024\uff6f\027\uff6f\030\uff6f\033\uff6f\061\uff6f\064\uff6f" +
    "\075\uff6f\077\uff6f\100\uff6f\110\uff6f\113\uff6f\114\uff6f\115" +
    "\uff6f\116\uff6f\117\uff6f\120\uff6f\121\uff6f\122\uff6f\001\002" +
    "\000\004\063\u057c\001\002\000\066\003\uffab\004\uffab\011" +
    "\uffab\013\uffab\014\uffab\015\uffab\020\uffab\023\uffab\024\uffab" +
    "\027\uffab\030\uffab\033\uffab\061\uffab\064\uffab\075\uffab\077" +
    "\uffab\100\uffab\110\uffab\113\uffab\114\uffab\115\uffab\116\uffab" +
    "\117\uffab\120\uffab\121\uffab\122\uffab\001\002\000\006\062" +
    "\u057e\063\u057f\001\002\000\004\067\u0580\001\002\000\066" +
    "\003\uff61\004\uff61\011\uff61\013\uff61\014\uff61\015\uff61\020" +
    "\uff61\023\uff61\024\uff61\027\uff61\030\uff61\033\uff61\061\uff61" +
    "\064\uff61\075\uff61\077\uff61\100\uff61\110\uff61\113\uff61\114" +
    "\uff61\115\uff61\116\uff61\117\uff61\120\uff61\121\uff61\122\uff61" +
    "\001\002\000\004\063\u0581\001\002\000\066\003\uff71\004" +
    "\uff71\011\uff71\013\uff71\014\uff71\015\uff71\020\uff71\023\uff71" +
    "\024\uff71\027\uff71\030\uff71\033\uff71\061\uff71\064\uff71\075" +
    "\uff71\077\uff71\100\uff71\110\uff71\113\uff71\114\uff71\115\uff71" +
    "\116\uff71\117\uff71\120\uff71\121\uff71\122\uff71\001\002\000" +
    "\006\062\u058f\064\u0590\001\002\000\004\062\u0584\001\002" +
    "\000\004\060\u0585\001\002\000\016\065\u0587\116\012\117" +
    "\011\120\007\121\006\122\005\001\002\000\004\061\u058d" +
    "\001\002\000\010\061\ufe45\063\ufe45\072\u058b\001\002\000" +
    "\010\061\ufe44\063\ufe44\072\u0589\001\002\000\016\065\u0587" +
    "\116\012\117\011\120\007\121\006\122\005\001\002\000" +
    "\006\061\ufe42\063\ufe42\001\002\000\022\061\ufe41\063\ufe41" +
    "\065\u0587\116\012\117\011\120\007\121\006\122\005\001" +
    "\002\000\006\061\ufe43\063\ufe43\001\002\000\004\063\u058e" +
    "\001\002\000\066\003\ufe59\004\ufe59\011\ufe59\013\ufe59\014" +
    "\ufe59\015\ufe59\020\ufe59\023\ufe59\024\ufe59\027\ufe59\030\ufe59" +
    "\033\ufe59\061\ufe59\064\ufe59\075\ufe59\077\ufe59\100\ufe59\110" +
    "\ufe59\113\ufe59\114\ufe59\115\ufe59\116\ufe59\117\ufe59\120\ufe59" +
    "\121\ufe59\122\ufe59\001\002\000\004\060\u05a0\001\002\000" +
    "\006\060\u0591\062\u0592\001\002\000\016\065\u0587\116\012" +
    "\117\011\120\007\121\006\122\005\001\002\000\020\060" +
    "\u0594\065\u0587\116\012\117\011\120\007\121\006\122\005" +
    "\001\002\000\004\061\u059b\001\002\000\020\061\u0596\065" +
    "\u0587\116\012\117\011\120\007\121\006\122\005\001\002" +
    "\000\006\061\u0599\063\u0598\001\002\000\004\063\u0597\001" +
    "\002\000\066\003\ufe5d\004\ufe5d\011\ufe5d\013\ufe5d\014\ufe5d" +
    "\015\ufe5d\020\ufe5d\023\ufe5d\024\ufe5d\027\ufe5d\030\ufe5d\033" +
    "\ufe5d\061\ufe5d\064\ufe5d\075\ufe5d\077\ufe5d\100\ufe5d\110\ufe5d" +
    "\113\ufe5d\114\ufe5d\115\ufe5d\116\ufe5d\117\ufe5d\120\ufe5d\121" +
    "\ufe5d\122\ufe5d\001\002\000\066\003\ufe5e\004\ufe5e\011\ufe5e" +
    "\013\ufe5e\014\ufe5e\015\ufe5e\020\ufe5e\023\ufe5e\024\ufe5e\027" +
    "\ufe5e\030\ufe5e\033\ufe5e\061\ufe5e\064\ufe5e\075\ufe5e\077\ufe5e" +
    "\100\ufe5e\110\ufe5e\113\ufe5e\114\ufe5e\115\ufe5e\116\ufe5e\117" +
    "\ufe5e\120\ufe5e\121\ufe5e\122\ufe5e\001\002\000\070\003\ufe5f" +
    "\004\ufe5f\011\ufe5f\013\ufe5f\014\ufe5f\015\ufe5f\020\ufe5f\023" +
    "\ufe5f\024\ufe5f\027\ufe5f\030\ufe5f\033\ufe5f\061\ufe5f\063\u059a" +
    "\064\ufe5f\075\ufe5f\077\ufe5f\100\ufe5f\110\ufe5f\113\ufe5f\114" +
    "\ufe5f\115\ufe5f\116\ufe5f\117\ufe5f\120\ufe5f\121\ufe5f\122\ufe5f" +
    "\001\002\000\066\003\ufe71\004\ufe71\011\ufe71\013\ufe71\014" +
    "\ufe71\015\ufe71\020\ufe71\023\ufe71\024\ufe71\027\ufe71\030\ufe71" +
    "\033\ufe71\061\ufe71\064\ufe71\075\ufe71\077\ufe71\100\ufe71\110" +
    "\ufe71\113\ufe71\114\ufe71\115\ufe71\116\ufe71\117\ufe71\120\ufe71" +
    "\121\ufe71\122\ufe71\001\002\000\004\063\u059c\001\002\000" +
    "\066\003\ufe5c\004\ufe5c\011\ufe5c\013\ufe5c\014\ufe5c\015\ufe5c" +
    "\020\ufe5c\023\ufe5c\024\ufe5c\027\ufe5c\030\ufe5c\033\ufe5c\061" +
    "\ufe5c\064\ufe5c\075\ufe5c\077\ufe5c\100\ufe5c\110\ufe5c\113\ufe5c" +
    "\114\ufe5c\115\ufe5c\116\ufe5c\117\ufe5c\120\ufe5c\121\ufe5c\122" +
    "\ufe5c\001\002\000\004\061\u059e\001\002\000\004\063\u059f" +
    "\001\002\000\066\003\ufe5b\004\ufe5b\011\ufe5b\013\ufe5b\014" +
    "\ufe5b\015\ufe5b\020\ufe5b\023\ufe5b\024\ufe5b\027\ufe5b\030\ufe5b" +
    "\033\ufe5b\061\ufe5b\064\ufe5b\075\ufe5b\077\ufe5b\100\ufe5b\110" +
    "\ufe5b\113\ufe5b\114\ufe5b\115\ufe5b\116\ufe5b\117\ufe5b\120\ufe5b" +
    "\121\ufe5b\122\ufe5b\001\002\000\016\065\u0587\116\012\117" +
    "\011\120\007\121\006\122\005\001\002\000\004\061\u05a2" +
    "\001\002\000\004\063\u05a3\001\002\000\066\003\ufe5a\004" +
    "\ufe5a\011\ufe5a\013\ufe5a\014\ufe5a\015\ufe5a\020\ufe5a\023\ufe5a" +
    "\024\ufe5a\027\ufe5a\030\ufe5a\033\ufe5a\061\ufe5a\064\ufe5a\075" +
    "\ufe5a\077\ufe5a\100\ufe5a\110\ufe5a\113\ufe5a\114\ufe5a\115\ufe5a" +
    "\116\ufe5a\117\ufe5a\120\ufe5a\121\ufe5a\122\ufe5a\001\002\000" +
    "\004\062\u05a5\001\002\000\004\060\u05a6\001\002\000\016" +
    "\065\u0587\116\012\117\011\120\007\121\006\122\005\001" +
    "\002\000\004\061\u05a8\001\002\000\004\063\u05a9\001\002" +
    "\000\066\003\ufe58\004\ufe58\011\ufe58\013\ufe58\014\ufe58\015" +
    "\ufe58\020\ufe58\023\ufe58\024\ufe58\027\ufe58\030\ufe58\033\ufe58" +
    "\061\ufe58\064\ufe58\075\ufe58\077\ufe58\100\ufe58\110\ufe58\113" +
    "\ufe58\114\ufe58\115\ufe58\116\ufe58\117\ufe58\120\ufe58\121\ufe58" +
    "\122\ufe58\001\002\000\004\064\u05ff\001\002\000\006\057" +
    "\u05dd\064\u05de\001\002\000\004\064\u05d8\001\002\000\004" +
    "\067\u05d6\001\002\000\004\064\u05d1\001\002\000\074\003" +
    "\uffb2\004\uffb2\011\uffb2\013\uffb2\014\uffb2\015\uffb2\020\uffb2" +
    "\023\uffb2\024\uffb2\027\uffb2\030\uffb2\033\uffb2\061\uffb2\062" +
    "\u05c4\063\u05c6\064\uffb2\067\u05c5\075\uffb2\077\uffb2\100\uffb2" +
    "\110\uffb2\113\uffb2\114\uffb2\115\uffb2\116\uffb2\117\uffb2\120" +
    "\uffb2\121\uffb2\122\uffb2\001\002\000\066\003\uffb3\004\uffb3" +
    "\011\uffb3\013\uffb3\014\uffb3\015\uffb3\020\uffb3\023\uffb3\024" +
    "\uffb3\027\uffb3\030\uffb3\033\uffb3\061\uffb3\064\uffb3\075\uffb3" +
    "\077\uffb3\100\uffb3\110\uffb3\113\uffb3\114\uffb3\115\uffb3\116" +
    "\uffb3\117\uffb3\120\uffb3\121\uffb3\122\uffb3\001\002\000\004" +
    "\064\u05bf\001\002\000\004\064\u05ba\001\002\000\006\062" +
    "\u05b4\063\u05b5\001\002\000\016\067\u05b6\116\012\117\011" +
    "\120\007\121\006\122\005\001\002\000\066\003\uffb4\004" +
    "\uffb4\011\uffb4\013\uffb4\014\uffb4\015\uffb4\020\uffb4\023\uffb4" +
    "\024\uffb4\027\uffb4\030\uffb4\033\uffb4\061\uffb4\064\uffb4\075" +
    "\uffb4\077\uffb4\100\uffb4\110\uffb4\113\uffb4\114\uffb4\115\uffb4" +
    "\116\uffb4\117\uffb4\120\uffb4\121\uffb4\122\uffb4\001\002\000" +
    "\004\063\u05b9\001\002\000\004\063\u05b8\001\002\000\066" +
    "\003\uffc0\004\uffc0\011\uffc0\013\uffc0\014\uffc0\015\uffc0\020" +
    "\uffc0\023\uffc0\024\uffc0\027\uffc0\030\uffc0\033\uffc0\061\uffc0" +
    "\064\uffc0\075\uffc0\077\uffc0\100\uffc0\110\uffc0\113\uffc0\114" +
    "\uffc0\115\uffc0\116\uffc0\117\uffc0\120\uffc0\121\uffc0\122\uffc0" +
    "\001\002\000\066\003\uffc2\004\uffc2\011\uffc2\013\uffc2\014" +
    "\uffc2\015\uffc2\020\uffc2\023\uffc2\024\uffc2\027\uffc2\030\uffc2" +
    "\033\uffc2\061\uffc2\064\uffc2\075\uffc2\077\uffc2\100\uffc2\110" +
    "\uffc2\113\uffc2\114\uffc2\115\uffc2\116\uffc2\117\uffc2\120\uffc2" +
    "\121\uffc2\122\uffc2\001\002\000\006\062\u05bb\063\u05bc\001" +
    "\002\000\004\067\u05bd\001\002\000\066\003\uff6e\004\uff6e" +
    "\011\uff6e\013\uff6e\014\uff6e\015\uff6e\020\uff6e\023\uff6e\024" +
    "\uff6e\027\uff6e\030\uff6e\033\uff6e\061\uff6e\064\uff6e\075\uff6e" +
    "\077\uff6e\100\uff6e\110\uff6e\113\uff6e\114\uff6e\115\uff6e\116" +
    "\uff6e\117\uff6e\120\uff6e\121\uff6e\122\uff6e\001\002\000\004" +
    "\063\u05be\001\002\000\066\003\uff7e\004\uff7e\011\uff7e\013" +
    "\uff7e\014\uff7e\015\uff7e\020\uff7e\023\uff7e\024\uff7e\027\uff7e" +
    "\030\uff7e\033\uff7e\061\uff7e\064\uff7e\075\uff7e\077\uff7e\100" +
    "\uff7e\110\uff7e\113\uff7e\114\uff7e\115\uff7e\116\uff7e\117\uff7e" +
    "\120\uff7e\121\uff7e\122\uff7e\001\002\000\006\062\u05c0\063" +
    "\u05c1\001\002\000\004\067\u05c2\001\002\000\066\003\uff6c" +
    "\004\uff6c\011\uff6c\013\uff6c\014\uff6c\015\uff6c\020\uff6c\023" +
    "\uff6c\024\uff6c\027\uff6c\030\uff6c\033\uff6c\061\uff6c\064\uff6c" +
    "\075\uff6c\077\uff6c\100\uff6c\110\uff6c\113\uff6c\114\uff6c\115" +
    "\uff6c\116\uff6c\117\uff6c\120\uff6c\121\uff6c\122\uff6c\001\002" +
    "\000\004\063\u05c3\001\002\000\066\003\uff7c\004\uff7c\011" +
    "\uff7c\013\uff7c\014\uff7c\015\uff7c\020\uff7c\023\uff7c\024\uff7c" +
    "\027\uff7c\030\uff7c\033\uff7c\061\uff7c\064\uff7c\075\uff7c\077" +
    "\uff7c\100\uff7c\110\uff7c\113\uff7c\114\uff7c\115\uff7c\116\uff7c" +
    "\117\uff7c\120\uff7c\121\uff7c\122\uff7c\001\002\000\024\063" +
    "\u05ca\065\u05c9\066\u05cb\067\u05c8\116\012\117\011\120\007" +
    "\121\006\122\005\001\002\000\004\063\u05c7\001\002\000" +
    "\066\003\uffb6\004\uffb6\011\uffb6\013\uffb6\014\uffb6\015\uffb6" +
    "\020\uffb6\023\uffb6\024\uffb6\027\uffb6\030\uffb6\033\uffb6\061" +
    "\uffb6\064\uffb6\075\uffb6\077\uffb6\100\uffb6\110\uffb6\113\uffb6" +
    "\114\uffb6\115\uffb6\116\uffb6\117\uffb6\120\uffb6\121\uffb6\122" +
    "\uffb6\001\002\000\066\003\uffbb\004\uffbb\011\uffbb\013\uffbb" +
    "\014\uffbb\015\uffbb\020\uffbb\023\uffbb\024\uffbb\027\uffbb\030" +
    "\uffbb\033\uffbb\061\uffbb\064\uffbb\075\uffbb\077\uffbb\100\uffbb" +
    "\110\uffbb\113\uffbb\114\uffbb\115\uffbb\116\uffbb\117\uffbb\120" +
    "\uffbb\121\uffbb\122\uffbb\001\002\000\070\003\uffb9\004\uffb9" +
    "\011\uffb9\013\uffb9\014\uffb9\015\uffb9\020\uffb9\023\uffb9\024" +
    "\uffb9\027\uffb9\030\uffb9\033\uffb9\061\uffb9\063\u05d0\064\uffb9" +
    "\075\uffb9\077\uffb9\100\uffb9\110\uffb9\113\uffb9\114\uffb9\115" +
    "\uffb9\116\uffb9\117\uffb9\120\uffb9\121\uffb9\122\uffb9\001\002" +
    "\000\004\063\u05cf\001\002\000\066\003\uffba\004\uffba\011" +
    "\uffba\013\uffba\014\uffba\015\uffba\020\uffba\023\uffba\024\uffba" +
    "\027\uffba\030\uffba\033\uffba\061\uffba\064\uffba\075\uffba\077" +
    "\uffba\100\uffba\110\uffba\113\uffba\114\uffba\115\uffba\116\uffba" +
    "\117\uffba\120\uffba\121\uffba\122\uffba\001\002\000\004\063" +
    "\u05ce\001\002\000\004\063\u05cd\001\002\000\066\003\uffc1" +
    "\004\uffc1\011\uffc1\013\uffc1\014\uffc1\015\uffc1\020\uffc1\023" +
    "\uffc1\024\uffc1\027\uffc1\030\uffc1\033\uffc1\061\uffc1\064\uffc1" +
    "\075\uffc1\077\uffc1\100\uffc1\110\uffc1\113\uffc1\114\uffc1\115" +
    "\uffc1\116\uffc1\117\uffc1\120\uffc1\121\uffc1\122\uffc1\001\002" +
    "\000\066\003\uffb8\004\uffb8\011\uffb8\013\uffb8\014\uffb8\015" +
    "\uffb8\020\uffb8\023\uffb8\024\uffb8\027\uffb8\030\uffb8\033\uffb8" +
    "\061\uffb8\064\uffb8\075\uffb8\077\uffb8\100\uffb8\110\uffb8\113" +
    "\uffb8\114\uffb8\115\uffb8\116\uffb8\117\uffb8\120\uffb8\121\uffb8" +
    "\122\uffb8\001\002\000\066\003\uffb7\004\uffb7\011\uffb7\013" +
    "\uffb7\014\uffb7\015\uffb7\020\uffb7\023\uffb7\024\uffb7\027\uffb7" +
    "\030\uffb7\033\uffb7\061\uffb7\064\uffb7\075\uffb7\077\uffb7\100" +
    "\uffb7\110\uffb7\113\uffb7\114\uffb7\115\uffb7\116\uffb7\117\uffb7" +
    "\120\uffb7\121\uffb7\122\uffb7\001\002\000\066\003\uffc4\004" +
    "\uffc4\011\uffc4\013\uffc4\014\uffc4\015\uffc4\020\uffc4\023\uffc4" +
    "\024\uffc4\027\uffc4\030\uffc4\033\uffc4\061\uffc4\064\uffc4\075" +
    "\uffc4\077\uffc4\100\uffc4\110\uffc4\113\uffc4\114\uffc4\115\uffc4" +
    "\116\uffc4\117\uffc4\120\uffc4\121\uffc4\122\uffc4\001\002\000" +
    "\006\062\u05d2\063\u05d3\001\002\000\004\067\u05d4\001\002" +
    "\000\066\003\uff6b\004\uff6b\011\uff6b\013\uff6b\014\uff6b\015" +
    "\uff6b\020\uff6b\023\uff6b\024\uff6b\027\uff6b\030\uff6b\033\uff6b" +
    "\061\uff6b\064\uff6b\075\uff6b\077\uff6b\100\uff6b\110\uff6b\113" +
    "\uff6b\114\uff6b\115\uff6b\116\uff6b\117\uff6b\120\uff6b\121\uff6b" +
    "\122\uff6b\001\002\000\004\063\u05d5\001\002\000\066\003" +
    "\uff7b\004\uff7b\011\uff7b\013\uff7b\014\uff7b\015\uff7b\020\uff7b" +
    "\023\uff7b\024\uff7b\027\uff7b\030\uff7b\033\uff7b\061\uff7b\064" +
    "\uff7b\075\uff7b\077\uff7b\100\uff7b\110\uff7b\113\uff7b\114\uff7b" +
    "\115\uff7b\116\uff7b\117\uff7b\120\uff7b\121\uff7b\122\uff7b\001" +
    "\002\000\004\063\u05d7\001\002\000\066\003\uffbc\004\uffbc" +
    "\011\uffbc\013\uffbc\014\uffbc\015\uffbc\020\uffbc\023\uffbc\024" +
    "\uffbc\027\uffbc\030\uffbc\033\uffbc\061\uffbc\064\uffbc\075\uffbc" +
    "\077\uffbc\100\uffbc\110\uffbc\113\uffbc\114\uffbc\115\uffbc\116" +
    "\uffbc\117\uffbc\120\uffbc\121\uffbc\122\uffbc\001\002\000\006" +
    "\062\u05d9\063\u05da\001\002\000\004\067\u05db\001\002\000" +
    "\066\003\uff6d\004\uff6d\011\uff6d\013\uff6d\014\uff6d\015\uff6d" +
    "\020\uff6d\023\uff6d\024\uff6d\027\uff6d\030\uff6d\033\uff6d\061" +
    "\uff6d\064\uff6d\075\uff6d\077\uff6d\100\uff6d\110\uff6d\113\uff6d" +
    "\114\uff6d\115\uff6d\116\uff6d\117\uff6d\120\uff6d\121\uff6d\122" +
    "\uff6d\001\002\000\004\063\u05dc\001\002\000\066\003\uff7d" +
    "\004\uff7d\011\uff7d\013\uff7d\014\uff7d\015\uff7d\020\uff7d\023" +
    "\uff7d\024\uff7d\027\uff7d\030\uff7d\033\uff7d\061\uff7d\064\uff7d" +
    "\075\uff7d\077\uff7d\100\uff7d\110\uff7d\113\uff7d\114\uff7d\115" +
    "\uff7d\116\uff7d\117\uff7d\120\uff7d\121\uff7d\122\uff7d\001\002" +
    "\000\006\062\u05ea\064\u05eb\001\002\000\004\062\u05df\001" +
    "\002\000\004\060\u05e0\001\002\000\016\067\u05e2\116\012" +
    "\117\011\120\007\121\006\122\005\001\002\000\004\061" +
    "\u05e8\001\002\000\010\061\ufe4f\063\ufe4f\072\u05e6\001\002" +
    "\000\010\061\ufe4e\063\ufe4e\072\u05e4\001\002\000\016\067" +
    "\u05e2\116\012\117\011\120\007\121\006\122\005\001\002" +
    "\000\006\061\ufe4c\063\ufe4c\001\002\000\022\061\ufe4b\063" +
    "\ufe4b\067\u05e2\116\012\117\011\120\007\121\006\122\005" +
    "\001\002\000\006\061\ufe4d\063\ufe4d\001\002\000\004\063" +
    "\u05e9\001\002\000\066\003\ufe69\004\ufe69\011\ufe69\013\ufe69" +
    "\014\ufe69\015\ufe69\020\ufe69\023\ufe69\024\ufe69\027\ufe69\030" +
    "\ufe69\033\ufe69\061\ufe69\064\ufe69\075\ufe69\077\ufe69\100\ufe69" +
    "\110\ufe69\113\ufe69\114\ufe69\115\ufe69\116\ufe69\117\ufe69\120" +
    "\ufe69\121\ufe69\122\ufe69\001\002\000\004\060\u05fb\001\002" +
    "\000\006\060\u05ec\062\u05ed\001\002\000\016\067\u05e2\116" +
    "\012\117\011\120\007\121\006\122\005\001\002\000\020" +
    "\060\u05ee\067\u05e2\116\012\117\011\120\007\121\006\122" +
    "\005\001\002\000\020\061\u05f2\067\u05e2\116\012\117\011" +
    "\120\007\121\006\122\005\001\002\000\004\061\u05f0\001" +
    "\002\000\004\063\u05f1\001\002\000\066\003\ufe6c\004\ufe6c" +
    "\011\ufe6c\013\ufe6c\014\ufe6c\015\ufe6c\020\ufe6c\023\ufe6c\024" +
    "\ufe6c\027\ufe6c\030\ufe6c\033\ufe6c\061\ufe6c\064\ufe6c\075\ufe6c" +
    "\077\ufe6c\100\ufe6c\110\ufe6c\113\ufe6c\114\ufe6c\115\ufe6c\116" +
    "\ufe6c\117\ufe6c\120\ufe6c\121\ufe6c\122\ufe6c\001\002\000\004" +
    "\063\u05f7\001\002\000\006\061\u05f5\063\u05f4\001\002\000" +
    "\066\003\ufe6e\004\ufe6e\011\ufe6e\013\ufe6e\014\ufe6e\015\ufe6e" +
    "\020\ufe6e\023\ufe6e\024\ufe6e\027\ufe6e\030\ufe6e\033\ufe6e\061" +
    "\ufe6e\064\ufe6e\075\ufe6e\077\ufe6e\100\ufe6e\110\ufe6e\113\ufe6e" +
    "\114\ufe6e\115\ufe6e\116\ufe6e\117\ufe6e\120\ufe6e\121\ufe6e\122" +
    "\ufe6e\001\002\000\070\003\ufe6f\004\ufe6f\011\ufe6f\013\ufe6f" +
    "\014\ufe6f\015\ufe6f\020\ufe6f\023\ufe6f\024\ufe6f\027\ufe6f\030" +
    "\ufe6f\033\ufe6f\061\ufe6f\063\u05f6\064\ufe6f\075\ufe6f\077\ufe6f" +
    "\100\ufe6f\110\ufe6f\113\ufe6f\114\ufe6f\115\ufe6f\116\ufe6f\117" +
    "\ufe6f\120\ufe6f\121\ufe6f\122\ufe6f\001\002\000\066\003\ufe73" +
    "\004\ufe73\011\ufe73\013\ufe73\014\ufe73\015\ufe73\020\ufe73\023" +
    "\ufe73\024\ufe73\027\ufe73\030\ufe73\033\ufe73\061\ufe73\064\ufe73" +
    "\075\ufe73\077\ufe73\100\ufe73\110\ufe73\113\ufe73\114\ufe73\115" +
    "\ufe73\116\ufe73\117\ufe73\120\ufe73\121\ufe73\122\ufe73\001\002" +
    "\000\066\003\ufe6d\004\ufe6d\011\ufe6d\013\ufe6d\014\ufe6d\015" +
    "\ufe6d\020\ufe6d\023\ufe6d\024\ufe6d\027\ufe6d\030\ufe6d\033\ufe6d" +
    "\061\ufe6d\064\ufe6d\075\ufe6d\077\ufe6d\100\ufe6d\110\ufe6d\113" +
    "\ufe6d\114\ufe6d\115\ufe6d\116\ufe6d\117\ufe6d\120\ufe6d\121\ufe6d" +
    "\122\ufe6d\001\002\000\004\061\u05f9\001\002\000\004\063" +
    "\u05fa\001\002\000\066\003\ufe6b\004\ufe6b\011\ufe6b\013\ufe6b" +
    "\014\ufe6b\015\ufe6b\020\ufe6b\023\ufe6b\024\ufe6b\027\ufe6b\030" +
    "\ufe6b\033\ufe6b\061\ufe6b\064\ufe6b\075\ufe6b\077\ufe6b\100\ufe6b" +
    "\110\ufe6b\113\ufe6b\114\ufe6b\115\ufe6b\116\ufe6b\117\ufe6b\120" +
    "\ufe6b\121\ufe6b\122\ufe6b\001\002\000\016\067\u05e2\116\012" +
    "\117\011\120\007\121\006\122\005\001\002\000\004\061" +
    "\u05fd\001\002\000\004\063\u05fe\001\002\000\066\003\ufe6a" +
    "\004\ufe6a\011\ufe6a\013\ufe6a\014\ufe6a\015\ufe6a\020\ufe6a\023" +
    "\ufe6a\024\ufe6a\027\ufe6a\030\ufe6a\033\ufe6a\061\ufe6a\064\ufe6a" +
    "\075\ufe6a\077\ufe6a\100\ufe6a\110\ufe6a\113\ufe6a\114\ufe6a\115" +
    "\ufe6a\116\ufe6a\117\ufe6a\120\ufe6a\121\ufe6a\122\ufe6a\001\002" +
    "\000\004\062\u0600\001\002\000\004\060\u0601\001\002\000" +
    "\016\067\u05e2\116\012\117\011\120\007\121\006\122\005" +
    "\001\002\000\004\061\u0603\001\002\000\004\063\u0604\001" +
    "\002\000\066\003\ufe68\004\ufe68\011\ufe68\013\ufe68\014\ufe68" +
    "\015\ufe68\020\ufe68\023\ufe68\024\ufe68\027\ufe68\030\ufe68\033" +
    "\ufe68\061\ufe68\064\ufe68\075\ufe68\077\ufe68\100\ufe68\110\ufe68" +
    "\113\ufe68\114\ufe68\115\ufe68\116\ufe68\117\ufe68\120\ufe68\121" +
    "\ufe68\122\ufe68\001\002\000\004\055\u060d\001\002\000\006" +
    "\055\u0607\067\u0608\001\002\000\004\063\u060c\001\002\000" +
    "\006\055\u0609\063\u060a\001\002\000\070\003\ufdbe\004\ufdbe" +
    "\011\ufdbe\013\ufdbe\014\ufdbe\015\ufdbe\020\ufdbe\023\ufdbe\024" +
    "\ufdbe\027\ufdbe\030\ufdbe\033\ufdbe\061\ufdbe\063\u060b\064\ufdbe" +
    "\075\ufdbe\077\ufdbe\100\ufdbe\110\ufdbe\113\ufdbe\114\ufdbe\115" +
    "\ufdbe\116\ufdbe\117\ufdbe\120\ufdbe\121\ufdbe\122\ufdbe\001\002" +
    "\000\066\003\ufdbd\004\ufdbd\011\ufdbd\013\ufdbd\014\ufdbd\015" +
    "\ufdbd\020\ufdbd\023\ufdbd\024\ufdbd\027\ufdbd\030\ufdbd\033\ufdbd" +
    "\061\ufdbd\064\ufdbd\075\ufdbd\077\ufdbd\100\ufdbd\110\ufdbd\113" +
    "\ufdbd\114\ufdbd\115\ufdbd\116\ufdbd\117\ufdbd\120\ufdbd\121\ufdbd" +
    "\122\ufdbd\001\002\000\066\003\ufdbf\004\ufdbf\011\ufdbf\013" +
    "\ufdbf\014\ufdbf\015\ufdbf\020\ufdbf\023\ufdbf\024\ufdbf\027\ufdbf" +
    "\030\ufdbf\033\ufdbf\061\ufdbf\064\ufdbf\075\ufdbf\077\ufdbf\100" +
    "\ufdbf\110\ufdbf\113\ufdbf\114\ufdbf\115\ufdbf\116\ufdbf\117\ufdbf" +
    "\120\ufdbf\121\ufdbf\122\ufdbf\001\002\000\066\003\ufdbc\004" +
    "\ufdbc\011\ufdbc\013\ufdbc\014\ufdbc\015\ufdbc\020\ufdbc\023\ufdbc" +
    "\024\ufdbc\027\ufdbc\030\ufdbc\033\ufdbc\061\ufdbc\064\ufdbc\075" +
    "\ufdbc\077\ufdbc\100\ufdbc\110\ufdbc\113\ufdbc\114\ufdbc\115\ufdbc" +
    "\116\ufdbc\117\ufdbc\120\ufdbc\121\ufdbc\122\ufdbc\001\002\000" +
    "\004\063\u060e\001\002\000\066\003\ufdbb\004\ufdbb\011\ufdbb" +
    "\013\ufdbb\014\ufdbb\015\ufdbb\020\ufdbb\023\ufdbb\024\ufdbb\027" +
    "\ufdbb\030\ufdbb\033\ufdbb\061\ufdbb\064\ufdbb\075\ufdbb\077\ufdbb" +
    "\100\ufdbb\110\ufdbb\113\ufdbb\114\ufdbb\115\ufdbb\116\ufdbb\117" +
    "\ufdbb\120\ufdbb\121\ufdbb\122\ufdbb\001\002\000\004\055\u0617" +
    "\001\002\000\006\055\u0611\065\u0612\001\002\000\004\063" +
    "\u0616\001\002\000\006\055\u0613\063\u0614\001\002\000\070" +
    "\003\ufdc7\004\ufdc7\011\ufdc7\013\ufdc7\014\ufdc7\015\ufdc7\020" +
    "\ufdc7\023\ufdc7\024\ufdc7\027\ufdc7\030\ufdc7\033\ufdc7\061\ufdc7" +
    "\063\u0615\064\ufdc7\075\ufdc7\077\ufdc7\100\ufdc7\110\ufdc7\113" +
    "\ufdc7\114\ufdc7\115\ufdc7\116\ufdc7\117\ufdc7\120\ufdc7\121\ufdc7" +
    "\122\ufdc7\001\002\000\066\003\ufdc6\004\ufdc6\011\ufdc6\013" +
    "\ufdc6\014\ufdc6\015\ufdc6\020\ufdc6\023\ufdc6\024\ufdc6\027\ufdc6" +
    "\030\ufdc6\033\ufdc6\061\ufdc6\064\ufdc6\075\ufdc6\077\ufdc6\100" +
    "\ufdc6\110\ufdc6\113\ufdc6\114\ufdc6\115\ufdc6\116\ufdc6\117\ufdc6" +
    "\120\ufdc6\121\ufdc6\122\ufdc6\001\002\000\066\003\ufdc8\004" +
    "\ufdc8\011\ufdc8\013\ufdc8\014\ufdc8\015\ufdc8\020\ufdc8\023\ufdc8" +
    "\024\ufdc8\027\ufdc8\030\ufdc8\033\ufdc8\061\ufdc8\064\ufdc8\075" +
    "\ufdc8\077\ufdc8\100\ufdc8\110\ufdc8\113\ufdc8\114\ufdc8\115\ufdc8" +
    "\116\ufdc8\117\ufdc8\120\ufdc8\121\ufdc8\122\ufdc8\001\002\000" +
    "\066\003\ufdc5\004\ufdc5\011\ufdc5\013\ufdc5\014\ufdc5\015\ufdc5" +
    "\020\ufdc5\023\ufdc5\024\ufdc5\027\ufdc5\030\ufdc5\033\ufdc5\061" +
    "\ufdc5\064\ufdc5\075\ufdc5\077\ufdc5\100\ufdc5\110\ufdc5\113\ufdc5" +
    "\114\ufdc5\115\ufdc5\116\ufdc5\117\ufdc5\120\ufdc5\121\ufdc5\122" +
    "\ufdc5\001\002\000\004\063\u0618\001\002\000\066\003\ufdc4" +
    "\004\ufdc4\011\ufdc4\013\ufdc4\014\ufdc4\015\ufdc4\020\ufdc4\023" +
    "\ufdc4\024\ufdc4\027\ufdc4\030\ufdc4\033\ufdc4\061\ufdc4\064\ufdc4" +
    "\075\ufdc4\077\ufdc4\100\ufdc4\110\ufdc4\113\ufdc4\114\ufdc4\115" +
    "\ufdc4\116\ufdc4\117\ufdc4\120\ufdc4\121\ufdc4\122\ufdc4\001\002" +
    "\000\012\003\uffc9\004\uffc9\033\uffc9\061\uffc9\001\002\000" +
    "\012\003\uffe7\004\uffe7\033\uffe7\061\uffe7\001\002\000\004" +
    "\064\u0671\001\002\000\006\057\u064f\064\u0650\001\002\000" +
    "\004\064\u064a\001\002\000\006\031\u01f8\032\u01f6\001\002" +
    "\000\004\064\u0643\001\002\000\066\003\uff80\004\uff80\011" +
    "\uff80\013\uff80\014\uff80\015\uff80\020\uff80\023\uff80\024\uff80" +
    "\027\uff80\030\uff80\033\uff80\061\uff80\064\uff80\075\uff80\077" +
    "\uff80\100\uff80\110\uff80\113\uff80\114\uff80\115\uff80\116\uff80" +
    "\117\uff80\120\uff80\121\uff80\122\uff80\001\002\000\076\003" +
    "\uff7f\004\uff7f\011\uff7f\013\uff7f\014\uff7f\015\uff7f\020\uff7f" +
    "\023\uff7f\024\uff7f\027\uff7f\030\uff7f\031\u01f8\032\u01f6\033" +
    "\uff7f\061\uff7f\062\u0635\063\u0636\064\uff7f\075\uff7f\077\uff7f" +
    "\100\uff7f\110\uff7f\113\uff7f\114\uff7f\115\uff7f\116\uff7f\117" +
    "\uff7f\120\uff7f\121\uff7f\122\uff7f\001\002\000\004\064\u0630" +
    "\001\002\000\004\064\u062b\001\002\000\006\062\u0625\063" +
    "\u0626\001\002\000\020\031\u01f8\032\u01f6\116\012\117\011" +
    "\120\007\121\006\122\005\001\002\000\066\003\uff81\004" +
    "\uff81\011\uff81\013\uff81\014\uff81\015\uff81\020\uff81\023\uff81" +
    "\024\uff81\027\uff81\030\uff81\033\uff81\061\uff81\064\uff81\075" +
    "\uff81\077\uff81\100\uff81\110\uff81\113\uff81\114\uff81\115\uff81" +
    "\116\uff81\117\uff81\120\uff81\121\uff81\122\uff81\001\002\000" +
    "\004\063\u062a\001\002\000\004\063\u0629\001\002\000\066" +
    "\003\uff89\004\uff89\011\uff89\013\uff89\014\uff89\015\uff89\020" +
    "\uff89\023\uff89\024\uff89\027\uff89\030\uff89\033\uff89\061\uff89" +
    "\064\uff89\075\uff89\077\uff89\100\uff89\110\uff89\113\uff89\114" +
    "\uff89\115\uff89\116\uff89\117\uff89\120\uff89\121\uff89\122\uff89" +
    "\001\002\000\066\003\uff8c\004\uff8c\011\uff8c\013\uff8c\014" +
    "\uff8c\015\uff8c\020\uff8c\023\uff8c\024\uff8c\027\uff8c\030\uff8c" +
    "\033\uff8c\061\uff8c\064\uff8c\075\uff8c\077\uff8c\100\uff8c\110" +
    "\uff8c\113\uff8c\114\uff8c\115\uff8c\116\uff8c\117\uff8c\120\uff8c" +
    "\121\uff8c\122\uff8c\001\002\000\006\062\u062c\063\u062d\001" +
    "\002\000\004\067\u062e\001\002\000\066\003\uff66\004\uff66" +
    "\011\uff66\013\uff66\014\uff66\015\uff66\020\uff66\023\uff66\024" +
    "\uff66\027\uff66\030\uff66\033\uff66\061\uff66\064\uff66\075\uff66" +
    "\077\uff66\100\uff66\110\uff66\113\uff66\114\uff66\115\uff66\116" +
    "\uff66\117\uff66\120\uff66\121\uff66\122\uff66\001\002\000\004" +
    "\063\u062f\001\002\000\066\003\uff76\004\uff76\011\uff76\013" +
    "\uff76\014\uff76\015\uff76\020\uff76\023\uff76\024\uff76\027\uff76" +
    "\030\uff76\033\uff76\061\uff76\064\uff76\075\uff76\077\uff76\100" +
    "\uff76\110\uff76\113\uff76\114\uff76\115\uff76\116\uff76\117\uff76" +
    "\120\uff76\121\uff76\122\uff76\001\002\000\006\062\u0631\063" +
    "\u0632\001\002\000\004\067\u0633\001\002\000\066\003\uff64" +
    "\004\uff64\011\uff64\013\uff64\014\uff64\015\uff64\020\uff64\023" +
    "\uff64\024\uff64\027\uff64\030\uff64\033\uff64\061\uff64\064\uff64" +
    "\075\uff64\077\uff64\100\uff64\110\uff64\113\uff64\114\uff64\115" +
    "\uff64\116\uff64\117\uff64\120\uff64\121\uff64\122\uff64\001\002" +
    "\000\004\063\u0634\001\002\000\066\003\uff74\004\uff74\011" +
    "\uff74\013\uff74\014\uff74\015\uff74\020\uff74\023\uff74\024\uff74" +
    "\027\uff74\030\uff74\033\uff74\061\uff74\064\uff74\075\uff74\077" +
    "\uff74\100\uff74\110\uff74\113\uff74\114\uff74\115\uff74\116\uff74" +
    "\117\uff74\120\uff74\121\uff74\122\uff74\001\002\000\024\031" +
    "\u063a\032\u0639\063\u063d\064\u063c\116\012\117\011\120\007" +
    "\121\006\122\005\001\002\000\066\003\uff82\004\uff82\011" +
    "\uff82\013\uff82\014\uff82\015\uff82\020\uff82\023\uff82\024\uff82" +
    "\027\uff82\030\uff82\033\uff82\061\uff82\064\uff82\075\uff82\077" +
    "\uff82\100\uff82\110\uff82\113\uff82\114\uff82\115\uff82\116\uff82" +
    "\117\uff82\120\uff82\121\uff82\122\uff82\001\002\000\004\063" +
    "\u0638\001\002\000\066\003\uff87\004\uff87\011\uff87\013\uff87" +
    "\014\uff87\015\uff87\020\uff87\023\uff87\024\uff87\027\uff87\030" +
    "\uff87\033\uff87\061\uff87\064\uff87\075\uff87\077\uff87\100\uff87" +
    "\110\uff87\113\uff87\114\uff87\115\uff87\116\uff87\117\uff87\120" +
    "\uff87\121\uff87\122\uff87\001\002\000\070\003\ufe8a\004\ufe8a" +
    "\011\ufe8a\013\ufe8a\014\ufe8a\015\ufe8a\020\ufe8a\023\ufe8a\024" +
    "\ufe8a\027\ufe8a\030\ufe8a\033\ufe8a\061\ufe8a\063\u0642\064\ufe8a" +
    "\075\ufe8a\077\ufe8a\100\ufe8a\110\ufe8a\113\ufe8a\114\ufe8a\115" +
    "\ufe8a\116\ufe8a\117\ufe8a\120\ufe8a\121\ufe8a\122\ufe8a\001\002" +
    "\000\070\003\ufe8b\004\ufe8b\011\ufe8b\013\ufe8b\014\ufe8b\015" +
    "\ufe8b\020\ufe8b\023\ufe8b\024\ufe8b\027\ufe8b\030\ufe8b\033\ufe8b" +
    "\061\ufe8b\063\u0641\064\ufe8b\075\ufe8b\077\ufe8b\100\ufe8b\110" +
    "\ufe8b\113\ufe8b\114\ufe8b\115\ufe8b\116\ufe8b\117\ufe8b\120\ufe8b" +
    "\121\ufe8b\122\ufe8b\001\002\000\066\003\uff85\004\uff85\011" +
    "\uff85\013\uff85\014\uff85\015\uff85\020\uff85\023\uff85\024\uff85" +
    "\027\uff85\030\uff85\033\uff85\061\uff85\064\uff85\075\uff85\077" +
    "\uff85\100\uff85\110\uff85\113\uff85\114\uff85\115\uff85\116\uff85" +
    "\117\uff85\120\uff85\121\uff85\122\uff85\001\002\000\070\003" +
    "\uff83\004\uff83\011\uff83\013\uff83\014\uff83\015\uff83\020\uff83" +
    "\023\uff83\024\uff83\027\uff83\030\uff83\033\uff83\061\uff83\063" +
    "\u0640\064\uff83\075\uff83\077\uff83\100\uff83\110\uff83\113\uff83" +
    "\114\uff83\115\uff83\116\uff83\117\uff83\120\uff83\121\uff83\122" +
    "\uff83\001\002\000\066\003\uff86\004\uff86\011\uff86\013\uff86" +
    "\014\uff86\015\uff86\020\uff86\023\uff86\024\uff86\027\uff86\030" +
    "\uff86\033\uff86\061\uff86\064\uff86\075\uff86\077\uff86\100\uff86" +
    "\110\uff86\113\uff86\114\uff86\115\uff86\116\uff86\117\uff86\120" +
    "\uff86\121\uff86\122\uff86\001\002\000\004\063\u063f\001\002" +
    "\000\066\003\uff8b\004\uff8b\011\uff8b\013\uff8b\014\uff8b\015" +
    "\uff8b\020\uff8b\023\uff8b\024\uff8b\027\uff8b\030\uff8b\033\uff8b" +
    "\061\uff8b\064\uff8b\075\uff8b\077\uff8b\100\uff8b\110\uff8b\113" +
    "\uff8b\114\uff8b\115\uff8b\116\uff8b\117\uff8b\120\uff8b\121\uff8b" +
    "\122\uff8b\001\002\000\066\003\uff84\004\uff84\011\uff84\013" +
    "\uff84\014\uff84\015\uff84\020\uff84\023\uff84\024\uff84\027\uff84" +
    "\030\uff84\033\uff84\061\uff84\064\uff84\075\uff84\077\uff84\100" +
    "\uff84\110\uff84\113\uff84\114\uff84\115\uff84\116\uff84\117\uff84" +
    "\120\uff84\121\uff84\122\uff84\001\002\000\066\003\uff8f\004" +
    "\uff8f\011\uff8f\013\uff8f\014\uff8f\015\uff8f\020\uff8f\023\uff8f" +
    "\024\uff8f\027\uff8f\030\uff8f\033\uff8f\061\uff8f\064\uff8f\075" +
    "\uff8f\077\uff8f\100\uff8f\110\uff8f\113\uff8f\114\uff8f\115\uff8f" +
    "\116\uff8f\117\uff8f\120\uff8f\121\uff8f\122\uff8f\001\002\000" +
    "\066\003\uff8e\004\uff8e\011\uff8e\013\uff8e\014\uff8e\015\uff8e" +
    "\020\uff8e\023\uff8e\024\uff8e\027\uff8e\030\uff8e\033\uff8e\061" +
    "\uff8e\064\uff8e\075\uff8e\077\uff8e\100\uff8e\110\uff8e\113\uff8e" +
    "\114\uff8e\115\uff8e\116\uff8e\117\uff8e\120\uff8e\121\uff8e\122" +
    "\uff8e\001\002\000\006\062\u0644\063\u0645\001\002\000\004" +
    "\067\u0646\001\002\000\066\003\uff63\004\uff63\011\uff63\013" +
    "\uff63\014\uff63\015\uff63\020\uff63\023\uff63\024\uff63\027\uff63" +
    "\030\uff63\033\uff63\061\uff63\064\uff63\075\uff63\077\uff63\100" +
    "\uff63\110\uff63\113\uff63\114\uff63\115\uff63\116\uff63\117\uff63" +
    "\120\uff63\121\uff63\122\uff63\001\002\000\004\063\u0647\001" +
    "\002\000\066\003\uff73\004\uff73\011\uff73\013\uff73\014\uff73" +
    "\015\uff73\020\uff73\023\uff73\024\uff73\027\uff73\030\uff73\033" +
    "\uff73\061\uff73\064\uff73\075\uff73\077\uff73\100\uff73\110\uff73" +
    "\113\uff73\114\uff73\115\uff73\116\uff73\117\uff73\120\uff73\121" +
    "\uff73\122\uff73\001\002\000\004\063\u0649\001\002\000\066" +
    "\003\uff88\004\uff88\011\uff88\013\uff88\014\uff88\015\uff88\020" +
    "\uff88\023\uff88\024\uff88\027\uff88\030\uff88\033\uff88\061\uff88" +
    "\064\uff88\075\uff88\077\uff88\100\uff88\110\uff88\113\uff88\114" +
    "\uff88\115\uff88\116\uff88\117\uff88\120\uff88\121\uff88\122\uff88" +
    "\001\002\000\006\062\u064b\063\u064c\001\002\000\004\067" +
    "\u064d\001\002\000\066\003\uff65\004\uff65\011\uff65\013\uff65" +
    "\014\uff65\015\uff65\020\uff65\023\uff65\024\uff65\027\uff65\030" +
    "\uff65\033\uff65\061\uff65\064\uff65\075\uff65\077\uff65\100\uff65" +
    "\110\uff65\113\uff65\114\uff65\115\uff65\116\uff65\117\uff65\120" +
    "\uff65\121\uff65\122\uff65\001\002\000\004\063\u064e\001\002" +
    "\000\066\003\uff75\004\uff75\011\uff75\013\uff75\014\uff75\015" +
    "\uff75\020\uff75\023\uff75\024\uff75\027\uff75\030\uff75\033\uff75" +
    "\061\uff75\064\uff75\075\uff75\077\uff75\100\uff75\110\uff75\113" +
    "\uff75\114\uff75\115\uff75\116\uff75\117\uff75\120\uff75\121\uff75" +
    "\122\uff75\001\002\000\006\062\u065c\064\u065d\001\002\000" +
    "\004\062\u0651\001\002\000\004\060\u0652\001\002\000\020" +
    "\031\u01f8\032\u01f6\116\012\117\011\120\007\121\006\122" +
    "\005\001\002\000\010\061\ufe40\063\ufe40\072\u065a\001\002" +
    "\000\004\061\u0658\001\002\000\010\061\ufe3f\063\ufe3f\072" +
    "\u0656\001\002\000\020\031\u01f8\032\u01f6\116\012\117\011" +
    "\120\007\121\006\122\005\001\002\000\006\061\ufe3d\063" +
    "\ufe3d\001\002\000\004\063\u0659\001\002\000\066\003\ufe51" +
    "\004\ufe51\011\ufe51\013\ufe51\014\ufe51\015\ufe51\020\ufe51\023" +
    "\ufe51\024\ufe51\027\ufe51\030\ufe51\033\ufe51\061\ufe51\064\ufe51" +
    "\075\ufe51\077\ufe51\100\ufe51\110\ufe51\113\ufe51\114\ufe51\115" +
    "\ufe51\116\ufe51\117\ufe51\120\ufe51\121\ufe51\122\ufe51\001\002" +
    "\000\024\031\u01f8\032\u01f6\061\ufe3c\063\ufe3c\116\012\117" +
    "\011\120\007\121\006\122\005\001\002\000\006\061\ufe3e" +
    "\063\ufe3e\001\002\000\004\060\u066d\001\002\000\006\060" +
    "\u065f\062\u065e\001\002\000\022\031\u01f8\032\u01f6\060\u0663" +
    "\116\012\117\011\120\007\121\006\122\005\001\002\000" +
    "\020\031\u01f8\032\u01f6\116\012\117\011\120\007\121\006" +
    "\122\005\001\002\000\004\061\u0661\001\002\000\004\063" +
    "\u0662\001\002\000\066\003\ufe53\004\ufe53\011\ufe53\013\ufe53" +
    "\014\ufe53\015\ufe53\020\ufe53\023\ufe53\024\ufe53\027\ufe53\030" +
    "\ufe53\033\ufe53\061\ufe53\064\ufe53\075\ufe53\077\ufe53\100\ufe53" +
    "\110\ufe53\113\ufe53\114\ufe53\115\ufe53\116\ufe53\117\ufe53\120" +
    "\ufe53\121\ufe53\122\ufe53\001\002\000\022\031\u01f8\032\u01f6" +
    "\061\u0667\116\012\117\011\120\007\121\006\122\005\001" +
    "\002\000\004\061\u0665\001\002\000\004\063\u0666\001\002" +
    "\000\066\003\ufe54\004\ufe54\011\ufe54\013\ufe54\014\ufe54\015" +
    "\ufe54\020\ufe54\023\ufe54\024\ufe54\027\ufe54\030\ufe54\033\ufe54" +
    "\061\ufe54\064\ufe54\075\ufe54\077\ufe54\100\ufe54\110\ufe54\113" +
    "\ufe54\114\ufe54\115\ufe54\116\ufe54\117\ufe54\120\ufe54\121\ufe54" +
    "\122\ufe54\001\002\000\004\063\u066c\001\002\000\006\061" +
    "\u0669\063\u066a\001\002\000\070\003\ufe57\004\ufe57\011\ufe57" +
    "\013\ufe57\014\ufe57\015\ufe57\020\ufe57\023\ufe57\024\ufe57\027" +
    "\ufe57\030\ufe57\033\ufe57\061\ufe57\063\u066b\064\ufe57\075\ufe57" +
    "\077\ufe57\100\ufe57\110\ufe57\113\ufe57\114\ufe57\115\ufe57\116" +
    "\ufe57\117\ufe57\120\ufe57\121\ufe57\122\ufe57\001\002\000\066" +
    "\003\ufe56\004\ufe56\011\ufe56\013\ufe56\014\ufe56\015\ufe56\020" +
    "\ufe56\023\ufe56\024\ufe56\027\ufe56\030\ufe56\033\ufe56\061\ufe56" +
    "\064\ufe56\075\ufe56\077\ufe56\100\ufe56\110\ufe56\113\ufe56\114" +
    "\ufe56\115\ufe56\116\ufe56\117\ufe56\120\ufe56\121\ufe56\122\ufe56" +
    "\001\002\000\066\003\ufe70\004\ufe70\011\ufe70\013\ufe70\014" +
    "\ufe70\015\ufe70\020\ufe70\023\ufe70\024\ufe70\027\ufe70\030\ufe70" +
    "\033\ufe70\061\ufe70\064\ufe70\075\ufe70\077\ufe70\100\ufe70\110" +
    "\ufe70\113\ufe70\114\ufe70\115\ufe70\116\ufe70\117\ufe70\120\ufe70" +
    "\121\ufe70\122\ufe70\001\002\000\066\003\ufe55\004\ufe55\011" +
    "\ufe55\013\ufe55\014\ufe55\015\ufe55\020\ufe55\023\ufe55\024\ufe55" +
    "\027\ufe55\030\ufe55\033\ufe55\061\ufe55\064\ufe55\075\ufe55\077" +
    "\ufe55\100\ufe55\110\ufe55\113\ufe55\114\ufe55\115\ufe55\116\ufe55" +
    "\117\ufe55\120\ufe55\121\ufe55\122\ufe55\001\002\000\020\031" +
    "\u01f8\032\u01f6\116\012\117\011\120\007\121\006\122\005" +
    "\001\002\000\004\061\u066f\001\002\000\004\063\u0670\001" +
    "\002\000\066\003\ufe52\004\ufe52\011\ufe52\013\ufe52\014\ufe52" +
    "\015\ufe52\020\ufe52\023\ufe52\024\ufe52\027\ufe52\030\ufe52\033" +
    "\ufe52\061\ufe52\064\ufe52\075\ufe52\077\ufe52\100\ufe52\110\ufe52" +
    "\113\ufe52\114\ufe52\115\ufe52\116\ufe52\117\ufe52\120\ufe52\121" +
    "\ufe52\122\ufe52\001\002\000\004\062\u0672\001\002\000\004" +
    "\060\u0673\001\002\000\020\031\u01f8\032\u01f6\116\012\117" +
    "\011\120\007\121\006\122\005\001\002\000\004\061\u0675" +
    "\001\002\000\004\063\u0676\001\002\000\066\003\ufe50\004" +
    "\ufe50\011\ufe50\013\ufe50\014\ufe50\015\ufe50\020\ufe50\023\ufe50" +
    "\024\ufe50\027\ufe50\030\ufe50\033\ufe50\061\ufe50\064\ufe50\075" +
    "\ufe50\077\ufe50\100\ufe50\110\ufe50\113\ufe50\114\ufe50\115\ufe50" +
    "\116\ufe50\117\ufe50\120\ufe50\121\ufe50\122\ufe50\001\002\000" +
    "\012\003\uffd9\004\uffd9\033\uffd9\061\uffd9\001\002\000\004" +
    "\055\u0680\001\002\000\020\055\u067b\067\u0112\116\012\117" +
    "\011\120\007\121\006\122\005\001\002\000\006\055\u067d" +
    "\063\u067e\001\002\000\004\063\u067c\001\002\000\066\003" +
    "\ufdb7\004\ufdb7\011\ufdb7\013\ufdb7\014\ufdb7\015\ufdb7\020\ufdb7" +
    "\023\ufdb7\024\ufdb7\027\ufdb7\030\ufdb7\033\ufdb7\061\ufdb7\064" +
    "\ufdb7\075\ufdb7\077\ufdb7\100\ufdb7\110\ufdb7\113\ufdb7\114\ufdb7" +
    "\115\ufdb7\116\ufdb7\117\ufdb7\120\ufdb7\121\ufdb7\122\ufdb7\001" +
    "\002\000\070\003\ufdb9\004\ufdb9\011\ufdb9\013\ufdb9\014\ufdb9" +
    "\015\ufdb9\020\ufdb9\023\ufdb9\024\ufdb9\027\ufdb9\030\ufdb9\033" +
    "\ufdb9\061\ufdb9\063\u067f\064\ufdb9\075\ufdb9\077\ufdb9\100\ufdb9" +
    "\110\ufdb9\113\ufdb9\114\ufdb9\115\ufdb9\116\ufdb9\117\ufdb9\120" +
    "\ufdb9\121\ufdb9\122\ufdb9\001\002\000\066\003\ufdb8\004\ufdb8" +
    "\011\ufdb8\013\ufdb8\014\ufdb8\015\ufdb8\020\ufdb8\023\ufdb8\024" +
    "\ufdb8\027\ufdb8\030\ufdb8\033\ufdb8\061\ufdb8\064\ufdb8\075\ufdb8" +
    "\077\ufdb8\100\ufdb8\110\ufdb8\113\ufdb8\114\ufdb8\115\ufdb8\116" +
    "\ufdb8\117\ufdb8\120\ufdb8\121\ufdb8\122\ufdb8\001\002\000\066" +
    "\003\ufdba\004\ufdba\011\ufdba\013\ufdba\014\ufdba\015\ufdba\020" +
    "\ufdba\023\ufdba\024\ufdba\027\ufdba\030\ufdba\033\ufdba\061\ufdba" +
    "\064\ufdba\075\ufdba\077\ufdba\100\ufdba\110\ufdba\113\ufdba\114" +
    "\ufdba\115\ufdba\116\ufdba\117\ufdba\120\ufdba\121\ufdba\122\ufdba" +
    "\001\002\000\004\063\u0681\001\002\000\066\003\ufdb6\004" +
    "\ufdb6\011\ufdb6\013\ufdb6\014\ufdb6\015\ufdb6\020\ufdb6\023\ufdb6" +
    "\024\ufdb6\027\ufdb6\030\ufdb6\033\ufdb6\061\ufdb6\064\ufdb6\075" +
    "\ufdb6\077\ufdb6\100\ufdb6\110\ufdb6\113\ufdb6\114\ufdb6\115\ufdb6" +
    "\116\ufdb6\117\ufdb6\120\ufdb6\121\ufdb6\122\ufdb6\001\002\000" +
    "\012\003\uffeb\004\uffeb\033\uffeb\061\uffeb\001\002\000\004" +
    "\055\u0684\001\002\000\004\060\u0685\001\002\000\056\011" +
    "\042\013\035\014\051\015\101\020\066\023\071\024\070" +
    "\027\102\030\043\064\077\075\075\077\054\100\040\110" +
    "\033\113\073\114\060\115\041\116\012\117\011\120\007" +
    "\121\006\122\005\001\002\000\004\061\u0687\001\002\000" +
    "\022\003\ufe25\006\ufe25\061\ufe25\116\ufe25\117\ufe25\120\ufe25" +
    "\121\ufe25\122\ufe25\001\002\000\004\054\u068f\001\002\000" +
    "\004\054\u068a\001\002\000\004\055\u068b\001\002\000\004" +
    "\060\u068c\001\002\000\056\011\042\013\035\014\051\015" +
    "\101\020\066\023\071\024\070\027\102\030\043\064\077" +
    "\075\075\077\054\100\040\110\033\113\073\114\060\115" +
    "\041\116\012\117\011\120\007\121\006\122\005\001\002" +
    "\000\004\061\u068e\001\002\000\022\003\ufe2b\006\ufe2b\061" +
    "\ufe2b\116\ufe2b\117\ufe2b\120\ufe2b\121\ufe2b\122\ufe2b\001\002" +
    "\000\004\055\u0690\001\002\000\004\060\u0691\001\002\000" +
    "\056\011\042\013\035\014\051\015\101\020\066\023\071" +
    "\024\070\027\102\030\043\064\077\075\075\077\054\100" +
    "\040\110\033\113\073\114\060\115\041\116\012\117\011" +
    "\120\007\121\006\122\005\001\002\000\004\061\u0693\001" +
    "\002\000\022\003\ufe27\006\ufe27\061\ufe27\116\ufe27\117\ufe27" +
    "\120\ufe27\121\ufe27\122\ufe27\001\002\000\004\061\u07bc\001" +
    "\002\000\022\003\ufff2\006\u0696\061\ufff2\116\012\117\011" +
    "\120\007\121\006\122\005\001\002\000\030\011\u069b\013" +
    "\u069a\023\u069d\026\u0708\030\u069c\064\u070a\116\012\117\011" +
    "\120\007\121\006\122\005\001\002\000\026\011\u069b\013" +
    "\u069a\023\u069d\026\u0698\030\u069c\116\012\117\011\120\007" +
    "\121\006\122\005\001\002\000\016\064\u06f7\116\012\117" +
    "\011\120\007\121\006\122\005\001\002\000\016\064\u06dd" +
    "\116\012\117\011\120\007\121\006\122\005\001\002\000" +
    "\024\003\ufdcd\054\ufdcd\064\ufdcd\072\ufdcd\116\ufdcd\117\ufdcd" +
    "\120\ufdcd\121\ufdcd\122\ufdcd\001\002\000\024\003\ufdd0\054" +
    "\ufdd0\064\ufdd0\072\ufdd0\116\ufdd0\117\ufdd0\120\ufdd0\121\ufdd0" +
    "\122\ufdd0\001\002\000\024\003\ufdce\054\ufdce\064\ufdce\072" +
    "\ufdce\116\ufdce\117\ufdce\120\ufdce\121\ufdce\122\ufdce\001\002" +
    "\000\024\003\ufdcf\054\ufdcf\064\ufdcf\072\ufdcf\116\ufdcf\117" +
    "\ufdcf\120\ufdcf\121\ufdcf\122\ufdcf\001\002\000\016\064\u06a0" +
    "\116\012\117\011\120\007\121\006\122\005\001\002\000" +
    "\004\054\u06cf\001\002\000\004\054\u06a1\001\002\000\030" +
    "\003\u06a4\011\u069b\013\u069a\023\u069d\030\u069c\055\u06a3\116" +
    "\012\117\011\120\007\121\006\122\005\001\002\000\020" +
    "\064\u06c7\072\u06c5\116\012\117\011\120\007\121\006\122" +
    "\005\001\002\000\004\060\u06c0\001\002\000\004\064\u06bd" +
    "\001\002\000\016\064\u06b8\116\012\117\011\120\007\121" +
    "\006\122\005\001\002\000\004\055\u06a7\001\002\000\004" +
    "\060\u06a8\001\002\000\056\011\042\013\035\014\051\015" +
    "\101\020\066\023\071\024\070\027\102\030\043\064\077" +
    "\075\075\077\054\100\040\110\033\113\073\114\060\115" +
    "\041\116\012\117\011\120\007\121\006\122\005\001\002" +
    "\000\006\033\u06ac\061\u06ab\001\002\000\004\061\u06b6\001" +
    "\002\000\022\003\ufe05\006\ufe05\061\ufe05\116\ufe05\117\ufe05" +
    "\120\ufe05\121\ufe05\122\ufe05\001\002\000\024\003\u06b0\063" +
    "\u06af\064\u06ae\065\167\116\012\117\011\120\007\121\006" +
    "\122\005\001\002\000\006\003\u06b4\063\u06b5\001\002\000" +
    "\004\063\u06b3\001\002\000\006\003\ufdde\061\ufdde\001\002" +
    "\000\006\003\ufddd\061\ufddd\001\002\000\004\063\u06b2\001" +
    "\002\000\006\003\ufde0\061\ufde0\001\002\000\006\003\ufde1" +
    "\061\ufde1\001\002\000\006\003\ufddf\061\ufddf\001\002\000" +
    "\006\003\ufde2\061\ufde2\001\002\000\022\003\ufe0c\006\ufe0c" +
    "\061\ufe0c\116\ufe0c\117\ufe0c\120\ufe0c\121\ufe0c\122\ufe0c\001" +
    "\002\000\010\055\ufdd8\060\ufdd8\072\u06bb\001\002\000\010" +
    "\055\ufdda\060\ufdda\072\u06b9\001\002\000\026\003\u06a4\011" +
    "\u069b\013\u069a\023\u069d\030\u069c\116\012\117\011\120\007" +
    "\121\006\122\005\001\002\000\006\055\ufdd7\060\ufdd7\001" +
    "\002\000\026\003\u06a4\011\u069b\013\u069a\023\u069d\030\u069c" +
    "\116\012\117\011\120\007\121\006\122\005\001\002\000" +
    "\006\055\ufdd5\060\ufdd5\001\002\000\004\072\u06be\001\002" +
    "\000\026\003\u06a4\011\u069b\013\u069a\023\u069d\030\u069c\116" +
    "\012\117\011\120\007\121\006\122\005\001\002\000\006" +
    "\055\ufdd1\060\ufdd1\001\002\000\056\011\042\013\035\014" +
    "\051\015\101\020\066\023\071\024\070\027\102\030\043" +
    "\064\077\075\075\077\054\100\040\110\033\113\073\114" +
    "\060\115\041\116\012\117\011\120\007\121\006\122\005" +
    "\001\002\000\006\033\u06ac\061\u06c3\001\002\000\004\061" +
    "\u06c4\001\002\000\022\003\ufe17\006\ufe17\061\ufe17\116\ufe17" +
    "\117\ufe17\120\ufe17\121\ufe17\122\ufe17\001\002\000\022\003" +
    "\ufe13\006\ufe13\061\ufe13\116\ufe13\117\ufe13\120\ufe13\121\ufe13" +
    "\122\ufe13\001\002\000\026\003\u06a4\011\u069b\013\u069a\023" +
    "\u069d\030\u069c\116\012\117\011\120\007\121\006\122\005" +
    "\001\002\000\010\055\ufdd9\060\ufdd9\072\u06cc\001\002\000" +
    "\034\003\u06a4\011\u069b\013\u069a\023\u069d\030\u069c\055\ufddc" +
    "\060\ufddc\072\u06c8\116\012\117\011\120\007\121\006\122" +
    "\005\001\002\000\026\003\u06ca\011\u069b\013\u069a\023\u069d" +
    "\030\u069c\116\012\117\011\120\007\121\006\122\005\001" +
    "\002\000\006\055\ufdd3\060\ufdd3\001\002\000\010\055\ufdd4" +
    "\060\ufdd4\064\u06bd\001\002\000\006\055\ufddb\060\ufddb\001" +
    "\002\000\026\003\u06a4\011\u069b\013\u069a\023\u069d\030\u069c" +
    "\116\012\117\011\120\007\121\006\122\005\001\002\000" +
    "\006\055\ufdd6\060\ufdd6\001\002\000\006\055\ufdd2\060\ufdd2" +
    "\001\002\000\030\003\u06a4\011\u069b\013\u069a\023\u069d\030" +
    "\u069c\055\u06d0\116\012\117\011\120\007\121\006\122\005" +
    "\001\002\000\004\060\u06d8\001\002\000\004\055\u06d2\001" +
    "\002\000\004\060\u06d3\001\002\000\056\011\042\013\035" +
    "\014\051\015\101\020\066\023\071\024\070\027\102\030" +
    "\043\064\077\075\075\077\054\100\040\110\033\113\073" +
    "\114\060\115\041\116\012\117\011\120\007\121\006\122" +
    "\005\001\002\000\006\033\u06ac\061\u06d6\001\002\000\004" +
    "\061\u06d7\001\002\000\022\003\ufe02\006\ufe02\061\ufe02\116" +
    "\ufe02\117\ufe02\120\ufe02\121\ufe02\122\ufe02\001\002\000\022" +
    "\003\ufe09\006\ufe09\061\ufe09\116\ufe09\117\ufe09\120\ufe09\121" +
    "\ufe09\122\ufe09\001\002\000\056\011\042\013\035\014\051" +
    "\015\101\020\066\023\071\024\070\027\102\030\043\064" +
    "\077\075\075\077\054\100\040\110\033\113\073\114\060" +
    "\115\041\116\012\117\011\120\007\121\006\122\005\001" +
    "\002\000\004\033\u06ac\001\002\000\004\061\u06db\001\002" +
    "\000\022\003\ufe10\006\ufe10\061\ufe10\116\ufe10\117\ufe10\120" +
    "\ufe10\121\ufe10\122\ufe10\001\002\000\004\054\u06ea\001\002" +
    "\000\004\054\u06de\001\002\000\030\003\u06a4\011\u069b\013" +
    "\u069a\023\u069d\030\u069c\055\u06df\116\012\117\011\120\007" +
    "\121\006\122\005\001\002\000\004\060\u06e6\001\002\000" +
    "\004\055\u06e1\001\002\000\004\060\u06e2\001\002\000\056" +
    "\011\042\013\035\014\051\015\101\020\066\023\071\024" +
    "\070\027\102\030\043\064\077\075\075\077\054\100\040" +
    "\110\033\113\073\114\060\115\041\116\012\117\011\120" +
    "\007\121\006\122\005\001\002\000\004\033\u06ac\001\002" +
    "\000\004\061\u06e5\001\002\000\022\003\ufe0f\006\ufe0f\061" +
    "\ufe0f\116\ufe0f\117\ufe0f\120\ufe0f\121\ufe0f\122\ufe0f\001\002" +
    "\000\056\011\042\013\035\014\051\015\101\020\066\023" +
    "\071\024\070\027\102\030\043\064\077\075\075\077\054" +
    "\100\040\110\033\113\073\114\060\115\041\116\012\117" +
    "\011\120\007\121\006\122\005\001\002\000\004\033\u06ac" +
    "\001\002\000\004\061\u06e9\001\002\000\022\003\ufe16\006" +
    "\ufe16\061\ufe16\116\ufe16\117\ufe16\120\ufe16\121\ufe16\122\ufe16" +
    "\001\002\000\030\003\u06a4\011\u069b\013\u069a\023\u069d\030" +
    "\u069c\055\u06eb\116\012\117\011\120\007\121\006\122\005" +
    "\001\002\000\004\060\u06f2\001\002\000\004\055\u06ed\001" +
    "\002\000\004\060\u06ee\001\002\000\056\011\042\013\035" +
    "\014\051\015\101\020\066\023\071\024\070\027\102\030" +
    "\043\064\077\075\075\077\054\100\040\110\033\113\073" +
    "\114\060\115\041\116\012\117\011\120\007\121\006\122" +
    "\005\001\002\000\004\033\u06ac\001\002\000\004\061\u06f1" +
    "\001\002\000\022\003\ufe0b\006\ufe0b\061\ufe0b\116\ufe0b\117" +
    "\ufe0b\120\ufe0b\121\ufe0b\122\ufe0b\001\002\000\056\011\042" +
    "\013\035\014\051\015\101\020\066\023\071\024\070\027" +
    "\102\030\043\064\077\075\075\077\054\100\040\110\033" +
    "\113\073\114\060\115\041\116\012\117\011\120\007\121" +
    "\006\122\005\001\002\000\004\033\u06ac\001\002\000\004" +
    "\061\u06f5\001\002\000\022\003\ufe12\006\ufe12\061\ufe12\116" +
    "\ufe12\117\ufe12\120\ufe12\121\ufe12\122\ufe12\001\002\000\004" +
    "\054\u0702\001\002\000\004\054\u06f8\001\002\000\030\003" +
    "\u06a4\011\u069b\013\u069a\023\u069d\030\u069c\055\u06f9\116\012" +
    "\117\011\120\007\121\006\122\005\001\002\000\004\060" +
    "\u06ff\001\002\000\004\055\u06fb\001\002\000\004\060\u06fc" +
    "\001\002\000\056\011\042\013\035\014\051\015\101\020" +
    "\066\023\071\024\070\027\102\030\043\064\077\075\075" +
    "\077\054\100\040\110\033\113\073\114\060\115\041\116" +
    "\012\117\011\120\007\121\006\122\005\001\002\000\004" +
    "\061\u06fe\001\002\000\022\003\ufe08\006\ufe08\061\ufe08\116" +
    "\ufe08\117\ufe08\120\ufe08\121\ufe08\122\ufe08\001\002\000\056" +
    "\011\042\013\035\014\051\015\101\020\066\023\071\024" +
    "\070\027\102\030\043\064\077\075\075\077\054\100\040" +
    "\110\033\113\073\114\060\115\041\116\012\117\011\120" +
    "\007\121\006\122\005\001\002\000\004\061\u0701\001\002" +
    "\000\022\003\ufe19\006\ufe19\061\ufe19\116\ufe19\117\ufe19\120" +
    "\ufe19\121\ufe19\122\ufe19\001\002\000\026\003\u06a4\011\u069b" +
    "\013\u069a\023\u069d\030\u069c\116\012\117\011\120\007\121" +
    "\006\122\005\001\002\000\004\055\u0704\001\002\000\004" +
    "\060\u0705\001\002\000\056\011\042\013\035\014\051\015" +
    "\101\020\066\023\071\024\070\027\102\030\043\064\077" +
    "\075\075\077\054\100\040\110\033\113\073\114\060\115" +
    "\041\116\012\117\011\120\007\121\006\122\005\001\002" +
    "\000\004\061\u0707\001\002\000\022\003\ufe04\006\ufe04\061" +
    "\ufe04\116\ufe04\117\ufe04\120\ufe04\121\ufe04\122\ufe04\001\002" +
    "\000\022\003\u0787\054\u0788\064\u0786\116\012\117\011\120" +
    "\007\121\006\122\005\001\002\000\022\003\u0738\054\u0739" +
    "\064\u0737\116\012\117\011\120\007\121\006\122\005\001" +
    "\002\000\004\054\u0729\001\002\000\016\064\u070d\116\012" +
    "\117\011\120\007\121\006\122\005\001\002\000\004\054" +
    "\u071c\001\002\000\004\054\u070e\001\002\000\030\003\u06a4" +
    "\011\u069b\013\u069a\023\u069d\030\u069c\055\u070f\116\012\117" +
    "\011\120\007\121\006\122\005\001\002\000\004\060\u0717" +
    "\001\002\000\004\055\u0711\001\002\000\004\060\u0712\001" +
    "\002\000\056\011\042\013\035\014\051\015\101\020\066" +
    "\023\071\024\070\027\102\030\043\064\077\075\075\077" +
    "\054\100\040\110\033\113\073\114\060\115\041\116\012" +
    "\117\011\120\007\121\006\122\005\001\002\000\006\033" +
    "\u06ac\061\u0715\001\002\000\004\061\u0716\001\002\000\022" +
    "\003\ufe07\006\ufe07\061\ufe07\116\ufe07\117\ufe07\120\ufe07\121" +
    "\ufe07\122\ufe07\001\002\000\022\003\ufe0e\006\ufe0e\061\ufe0e" +
    "\116\ufe0e\117\ufe0e\120\ufe0e\121\ufe0e\122\ufe0e\001\002\000" +
    "\056\011\042\013\035\014\051\015\101\020\066\023\071" +
    "\024\070\027\102\030\043\064\077\075\075\077\054\100" +
    "\040\110\033\113\073\114\060\115\041\116\012\117\011" +
    "\120\007\121\006\122\005\001\002\000\006\033\u06ac\061" +
    "\u071a\001\002\000\004\061\u071b\001\002\000\022\003\ufe18" +
    "\006\ufe18\061\ufe18\116\ufe18\117\ufe18\120\ufe18\121\ufe18\122" +
    "\ufe18\001\002\000\022\003\ufe15\006\ufe15\061\ufe15\116\ufe15" +
    "\117\ufe15\120\ufe15\121\ufe15\122\ufe15\001\002\000\030\003" +
    "\u06a4\011\u069b\013\u069a\023\u069d\030\u069c\055\u071d\116\012" +
    "\117\011\120\007\121\006\122\005\001\002\000\004\060" +
    "\u0725\001\002\000\004\055\u071f\001\002\000\004\060\u0720" +
    "\001\002\000\056\011\042\013\035\014\051\015\101\020" +
    "\066\023\071\024\070\027\102\030\043\064\077\075\075" +
    "\077\054\100\040\110\033\113\073\114\060\115\041\116" +
    "\012\117\011\120\007\121\006\122\005\001\002\000\006" +
    "\033\u06ac\061\u0723\001\002\000\004\061\u0724\001\002\000" +
    "\022\003\ufe03\006\ufe03\061\ufe03\116\ufe03\117\ufe03\120\ufe03" +
    "\121\ufe03\122\ufe03\001\002\000\022\003\ufe0a\006\ufe0a\061" +
    "\ufe0a\116\ufe0a\117\ufe0a\120\ufe0a\121\ufe0a\122\ufe0a\001\002" +
    "\000\056\011\042\013\035\014\051\015\101\020\066\023" +
    "\071\024\070\027\102\030\043\064\077\075\075\077\054" +
    "\100\040\110\033\113\073\114\060\115\041\116\012\117" +
    "\011\120\007\121\006\122\005\001\002\000\004\033\u06ac" +
    "\001\002\000\004\061\u0728\001\002\000\022\003\ufe11\006" +
    "\ufe11\061\ufe11\116\ufe11\117\ufe11\120\ufe11\121\ufe11\122\ufe11" +
    "\001\002\000\030\003\u06a4\011\u069b\013\u069a\023\u069d\030" +
    "\u069c\055\u072a\116\012\117\011\120\007\121\006\122\005" +
    "\001\002\000\004\060\u0732\001\002\000\004\055\u072c\001" +
    "\002\000\004\060\u072d\001\002\000\056\011\042\013\035" +
    "\014\051\015\101\020\066\023\071\024\070\027\102\030" +
    "\043\064\077\075\075\077\054\100\040\110\033\113\073" +
    "\114\060\115\041\116\012\117\011\120\007\121\006\122" +
    "\005\001\002\000\006\033\u06ac\061\u0730\001\002\000\004" +
    "\061\u0731\001\002\000\022\003\ufde3\006\ufde3\061\ufde3\116" +
    "\ufde3\117\ufde3\120\ufde3\121\ufde3\122\ufde3\001\002\000\022" +
    "\003\ufdea\006\ufdea\061\ufdea\116\ufdea\117\ufdea\120\ufdea\121" +
    "\ufdea\122\ufdea\001\002\000\056\011\042\013\035\014\051" +
    "\015\101\020\066\023\071\024\070\027\102\030\043\064" +
    "\077\075\075\077\054\100\040\110\033\113\073\114\060" +
    "\115\041\116\012\117\011\120\007\121\006\122\005\001" +
    "\002\000\006\033\u06ac\061\u0735\001\002\000\004\061\u0736" +
    "\001\002\000\022\003\ufdfb\006\ufdfb\061\ufdfb\116\ufdfb\117" +
    "\ufdfb\120\ufdfb\121\ufdfb\122\ufdfb\001\002\000\022\003\ufdf3" +
    "\006\ufdf3\061\ufdf3\116\ufdf3\117\ufdf3\120\ufdf3\121\ufdf3\122" +
    "\ufdf3\001\002\000\032\003\u06a4\011\u069b\013\u069a\023\u069d" +
    "\030\u069c\054\u075a\055\u0759\116\012\117\011\120\007\121" +
    "\006\122\005\001\002\000\004\054\u0752\001\002\000\030" +
    "\003\u06a4\011\u069b\013\u069a\023\u069d\030\u069c\055\u0747\116" +
    "\012\117\011\120\007\121\006\122\005\001\002\000\004" +
    "\054\u073b\001\002\000\030\003\u06a4\011\u069b\013\u069a\023" +
    "\u069d\030\u069c\055\u073c\116\012\117\011\120\007\121\006" +
    "\122\005\001\002\000\004\060\u0743\001\002\000\004\055" +
    "\u073e\001\002\000\004\060\u073f\001\002\000\056\011\042" +
    "\013\035\014\051\015\101\020\066\023\071\024\070\027" +
    "\102\030\043\064\077\075\075\077\054\100\040\110\033" +
    "\113\073\114\060\115\041\116\012\117\011\120\007\121" +
    "\006\122\005\001\002\000\004\033\u06ac\001\002\000\004" +
    "\061\u0742\001\002\000\022\003\ufe0d\006\ufe0d\061\ufe0d\116" +
    "\ufe0d\117\ufe0d\120\ufe0d\121\ufe0d\122\ufe0d\001\002\000\056" +
    "\011\042\013\035\014\051\015\101\020\066\023\071\024" +
    "\070\027\102\030\043\064\077\075\075\077\054\100\040" +
    "\110\033\113\073\114\060\115\041\116\012\117\011\120" +
    "\007\121\006\122\005\001\002\000\004\033\u06ac\001\002" +
    "\000\004\061\u0746\001\002\000\022\003\ufe14\006\ufe14\061" +
    "\ufe14\116\ufe14\117\ufe14\120\ufe14\121\ufe14\122\ufe14\001\002" +
    "\000\004\060\u074e\001\002\000\004\055\u0749\001\002\000" +
    "\004\060\u074a\001\002\000\056\011\042\013\035\014\051" +
    "\015\101\020\066\023\071\024\070\027\102\030\043\064" +
    "\077\075\075\077\054\100\040\110\033\113\073\114\060" +
    "\115\041\116\012\117\011\120\007\121\006\122\005\001" +
    "\002\000\004\033\u06ac\001\002\000\004\061\u074d\001\002" +
    "\000\022\003\ufdec\006\ufdec\061\ufdec\116\ufdec\117\ufdec\120" +
    "\ufdec\121\ufdec\122\ufdec\001\002\000\056\011\042\013\035" +
    "\014\051\015\101\020\066\023\071\024\070\027\102\030" +
    "\043\064\077\075\075\077\054\100\040\110\033\113\073" +
    "\114\060\115\041\116\012\117\011\120\007\121\006\122" +
    "\005\001\002\000\004\033\u06ac\001\002\000\004\061\u0751" +
    "\001\002\000\022\003\ufdeb\006\ufdeb\061\ufdeb\116\ufdeb\117" +
    "\ufdeb\120\ufdeb\121\ufdeb\122\ufdeb\001\002\000\026\003\u06a4" +
    "\011\u069b\013\u069a\023\u069d\030\u069c\116\012\117\011\120" +
    "\007\121\006\122\005\001\002\000\004\055\u0754\001\002" +
    "\000\004\060\u0755\001\002\000\056\011\042\013\035\014" +
    "\051\015\101\020\066\023\071\024\070\027\102\030\043" +
    "\064\077\075\075\077\054\100\040\110\033\113\073\114" +
    "\060\115\041\116\012\117\011\120\007\121\006\122\005" +
    "\001\002\000\004\033\u06ac\001\002\000\004\061\u0758\001" +
    "\002\000\022\003\ufdf4\006\ufdf4\061\ufdf4\116\ufdf4\117\ufdf4" +
    "\120\ufdf4\121\ufdf4\122\ufdf4\001\002\000\004\060\u0782\001" +
    "\002\000\032\003\u06a4\011\u069b\013\u069a\023\u069d\030\u069c" +
    "\055\u0762\060\u0761\116\012\117\011\120\007\121\006\122" +
    "\005\001\002\000\004\055\u075c\001\002\000\004\060\u075d" +
    "\001\002\000\056\011\042\013\035\014\051\015\101\020" +
    "\066\023\071\024\070\027\102\030\043\064\077\075\075" +
    "\077\054\100\040\110\033\113\073\114\060\115\041\116" +
    "\012\117\011\120\007\121\006\122\005\001\002\000\004" +
    "\033\u06ac\001\002\000\004\061\u0760\001\002\000\022\003" +
    "\ufded\006\ufded\061\ufded\116\ufded\117\ufded\120\ufded\121\ufded" +
    "\122\ufded\001\002\000\056\011\042\013\035\014\051\015" +
    "\101\020\066\023\071\024\070\027\102\030\043\064\077" +
    "\075\075\077\054\100\040\110\033\113\073\114\060\115" +
    "\041\116\012\117\011\120\007\121\006\122\005\001\002" +
    "\000\060\011\042\013\035\014\051\015\101\020\066\023" +
    "\071\024\070\027\102\030\043\060\u0775\064\077\075\075" +
    "\077\054\100\040\110\033\113\073\114\060\115\041\116" +
    "\012\117\011\120\007\121\006\122\005\001\002\000\006" +
    "\055\u0764\060\u0765\001\002\000\060\011\042\013\035\014" +
    "\051\015\101\020\066\023\071\024\070\027\102\030\043" +
    "\060\u076a\064\077\075\075\077\054\100\040\110\033\113" +
    "\073\114\060\115\041\116\012\117\011\120\007\121\006" +
    "\122\005\001\002\000\056\011\042\013\035\014\051\015" +
    "\101\020\066\023\071\024\070\027\102\030\043\064\077" +
    "\075\075\077\054\100\040\110\033\113\073\114\060\115" +
    "\041\116\012\117\011\120\007\121\006\122\005\001\002" +
    "\000\004\033\u06ac\001\002\000\004\061\u0768\001\002\000" +
    "\022\003\ufdee\006\ufdee\061\ufdee\116\ufdee\117\ufdee\120\ufdee" +
    "\121\ufdee\122\ufdee\001\002\000\004\033\u06ac\001\002\000" +
    "\060\011\042\013\035\014\051\015\101\020\066\023\071" +
    "\024\070\027\102\030\043\033\u06ac\064\077\075\075\077" +
    "\054\100\040\110\033\113\073\114\060\115\041\116\012" +
    "\117\011\120\007\121\006\122\005\001\002\000\006\033" +
    "\u06ac\061\u076f\001\002\000\004\061\u076d\001\002\000\022" +
    "\003\ufdf0\006\ufdf0\061\ufdf0\116\ufdf0\117\ufdf0\120\ufdf0\121" +
    "\ufdf0\122\ufdf0\001\002\000\006\003\u0770\061\u0771\001\002" +
    "\000\022\003\ufdf1\006\ufdf1\061\ufdf1\116\ufdf1\117\ufdf1\120" +
    "\ufdf1\121\ufdf1\122\ufdf1\001\002\000\022\003\ufdf2\006\ufdf2" +
    "\061\ufdf2\116\ufdf2\117\ufdf2\120\ufdf2\121\ufdf2\122\ufdf2\001" +
    "\002\000\022\003\ufe1b\006\ufe1b\061\ufe1b\116\ufe1b\117\ufe1b" +
    "\120\ufe1b\121\ufe1b\122\ufe1b\001\002\000\004\061\u0773\001" +
    "\002\000\022\003\ufdef\006\ufdef\061\ufdef\116\ufdef\117\ufdef" +
    "\120\ufdef\121\ufdef\122\ufdef\001\002\000\004\033\u06ac\001" +
    "\002\000\060\011\042\013\035\014\051\015\101\020\066" +
    "\023\071\024\070\027\102\030\043\033\u06ac\064\077\075" +
    "\075\077\054\100\040\110\033\113\073\114\060\115\041" +
    "\116\012\117\011\120\007\121\006\122\005\001\002\000" +
    "\006\033\u06ac\061\u077a\001\002\000\004\061\u0778\001\002" +
    "\000\022\003\ufdf8\006\ufdf8\061\ufdf8\116\ufdf8\117\ufdf8\120" +
    "\ufdf8\121\ufdf8\122\ufdf8\001\002\000\006\003\u077b\061\u077c" +
    "\001\002\000\022\003\ufdf9\006\ufdf9\061\ufdf9\116\ufdf9\117" +
    "\ufdf9\120\ufdf9\121\ufdf9\122\ufdf9\001\002\000\022\003\ufdfa" +
    "\006\ufdfa\061\ufdfa\116\ufdfa\117\ufdfa\120\ufdfa\121\ufdfa\122" +
    "\ufdfa\001\002\000\022\003\ufe1c\006\ufe1c\061\ufe1c\116\ufe1c" +
    "\117\ufe1c\120\ufe1c\121\ufe1c\122\ufe1c\001\002\000\004\061" +
    "\u077e\001\002\000\022\003\ufdf7\006\ufdf7\061\ufdf7\116\ufdf7" +
    "\117\ufdf7\120\ufdf7\121\ufdf7\122\ufdf7\001\002\000\004\033" +
    "\u06ac\001\002\000\004\061\u0781\001\002\000\022\003\ufdf6" +
    "\006\ufdf6\061\ufdf6\116\ufdf6\117\ufdf6\120\ufdf6\121\ufdf6\122" +
    "\ufdf6\001\002\000\056\011\042\013\035\014\051\015\101" +
    "\020\066\023\071\024\070\027\102\030\043\064\077\075" +
    "\075\077\054\100\040\110\033\113\073\114\060\115\041" +
    "\116\012\117\011\120\007\121\006\122\005\001\002\000" +
    "\004\033\u06ac\001\002\000\004\061\u0785\001\002\000\022" +
    "\003\ufdf5\006\ufdf5\061\ufdf5\116\ufdf5\117\ufdf5\120\ufdf5\121" +
    "\ufdf5\122\ufdf5\001\002\000\032\003\u06a4\011\u069b\013\u069a" +
    "\023\u069d\030\u069c\054\u079b\055\u079a\116\012\117\011\120" +
    "\007\121\006\122\005\001\002\000\004\054\u0795\001\002" +
    "\000\026\003\u06a4\011\u069b\013\u069a\023\u069d\030\u069c\116" +
    "\012\117\011\120\007\121\006\122\005\001\002\000\004" +
    "\054\u078a\001\002\000\026\003\u06a4\011\u069b\013\u069a\023" +
    "\u069d\030\u069c\116\012\117\011\120\007\121\006\122\005" +
    "\001\002\000\004\055\u078c\001\002\000\004\060\u078d\001" +
    "\002\000\056\011\042\013\035\014\051\015\101\020\066" +
    "\023\071\024\070\027\102\030\043\064\077\075\075\077" +
    "\054\100\040\110\033\113\073\114\060\115\041\116\012" +
    "\117\011\120\007\121\006\122\005\001\002\000\004\061" +
    "\u078f\001\002\000\022\003\ufe06\006\ufe06\061\ufe06\116\ufe06" +
    "\117\ufe06\120\ufe06\121\ufe06\122\ufe06\001\002\000\004\055" +
    "\u0791\001\002\000\004\060\u0792\001\002\000\056\011\042" +
    "\013\035\014\051\015\101\020\066\023\071\024\070\027" +
    "\102\030\043\064\077\075\075\077\054\100\040\110\033" +
    "\113\073\114\060\115\041\116\012\117\011\120\007\121" +
    "\006\122\005\001\002\000\004\061\u0794\001\002\000\022" +
    "\003\ufde4\006\ufde4\061\ufde4\116\ufde4\117\ufde4\120\ufde4\121" +
    "\ufde4\122\ufde4\001\002\000\004\055\u0796\001\002\000\004" +
    "\060\u0797\001\002\000\056\011\042\013\035\014\051\015" +
    "\101\020\066\023\071\024\070\027\102\030\043\064\077" +
    "\075\075\077\054\100\040\110\033\113\073\114\060\115" +
    "\041\116\012\117\011\120\007\121\006\122\005\001\002" +
    "\000\004\061\u0799\001\002\000\022\003\ufdfc\006\ufdfc\061" +
    "\ufdfc\116\ufdfc\117\ufdfc\120\ufdfc\121\ufdfc\122\ufdfc\001\002" +
    "\000\004\060\u07b8\001\002\000\032\003\u06a4\011\u069b\013" +
    "\u069a\023\u069d\030\u069c\055\u07a2\060\u07a1\116\012\117\011" +
    "\120\007\121\006\122\005\001\002\000\004\055\u079d\001" +
    "\002\000\004\060\u079e\001\002\000\056\011\042\013\035" +
    "\014\051\015\101\020\066\023\071\024\070\027\102\030" +
    "\043\064\077\075\075\077\054\100\040\110\033\113\073" +
    "\114\060\115\041\116\012\117\011\120\007\121\006\122" +
    "\005\001\002\000\004\061\u07a0\001\002\000\022\003\ufde5" +
    "\006\ufde5\061\ufde5\116\ufde5\117\ufde5\120\ufde5\121\ufde5\122" +
    "\ufde5\001\002\000\056\011\042\013\035\014\051\015\101" +
    "\020\066\023\071\024\070\027\102\030\043\064\077\075" +
    "\075\077\054\100\040\110\033\113\073\114\060\115\041" +
    "\116\012\117\011\120\007\121\006\122\005\001\002\000" +
    "\060\011\042\013\035\014\051\015\101\020\066\023\071" +
    "\024\070\027\102\030\043\060\u07b0\064\077\075\075\077" +
    "\054\100\040\110\033\113\073\114\060\115\041\116\012" +
    "\117\011\120\007\121\006\122\005\001\002\000\006\055" +
    "\u07a4\060\u07a5\001\002\000\060\011\042\013\035\014\051" +
    "\015\101\020\066\023\071\024\070\027\102\030\043\060" +
    "\u07a9\064\077\075\075\077\054\100\040\110\033\113\073" +
    "\114\060\115\041\116\012\117\011\120\007\121\006\122" +
    "\005\001\002\000\056\011\042\013\035\014\051\015\101" +
    "\020\066\023\071\024\070\027\102\030\043\064\077\075" +
    "\075\077\054\100\040\110\033\113\073\114\060\115\041" +
    "\116\012\117\011\120\007\121\006\122\005\001\002\000" +
    "\004\061\u07a7\001\002\000\022\003\ufde6\006\ufde6\061\ufde6" +
    "\116\ufde6\117\ufde6\120\ufde6\121\ufde6\122\ufde6\001\002\000" +
    "\004\061\u07ae\001\002\000\060\011\042\013\035\014\051" +
    "\015\101\020\066\023\071\024\070\027\102\030\043\061" +
    "\u07ab\064\077\075\075\077\054\100\040\110\033\113\073" +
    "\114\060\115\041\116\012\117\011\120\007\121\006\122" +
    "\005\001\002\000\006\003\u07ac\061\u07ad\001\002\000\022" +
    "\003\ufde8\006\ufde8\061\ufde8\116\ufde8\117\ufde8\120\ufde8\121" +
    "\ufde8\122\ufde8\001\002\000\022\003\ufde9\006\ufde9\061\ufde9" +
    "\116\ufde9\117\ufde9\120\ufde9\121\ufde9\122\ufde9\001\002\000" +
    "\022\003\ufe1a\006\ufe1a\061\ufe1a\116\ufe1a\117\ufe1a\120\ufe1a" +
    "\121\ufe1a\122\ufe1a\001\002\000\022\003\ufde7\006\ufde7\061" +
    "\ufde7\116\ufde7\117\ufde7\120\ufde7\121\ufde7\122\ufde7\001\002" +
    "\000\004\061\u07b5\001\002\000\060\011\042\013\035\014" +
    "\051\015\101\020\066\023\071\024\070\027\102\030\043" +
    "\061\u07b2\064\077\075\075\077\054\100\040\110\033\113" +
    "\073\114\060\115\041\116\012\117\011\120\007\121\006" +
    "\122\005\001\002\000\006\003\u07b3\061\u07b4\001\002\000" +
    "\022\003\ufe00\006\ufe00\061\ufe00\116\ufe00\117\ufe00\120\ufe00" +
    "\121\ufe00\122\ufe00\001\002\000\022\003\ufe01\006\ufe01\061" +
    "\ufe01\116\ufe01\117\ufe01\120\ufe01\121\ufe01\122\ufe01\001\002" +
    "\000\022\003\ufe1d\006\ufe1d\061\ufe1d\116\ufe1d", 
    "\117", 
    "\ufe1d", 
    "\120", 
    "\ufe1d", 
    "\121", 
    "\ufe1d", 
    "\122", 
    "\ufe1d", 
    "\001", 
    "\002", 
    "\000", 
    "\022", 
    "\003", 
    "\ufdff", 
    "\006", 
    "\ufdff", 
    "\061", 
    "\ufdff", 
    "\116", 
    "\ufdff", 
    "\117", 
    "\ufdff", 
    "\120", 
    "\ufdff", 
    "\121", 
    "\ufdff", 
    "\122", 
    "\ufdff", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\061", 
    "\u07b7", 
    "\001", 
    "\002", 
    "\000", 
    "\022", 
    "\003", 
    "\ufdfe", 
    "\006", 
    "\ufdfe", 
    "\061", 
    "\ufdfe", 
    "\116", 
    "\ufdfe", 
    "\117", 
    "\ufdfe", 
    "\120", 
    "\ufdfe", 
    "\121", 
    "\ufdfe", 
    "\122", 
    "\ufdfe", 
    "\001", 
    "\002", 
    "\000", 
    "\056", 
    "\011", 
    "\042", 
    "\013", 
    "\035", 
    "\014", 
    "\051", 
    "\015", 
    "\101", 
    "\020", 
    "\066", 
    "\023", 
    "\071", 
    "\024", 
    "\070", 
    "\027", 
    "\102", 
    "\030", 
    "\043", 
    "\064", 
    "\077", 
    "\075", 
    "\075", 
    "\077", 
    "\054", 
    "\100", 
    "\040", 
    "\110", 
    "\033", 
    "\113", 
    "\073", 
    "\114", 
    "\060", 
    "\115", 
    "\041", 
    "\116", 
    "\012", 
    "\117", 
    "\011", 
    "\120", 
    "\007", 
    "\121", 
    "\006", 
    "\122", 
    "\005", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\061", 
    "\u07ba", 
    "\001", 
    "\002", 
    "\000", 
    "\022", 
    "\003", 
    "\ufdfd", 
    "\006", 
    "\ufdfd", 
    "\061", 
    "\ufdfd", 
    "\116", 
    "\ufdfd", 
    "\117", 
    "\ufdfd", 
    "\120", 
    "\ufdfd", 
    "\121", 
    "\ufdfd", 
    "\122", 
    "\ufdfd", 
    "\001", 
    "\002", 
    "\000", 
    "\006", 
    "\003", 
    "\ufff1", 
    "\061", 
    "\ufff1", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\002", 
    "\uffff", 
    "\001", 
    "\002", 
    "\000", 
    "\020", 
    "\021", 
    "\u07d3", 
    "\054", 
    "\u07d2", 
    "\116", 
    "\012", 
    "\117", 
    "\011", 
    "\120", 
    "\007", 
    "\121", 
    "\006", 
    "\122", 
    "\005", 
    "\001", 
    "\002", 
    "\000", 
    "\016", 
    "\021", 
    "\u07c6", 
    "\116", 
    "\012", 
    "\117", 
    "\011", 
    "\120", 
    "\007", 
    "\121", 
    "\006", 
    "\122", 
    "\005", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\054", 
    "\u07c0", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\055", 
    "\u07c1", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\060", 
    "\u07c2", 
    "\001", 
    "\002", 
    "\000", 
    "\056", 
    "\011", 
    "\042", 
    "\013", 
    "\035", 
    "\014", 
    "\051", 
    "\015", 
    "\101", 
    "\020", 
    "\066", 
    "\023", 
    "\071", 
    "\024", 
    "\070", 
    "\027", 
    "\102", 
    "\030", 
    "\043", 
    "\064", 
    "\077", 
    "\075", 
    "\075", 
    "\077", 
    "\054", 
    "\100", 
    "\040", 
    "\110", 
    "\033", 
    "\113", 
    "\073", 
    "\114", 
    "\060", 
    "\115", 
    "\041", 
    "\116", 
    "\012", 
    "\117", 
    "\011", 
    "\120", 
    "\007", 
    "\121", 
    "\006", 
    "\122", 
    "\005", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\061", 
    "\u07c4", 
    "\001", 
    "\002", 
    "\000", 
    "\022", 
    "\003", 
    "\ufe1e", 
    "\006", 
    "\ufe1e", 
    "\061", 
    "\ufe1e", 
    "\116", 
    "\ufe1e", 
    "\117", 
    "\ufe1e", 
    "\120", 
    "\ufe1e", 
    "\121", 
    "\ufe1e", 
    "\122", 
    "\ufe1e", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\054", 
    "\u07cc", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\054", 
    "\u07c7", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\055", 
    "\u07c8", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\060", 
    "\u07c9", 
    "\001", 
    "\002", 
    "\000", 
    "\056", 
    "\011", 
    "\042", 
    "\013", 
    "\035", 
    "\014", 
    "\051", 
    "\015", 
    "\101", 
    "\020", 
    "\066", 
    "\023", 
    "\071", 
    "\024", 
    "\070", 
    "\027", 
    "\102", 
    "\030", 
    "\043", 
    "\064", 
    "\077", 
    "\075", 
    "\075", 
    "\077", 
    "\054", 
    "\100", 
    "\040", 
    "\110", 
    "\033", 
    "\113", 
    "\073", 
    "\114", 
    "\060", 
    "\115", 
    "\041", 
    "\116", 
    "\012", 
    "\117", 
    "\011", 
    "\120", 
    "\007", 
    "\121", 
    "\006", 
    "\122", 
    "\005", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\061", 
    "\u07cb", 
    "\001", 
    "\002", 
    "\000", 
    "\022", 
    "\003", 
    "\ufe2a", 
    "\006", 
    "\ufe2a", 
    "\061", 
    "\ufe2a", 
    "\116", 
    "\ufe2a", 
    "\117", 
    "\ufe2a", 
    "\120", 
    "\ufe2a", 
    "\121", 
    "\ufe2a", 
    "\122", 
    "\ufe2a", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\055", 
    "\u07cd", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\060", 
    "\u07ce", 
    "\001", 
    "\002", 
    "\000", 
    "\056", 
    "\011", 
    "\042", 
    "\013", 
    "\035", 
    "\014", 
    "\051", 
    "\015", 
    "\101", 
    "\020", 
    "\066", 
    "\023", 
    "\071", 
    "\024", 
    "\070", 
    "\027", 
    "\102", 
    "\030", 
    "\043", 
    "\064", 
    "\077", 
    "\075", 
    "\075", 
    "\077", 
    "\054", 
    "\100", 
    "\040", 
    "\110", 
    "\033", 
    "\113", 
    "\073", 
    "\114", 
    "\060", 
    "\115", 
    "\041", 
    "\116", 
    "\012", 
    "\117", 
    "\011", 
    "\120", 
    "\007", 
    "\121", 
    "\006", 
    "\122", 
    "\005", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\061", 
    "\u07d0", 
    "\001", 
    "\002", 
    "\000", 
    "\022", 
    "\003", 
    "\ufe26", 
    "\006", 
    "\ufe26", 
    "\061", 
    "\ufe26", 
    "\116", 
    "\ufe26", 
    "\117", 
    "\ufe26", 
    "\120", 
    "\ufe26", 
    "\121", 
    "\ufe26", 
    "\122", 
    "\ufe26", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\054", 
    "\u07e8", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\055", 
    "\u07e4", 
    "\001", 
    "\002", 
    "\000", 
    "\006", 
    "\054", 
    "\u07d5", 
    "\055", 
    "\u07d4", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\060", 
    "\u07e1", 
    "\001", 
    "\002", 
    "\000", 
    "\006", 
    "\055", 
    "\u07d6", 
    "\060", 
    "\u07d7", 
    "\001", 
    "\002", 
    "\000", 
    "\060", 
    "\011", 
    "\042", 
    "\013", 
    "\035", 
    "\014", 
    "\051", 
    "\015", 
    "\101", 
    "\020", 
    "\066", 
    "\023", 
    "\071", 
    "\024", 
    "\070", 
    "\027", 
    "\102", 
    "\030", 
    "\043", 
    "\060", 
    "\u07db", 
    "\064", 
    "\077", 
    "\075", 
    "\075", 
    "\077", 
    "\054", 
    "\100", 
    "\040", 
    "\110", 
    "\033", 
    "\113", 
    "\073", 
    "\114", 
    "\060", 
    "\115", 
    "\041", 
    "\116", 
    "\012", 
    "\117", 
    "\011", 
    "\120", 
    "\007", 
    "\121", 
    "\006", 
    "\122", 
    "\005", 
    "\001", 
    "\002", 
    "\000", 
    "\056", 
    "\011", 
    "\042", 
    "\013", 
    "\035", 
    "\014", 
    "\051", 
    "\015", 
    "\101", 
    "\020", 
    "\066", 
    "\023", 
    "\071", 
    "\024", 
    "\070", 
    "\027", 
    "\102", 
    "\030", 
    "\043", 
    "\064", 
    "\077", 
    "\075", 
    "\075", 
    "\077", 
    "\054", 
    "\100", 
    "\040", 
    "\110", 
    "\033", 
    "\113", 
    "\073", 
    "\114", 
    "\060", 
    "\115", 
    "\041", 
    "\116", 
    "\012", 
    "\117", 
    "\011", 
    "\120", 
    "\007", 
    "\121", 
    "\006", 
    "\122", 
    "\005", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\061", 
    "\u07d9", 
    "\001", 
    "\002", 
    "\000", 
    "\022", 
    "\003", 
    "\ufe21", 
    "\006", 
    "\ufe21", 
    "\061", 
    "\ufe21", 
    "\116", 
    "\ufe21", 
    "\117", 
    "\ufe21", 
    "\120", 
    "\ufe21", 
    "\121", 
    "\ufe21", 
    "\122", 
    "\ufe21", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\061", 
    "\u07e0", 
    "\001", 
    "\002", 
    "\000", 
    "\060", 
    "\011", 
    "\042", 
    "\013", 
    "\035", 
    "\014", 
    "\051", 
    "\015", 
    "\101", 
    "\020", 
    "\066", 
    "\023", 
    "\071", 
    "\024", 
    "\070", 
    "\027", 
    "\102", 
    "\030", 
    "\043", 
    "\061", 
    "\u07dd", 
    "\064", 
    "\077", 
    "\075", 
    "\075", 
    "\077", 
    "\054", 
    "\100", 
    "\040", 
    "\110", 
    "\033", 
    "\113", 
    "\073", 
    "\114", 
    "\060", 
    "\115", 
    "\041", 
    "\116", 
    "\012", 
    "\117", 
    "\011", 
    "\120", 
    "\007", 
    "\121", 
    "\006", 
    "\122", 
    "\005", 
    "\001", 
    "\002", 
    "\000", 
    "\006", 
    "\003", 
    "\u07de", 
    "\061", 
    "\u07df", 
    "\001", 
    "\002", 
    "\000", 
    "\022", 
    "\003", 
    "\ufe23", 
    "\006", 
    "\ufe23", 
    "\061", 
    "\ufe23", 
    "\116", 
    "\ufe23", 
    "\117", 
    "\ufe23", 
    "\120", 
    "\ufe23", 
    "\121", 
    "\ufe23", 
    "\122", 
    "\ufe23", 
    "\001", 
    "\002", 
    "\000", 
    "\022", 
    "\003", 
    "\ufe24", 
    "\006", 
    "\ufe24", 
    "\061", 
    "\ufe24", 
    "\116", 
    "\ufe24", 
    "\117", 
    "\ufe24", 
    "\120", 
    "\ufe24", 
    "\121", 
    "\ufe24", 
    "\122", 
    "\ufe24", 
    "\001", 
    "\002", 
    "\000", 
    "\022", 
    "\003", 
    "\ufe2c", 
    "\006", 
    "\ufe2c", 
    "\061", 
    "\ufe2c", 
    "\116", 
    "\ufe2c", 
    "\117", 
    "\ufe2c", 
    "\120", 
    "\ufe2c", 
    "\121", 
    "\ufe2c", 
    "\122", 
    "\ufe2c", 
    "\001", 
    "\002", 
    "\000", 
    "\022", 
    "\003", 
    "\ufe22", 
    "\006", 
    "\ufe22", 
    "\061", 
    "\ufe22", 
    "\116", 
    "\ufe22", 
    "\117", 
    "\ufe22", 
    "\120", 
    "\ufe22", 
    "\121", 
    "\ufe22", 
    "\122", 
    "\ufe22", 
    "\001", 
    "\002", 
    "\000", 
    "\056", 
    "\011", 
    "\042", 
    "\013", 
    "\035", 
    "\014", 
    "\051", 
    "\015", 
    "\101", 
    "\020", 
    "\066", 
    "\023", 
    "\071", 
    "\024", 
    "\070", 
    "\027", 
    "\102", 
    "\030", 
    "\043", 
    "\064", 
    "\077", 
    "\075", 
    "\075", 
    "\077", 
    "\054", 
    "\100", 
    "\040", 
    "\110", 
    "\033", 
    "\113", 
    "\073", 
    "\114", 
    "\060", 
    "\115", 
    "\041", 
    "\116", 
    "\012", 
    "\117", 
    "\011", 
    "\120", 
    "\007", 
    "\121", 
    "\006", 
    "\122", 
    "\005", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\061", 
    "\u07e3", 
    "\001", 
    "\002", 
    "\000", 
    "\022", 
    "\003", 
    "\ufe20", 
    "\006", 
    "\ufe20", 
    "\061", 
    "\ufe20", 
    "\116", 
    "\ufe20", 
    "\117", 
    "\ufe20", 
    "\120", 
    "\ufe20", 
    "\121", 
    "\ufe20", 
    "\122", 
    "\ufe20", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\060", 
    "\u07e5", 
    "\001", 
    "\002", 
    "\000", 
    "\056", 
    "\011", 
    "\042", 
    "\013", 
    "\035", 
    "\014", 
    "\051", 
    "\015", 
    "\101", 
    "\020", 
    "\066", 
    "\023", 
    "\071", 
    "\024", 
    "\070", 
    "\027", 
    "\102", 
    "\030", 
    "\043", 
    "\064", 
    "\077", 
    "\075", 
    "\075", 
    "\077", 
    "\054", 
    "\100", 
    "\040", 
    "\110", 
    "\033", 
    "\113", 
    "\073", 
    "\114", 
    "\060", 
    "\115", 
    "\041", 
    "\116", 
    "\012", 
    "\117", 
    "\011", 
    "\120", 
    "\007", 
    "\121", 
    "\006", 
    "\122", 
    "\005", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\061", 
    "\u07e7", 
    "\001", 
    "\002", 
    "\000", 
    "\022", 
    "\003", 
    "\ufe1f", 
    "\006", 
    "\ufe1f", 
    "\061", 
    "\ufe1f", 
    "\116", 
    "\ufe1f", 
    "\117", 
    "\ufe1f", 
    "\120", 
    "\ufe1f", 
    "\121", 
    "\ufe1f", 
    "\122", 
    "\ufe1f", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\055", 
    "\u07e9", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\060", 
    "\u07ea", 
    "\001", 
    "\002", 
    "\000", 
    "\056", 
    "\011", 
    "\042", 
    "\013", 
    "\035", 
    "\014", 
    "\051", 
    "\015", 
    "\101", 
    "\020", 
    "\066", 
    "\023", 
    "\071", 
    "\024", 
    "\070", 
    "\027", 
    "\102", 
    "\030", 
    "\043", 
    "\064", 
    "\077", 
    "\075", 
    "\075", 
    "\077", 
    "\054", 
    "\100", 
    "\040", 
    "\110", 
    "\033", 
    "\113", 
    "\073", 
    "\114", 
    "\060", 
    "\115", 
    "\041", 
    "\116", 
    "\012", 
    "\117", 
    "\011", 
    "\120", 
    "\007", 
    "\121", 
    "\006", 
    "\122", 
    "\005", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\061", 
    "\u07ec", 
    "\001", 
    "\002", 
    "\000", 
    "\022", 
    "\003", 
    "\ufe29", 
    "\006", 
    "\ufe29", 
    "\061", 
    "\ufe29", 
    "\116", 
    "\ufe29", 
    "\117", 
    "\ufe29", 
    "\120", 
    "\ufe29", 
    "\121", 
    "\ufe29", 
    "\122", 
    "\ufe29", 
    "\001", 
    "\002", 
    "\000", 
    "\016", 
    "\006", 
    "\020", 
    "\116", 
    "\012", 
    "\117", 
    "\011", 
    "\120", 
    "\007", 
    "\121", 
    "\006", 
    "\122", 
    "\005", 
    "\001", 
    "\002", 
    "\000", 
    "\016", 
    "\006", 
    "\u0696", 
    "\116", 
    "\012", 
    "\117", 
    "\011", 
    "\120", 
    "\007", 
    "\121", 
    "\006", 
    "\122", 
    "\005", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\061", 
    "\u07f0", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\002", 
    "\ufffd", 
    "\001", 
    "\002", 
    "\000", 
    "\016", 
    "\006", 
    "\020", 
    "\116", 
    "\012", 
    "\117", 
    "\011", 
    "\120", 
    "\007", 
    "\121", 
    "\006", 
    "\122", 
    "\005", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\060", 
    "\u0818", 
    "\001", 
    "\002", 
    "\000", 
    "\020", 
    "\006", 
    "\020", 
    "\060", 
    "\u07f4", 
    "\116", 
    "\012", 
    "\117", 
    "\011", 
    "\120", 
    "\007", 
    "\121", 
    "\006", 
    "\122", 
    "\005", 
    "\001", 
    "\002", 
    "\000", 
    "\022", 
    "\003", 
    "\u07fc", 
    "\006", 
    "\u07fd", 
    "\061", 
    "\u07f9", 
    "\116", 
    "\012", 
    "\117", 
    "\011", 
    "\120", 
    "\007", 
    "\121", 
    "\006", 
    "\122", 
    "\005", 
    "\001", 
    "\002", 
    "\000", 
    "\020", 
    "\006", 
    "\u0696", 
    "\061", 
    "\u07f6", 
    "\116", 
    "\012", 
    "\117", 
    "\011", 
    "\120", 
    "\007", 
    "\121", 
    "\006", 
    "\122", 
    "\005", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\002", 
    "\ufff8", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\061", 
    "\u07f8", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\002", 
    "\ufff9", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\002", 
    "\ufff3", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\061", 
    "\u0817", 
    "\001", 
    "\002", 
    "\000", 
    "\022", 
    "\003", 
    "\u0814", 
    "\006", 
    "\u0696", 
    "\061", 
    "\u0812", 
    "\116", 
    "\012", 
    "\117", 
    "\011", 
    "\120", 
    "\007", 
    "\121", 
    "\006", 
    "\122", 
    "\005", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\002", 
    "\ufff4", 
    "\001", 
    "\002", 
    "\000", 
    "\032", 
    "\011", 
    "\u069b", 
    "\013", 
    "\u069a", 
    "\021", 
    "\u07bf", 
    "\023", 
    "\u069d", 
    "\026", 
    "\u0808", 
    "\030", 
    "\u069c", 
    "\064", 
    "\u070a", 
    "\116", 
    "\012", 
    "\117", 
    "\011", 
    "\120", 
    "\007", 
    "\121", 
    "\006", 
    "\122", 
    "\005", 
    "\001", 
    "\002", 
    "\000", 
    "\026", 
    "\011", 
    "\u069b", 
    "\013", 
    "\u069a", 
    "\023", 
    "\u069d", 
    "\026", 
    "\u07ff", 
    "\030", 
    "\u069c", 
    "\116", 
    "\012", 
    "\117", 
    "\011", 
    "\120", 
    "\007", 
    "\121", 
    "\006", 
    "\122", 
    "\005", 
    "\001", 
    "\002", 
    "\000", 
    "\020", 
    "\021", 
    "\u0689", 
    "\064", 
    "\u06f7", 
    "\116", 
    "\012", 
    "\117", 
    "\011", 
    "\120", 
    "\007", 
    "\121", 
    "\006", 
    "\122", 
    "\005", 
    "\001", 
    "\002", 
    "\000", 
    "\020", 
    "\021", 
    "\026", 
    "\064", 
    "\u06a0", 
    "\116", 
    "\012", 
    "\117", 
    "\011", 
    "\120", 
    "\007", 
    "\121", 
    "\006", 
    "\122", 
    "\005", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\054", 
    "\u0802", 
    "\001", 
    "\002", 
    "\000", 
    "\030", 
    "\003", 
    "\u06a4", 
    "\011", 
    "\u069b", 
    "\013", 
    "\u069a", 
    "\023", 
    "\u069d", 
    "\030", 
    "\u069c", 
    "\055", 
    "\u0803", 
    "\116", 
    "\012", 
    "\117", 
    "\011", 
    "\120", 
    "\007", 
    "\121", 
    "\006", 
    "\122", 
    "\005", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\060", 
    "\u0804", 
    "\001", 
    "\002", 
    "\000", 
    "\056", 
    "\011", 
    "\042", 
    "\013", 
    "\035", 
    "\014", 
    "\051", 
    "\015", 
    "\101", 
    "\020", 
    "\066", 
    "\023", 
    "\071", 
    "\024", 
    "\070", 
    "\027", 
    "\102", 
    "\030", 
    "\043", 
    "\064", 
    "\077", 
    "\075", 
    "\075", 
    "\077", 
    "\054", 
    "\100", 
    "\040", 
    "\110", 
    "\033", 
    "\113", 
    "\073", 
    "\114", 
    "\060", 
    "\115", 
    "\041", 
    "\116", 
    "\012", 
    "\117", 
    "\011", 
    "\120", 
    "\007", 
    "\121", 
    "\006", 
    "\122", 
    "\005", 
    "\001", 
    "\002", 
    "\000", 
    "\006", 
    "\033", 
    "\u06ac", 
    "\061", 
    "\u0687", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\054", 
    "\u0807", 
    "\001", 
    "\002", 
    "\000", 
    "\030", 
    "\003", 
    "\u06a4", 
    "\011", 
    "\u069b", 
    "\013", 
    "\u069a", 
    "\023", 
    "\u069d", 
    "\030", 
    "\u069c", 
    "\055", 
    "\u0690", 
    "\116", 
    "\012", 
    "\117", 
    "\011", 
    "\120", 
    "\007", 
    "\121", 
    "\006", 
    "\122", 
    "\005", 
    "\001", 
    "\002", 
    "\000", 
    "\024", 
    "\003", 
    "\u0787", 
    "\021", 
    "\u07d3", 
    "\054", 
    "\u080f", 
    "\064", 
    "\u0786", 
    "\116", 
    "\012", 
    "\117", 
    "\011", 
    "\120", 
    "\007", 
    "\121", 
    "\006", 
    "\122", 
    "\005", 
    "\001", 
    "\002", 
    "\000", 
    "\020", 
    "\021", 
    "\u07c6", 
    "\064", 
    "\u070d", 
    "\116", 
    "\012", 
    "\117", 
    "\011", 
    "\120", 
    "\007", 
    "\121", 
    "\006", 
    "\122", 
    "\005", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\054", 
    "\u080b", 
    "\001", 
    "\002", 
    "\000", 
    "\030", 
    "\003", 
    "\u06a4", 
    "\011", 
    "\u069b", 
    "\013", 
    "\u069a", 
    "\023", 
    "\u069d", 
    "\030", 
    "\u069c", 
    "\055", 
    "\u080c", 
    "\116", 
    "\012", 
    "\117", 
    "\011", 
    "\120", 
    "\007", 
    "\121", 
    "\006", 
    "\122", 
    "\005", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\060", 
    "\u080d", 
    "\001", 
    "\002", 
    "\000", 
    "\056", 
    "\011", 
    "\042", 
    "\013", 
    "\035", 
    "\014", 
    "\051", 
    "\015", 
    "\101", 
    "\020", 
    "\066", 
    "\023", 
    "\071", 
    "\024", 
    "\070", 
    "\027", 
    "\102", 
    "\030", 
    "\043", 
    "\064", 
    "\077", 
    "\075", 
    "\075", 
    "\077", 
    "\054", 
    "\100", 
    "\040", 
    "\110", 
    "\033", 
    "\113", 
    "\073", 
    "\114", 
    "\060", 
    "\115", 
    "\041", 
    "\116", 
    "\012", 
    "\117", 
    "\011", 
    "\120", 
    "\007", 
    "\121", 
    "\006", 
    "\122", 
    "\005", 
    "\001", 
    "\002", 
    "\000", 
    "\006", 
    "\033", 
    "\u06ac", 
    "\061", 
    "\u07d0", 
    "\001", 
    "\002", 
    "\000", 
    "\030", 
    "\003", 
    "\u06a4", 
    "\011", 
    "\u069b", 
    "\013", 
    "\u069a", 
    "\023", 
    "\u069d", 
    "\030", 
    "\u069c", 
    "\055", 
    "\u07e4", 
    "\116", 
    "\012", 
    "\117", 
    "\011", 
    "\120", 
    "\007", 
    "\121", 
    "\006", 
    "\122", 
    "\005", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\054", 
    "\u0811", 
    "\001", 
    "\002", 
    "\000", 
    "\030", 
    "\003", 
    "\u06a4", 
    "\011", 
    "\u069b", 
    "\013", 
    "\u069a", 
    "\023", 
    "\u069d", 
    "\030", 
    "\u069c", 
    "\055", 
    "\u07e9", 
    "\116", 
    "\012", 
    "\117", 
    "\011", 
    "\120", 
    "\007", 
    "\121", 
    "\006", 
    "\122", 
    "\005", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\002", 
    "\ufffc", 
    "\001", 
    "\002", 
    "\000", 
    "\006", 
    "\003", 
    "\u0815", 
    "\061", 
    "\u0816", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\002", 
    "\ufff5", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\002", 
    "\ufff6", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\002", 
    "\000", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\002", 
    "\ufff7", 
    "\001", 
    "\002", 
    "\000", 
    "\016", 
    "\006", 
    "\020", 
    "\116", 
    "\012", 
    "\117", 
    "\011", 
    "\120", 
    "\007", 
    "\121", 
    "\006", 
    "\122", 
    "\005", 
    "\001", 
    "\002", 
    "\000", 
    "\016", 
    "\006", 
    "\u0696", 
    "\116", 
    "\012", 
    "\117", 
    "\011", 
    "\120", 
    "\007", 
    "\121", 
    "\006", 
    "\122", 
    "\005", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\061", 
    "\u081b", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\002", 
    "\ufffe", 
    "\001", 
    "\002", 
    "\000", 
    "\020", 
    "\006", 
    "\u0696", 
    "\061", 
    "\u081d", 
    "\116", 
    "\012", 
    "\117", 
    "\011", 
    "\120", 
    "\007", 
    "\121", 
    "\006", 
    "\122", 
    "\005", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\002", 
    "\ufffa", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\061", 
    "\u081f", 
    "\001", 
    "\002", 
    "\000", 
    "\004", 
    "\002", 
    "\ufffb", 
    "\001", 
    "\002", 
    "" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\u081d\000\006\002\012\046\007\001\001\000\004\046" +
    "\u07f1\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\014\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\042\020\046\021\001" +
    "\001\000\004\046\u07bd\001\001\000\010\032\u0694\044\u0693" +
    "\046\u0696\001\001\000\004\046\023\001\001\000\004\046" +
    "\u0687\001\001\000\004\046\024\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\003\044\004\045\005\046\006\031\011\052\015\035" +
    "\016\047\020\066\023\075\024\054\031\043\043\064\045" +
    "\033\046\056\052\071\054\073\055\055\056\060\057\063" +
    "\060\062\061\061\062\036\065\051\066\077\001\001\000" +
    "\062\003\u0681\004\045\005\046\006\031\011\052\015\035" +
    "\016\047\020\066\023\075\024\054\031\043\043\064\045" +
    "\033\046\056\052\071\054\073\055\055\056\060\057\063" +
    "\060\062\061\061\062\036\065\051\066\077\001\001\000" +
    "\006\046\u0114\063\u0677\001\001\000\062\003\u0676\004\045" +
    "\005\046\006\031\011\052\015\035\016\047\020\066\023" +
    "\075\024\054\031\043\043\064\045\033\046\056\052\071" +
    "\054\073\055\055\056\060\057\063\060\062\061\061\062" +
    "\036\065\051\066\077\001\001\000\004\046\u0623\001\001" +
    "\000\062\003\u0619\004\045\005\046\006\031\011\052\015" +
    "\035\016\047\020\066\023\075\024\054\031\043\043\064" +
    "\045\033\046\056\052\071\054\073\055\055\056\060\057" +
    "\063\060\062\061\061\062\036\065\051\066\077\001\001" +
    "\000\062\003\u0618\004\045\005\046\006\031\011\052\015" +
    "\035\016\047\020\066\023\075\024\054\031\043\043\064" +
    "\045\033\046\056\052\071\054\073\055\055\056\060\057" +
    "\063\060\062\061\061\062\036\065\051\066\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\u05b2\001" +
    "\001\000\004\046\u054d\001\001\000\062\003\u0543\004\045" +
    "\005\046\006\031\011\052\015\035\016\047\020\066\023" +
    "\075\024\054\031\043\043\064\045\033\046\056\052\071" +
    "\054\073\055\055\056\060\057\063\060\062\061\061\062" +
    "\036\065\051\066\077\001\001\000\002\001\001\000\062" +
    "\003\u0541\004\045\005\046\006\031\011\052\015\035\016" +
    "\047\020\066\023\075\024\054\031\043\043\064\045\033" +
    "\046\056\052\071\054\073\055\055\056\060\057\063\060" +
    "\062\061\061\062\036\065\051\066\077\001\001\000\062" +
    "\003\u0540\004\045\005\046\006\031\011\052\015\035\016" +
    "\047\020\066\023\075\024\054\031\043\043\064\045\033" +
    "\046\056\052\071\054\073\055\055\056\060\057\063\060" +
    "\062\061\061\062\036\065\051\066\077\001\001\000\062" +
    "\003\u053f\004\045\005\046\006\031\011\052\015\035\016" +
    "\047\020\066\023\075\024\054\031\043\043\064\045\033" +
    "\046\056\052\071\054\073\055\055\056\060\057\063\060" +
    "\062\061\061\062\036\065\051\066\077\001\001\000\002" +
    "\001\001\000\062\003\u0352\004\045\005\046\006\031\011" +
    "\052\015\035\016\047\020\066\023\075\024\054\031\043" +
    "\043\064\045\033\046\056\052\071\054\073\055\055\056" +
    "\060\057\063\060\062\061\061\062\036\065\051\066\077" +
    "\001\001\000\062\003\u0344\004\045\005\046\006\031\011" +
    "\052\015\035\016\047\020\066\023\075\024\054\031\043" +
    "\043\064\045\033\046\u0345\052\071\054\073\055\055\056" +
    "\060\057\063\060\062\061\061\062\036\065\051\066\077" +
    "\001\001\000\002\001\001\000\062\003\u0339\004\045\005" +
    "\046\006\031\011\052\015\035\016\047\020\066\023\075" +
    "\024\054\031\043\043\064\045\033\046\056\052\071\054" +
    "\073\055\055\056\060\057\063\060\062\061\061\062\036" +
    "\065\051\066\077\001\001\000\062\003\u0338\004\045\005" +
    "\046\006\031\011\052\015\035\016\047\020\066\023\075" +
    "\024\054\031\043\043\064\045\033\046\056\052\071\054" +
    "\073\055\055\056\060\057\063\060\062\061\061\062\036" +
    "\065\051\066\077\001\001\000\004\046\u01f3\001\001\000" +
    "\002\001\001\000\062\003\u01e8\004\045\005\046\006\031" +
    "\011\052\015\035\016\047\020\066\023\075\024\054\031" +
    "\043\043\064\045\033\046\056\052\071\054\073\055\055" +
    "\056\060\057\063\060\062\061\061\062\036\065\051\066" +
    "\077\001\001\000\062\003\u01e7\004\045\005\046\006\031" +
    "\011\052\015\035\016\047\020\066\023\075\024\054\031" +
    "\043\043\064\045\033\046\056\052\071\054\073\055\055" +
    "\056\060\057\063\060\062\061\061\062\036\065\051\066" +
    "\077\001\001\000\062\003\u01e6\004\045\005\046\006\031" +
    "\011\052\015\035\016\047\020\066\023\075\024\054\031" +
    "\043\043\064\045\033\046\056\052\071\054\073\055\055" +
    "\056\060\057\063\060\062\061\061\062\036\065\051\066" +
    "\077\001\001\000\062\003\u01e5\004\045\005\046\006\031" +
    "\011\052\015\035\016\047\020\066\023\075\024\054\031" +
    "\043\043\064\045\033\046\056\052\071\054\073\055\055" +
    "\056\060\057\063\060\062\061\061\062\036\065\051\066" +
    "\077\001\001\000\062\003\u01e4\004\045\005\046\006\031" +
    "\011\052\015\035\016\047\020\066\023\075\024\054\031" +
    "\043\043\064\045\033\046\056\052\071\054\073\055\055" +
    "\056\060\057\063\060\062\061\061\062\036\065\051\066" +
    "\077\001\001\000\012\007\u01c9\010\u01cf\040\u01ca\046\u01ce" +
    "\001\001\000\062\003\u01c8\004\045\005\046\006\031\011" +
    "\052\015\035\016\047\020\066\023\075\024\054\031\043" +
    "\043\064\045\033\046\056\052\071\054\073\055\055\056" +
    "\060\057\063\060\062\061\061\062\036\065\051\066\077" +
    "\001\001\000\062\003\u017a\004\045\005\046\006\031\011" +
    "\052\015\035\016\047\020\066\023\075\024\054\031\043" +
    "\043\064\045\033\046\056\052\071\054\073\055\055\056" +
    "\060\057\063\060\062\061\061\062\036\065\051\066\077" +
    "\001\001\000\004\046\u012c\001\001\000\062\003\u0122\004" +
    "\045\005\046\006\031\011\052\015\035\016\047\020\066" +
    "\023\075\024\054\031\043\043\064\045\033\046\056\052" +
    "\071\054\073\055\055\056\060\057\063\060\062\061\061" +
    "\062\036\065\051\066\077\001\001\000\006\046\u0114\063" +
    "\u0112\001\001\000\062\003\u0110\004\045\005\046\006\031" +
    "\011\052\015\035\016\047\020\066\023\075\024\054\031" +
    "\043\043\064\045\033\046\056\052\071\054\073\055\055" +
    "\056\060\057\063\060\062\061\061\062\036\065\051\066" +
    "\077\001\001\000\002\001\001\000\062\003\u0108\004\045" +
    "\005\046\006\031\011\052\015\035\016\047\020\066\023" +
    "\075\024\054\031\043\043\064\045\033\046\056\052\071" +
    "\054\073\055\055\056\060\057\063\060\062\061\061\062" +
    "\036\065\051\066\077\001\001\000\006\007\307\040\310" +
    "\001\001\000\062\003\305\004\045\005\046\006\031\011" +
    "\052\015\035\016\047\020\066\023\075\024\054\031\043" +
    "\043\064\045\033\046\056\052\071\054\073\055\055\056" +
    "\060\057\063\060\062\061\061\062\036\065\051\066\077" +
    "\001\001\000\006\012\252\046\110\001\001\000\006\012" +
    "\106\046\110\001\001\000\004\013\245\001\001\000\012" +
    "\013\175\036\177\041\206\046\152\001\001\000\004\013" +
    "\170\001\001\000\006\036\151\046\152\001\001\000\002" +
    "\001\001\000\006\012\126\046\110\001\001\000\004\013" +
    "\115\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\124\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\003\133" +
    "\004\045\005\046\006\031\011\052\015\035\016\047\020" +
    "\066\023\075\024\054\031\043\043\064\045\033\046\056" +
    "\052\071\054\073\055\055\056\060\057\063\060\062\061" +
    "\061\062\036\065\051\066\077\001\001\000\062\003\131" +
    "\004\045\005\046\006\031\011\052\015\035\016\047\020" +
    "\066\023\075\024\054\031\043\043\064\045\033\046\056" +
    "\052\071\054\073\055\055\056\060\057\063\060\062\061" +
    "\061\062\036\065\051\066\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\003\135\004" +
    "\045\005\046\006\031\011\052\015\035\016\047\020\066" +
    "\023\075\024\054\031\043\043\064\045\033\046\056\052" +
    "\071\054\073\055\055\056\060\057\063\060\062\061\061" +
    "\062\036\065\051\066\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\003\143\004\045\005\046\006\031\011" +
    "\052\015\035\016\047\020\066\023\075\024\054\031\043" +
    "\043\064\045\033\046\056\052\071\054\073\055\055\056" +
    "\060\057\063\060\062\061\061\062\036\065\051\066\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\003\147\004\045\005\046\006\031\011\052" +
    "\015\035\016\047\020\066\023\075\024\054\031\043\043" +
    "\064\045\033\046\056\052\071\054\073\055\055\056\060" +
    "\057\063\060\062\061\061\062\036\065\051\066\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\013\161" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\007\165\040\163\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\046" +
    "\174\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\244\001\001\000" +
    "\002\001\001\000\004\013\236\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\014\007\212\013\211\036\214\037\210\046\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\013\225\001\001\000\006\007\224\040\223\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\007\216\013" +
    "\215\040\217\001\001\000\006\007\222\040\221\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\007\233\040\232\001\001\000\004\013" +
    "\227\001\001\000\006\007\231\040\230\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\240" +
    "\040\237\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\251\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\012\256\046\110\001\001\000\002\001" +
    "\001\000\012\013\175\036\177\041\206\046\152\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\003\261\004" +
    "\045\005\046\006\031\011\052\015\035\016\047\020\066" +
    "\023\075\024\054\031\043\043\064\045\033\046\056\052" +
    "\071\054\073\055\055\056\060\057\063\060\062\061\061" +
    "\062\036\065\051\066\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\003\264\004\045\005\046\006\031" +
    "\011\052\015\035\016\047\020\066\023\075\024\054\031" +
    "\043\043\064\045\033\046\056\052\071\054\073\055\055" +
    "\056\060\057\063\060\062\061\061\062\036\065\051\066" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\007\212\013\211\036" +
    "\271\037\210\046\152\001\001\000\010\007\216\013\215" +
    "\040\217\001\001\000\002\001\001\000\062\003\274\004" +
    "\045\005\046\006\031\011\052\015\035\016\047\020\066" +
    "\023\075\024\054\031\043\043\064\045\033\046\056\052" +
    "\071\054\073\055\055\056\060\057\063\060\062\061\061" +
    "\062\036\065\051\066\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\003\277\004\045\005\046\006\031" +
    "\011\052\015\035\016\047\020\066\023\075\024\054\031" +
    "\043\043\064\045\033\046\056\052\071\054\073\055\055" +
    "\056\060\057\063\060\062\061\061\062\036\065\051\066" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\003\303\004\045\005\046\006\031\011" +
    "\052\015\035\016\047\020\066\023\075\024\054\031\043" +
    "\043\064\045\033\046\056\052\071\054\073\055\055\056" +
    "\060\057\063\060\062\061\061\062\036\065\051\066\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\331\040\333\046\335\050\336\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\051\373\001\001\000\004\051" +
    "\371\001\001\000\012\040\353\046\355\050\367\051\366" +
    "\001\001\000\010\040\353\046\355\050\356\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\040\353\046\355" +
    "\050\360\001\001\000\002\001\001\000\004\051\343\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\040\353\046" +
    "\355\050\352\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\040\353\046\355" +
    "\050\360\001\001\000\010\040\353\046\355\050\356\001" +
    "\001\000\004\051\343\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\040\353\046\355\050\370\001\001\000\002\001" +
    "\001\000\002\001\001\000\010\040\353\046\355\050\372" +
    "\001\001\000\002\001\001\000\010\040\353\046\355\050" +
    "\374\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\046\u0114\063\u0117\001\001\000" +
    "\002\001\001\000\006\046\u0114\063\u0116\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\046\u0114\063" +
    "\u0120\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\046\u0130\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\u0141\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\026\u0157\046\u0158\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\006\026\u015a\046\u0158\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\u015e\046\u0158\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\026\u0166\046\u0158\001" +
    "\001\000\006\026\u0163\046\u0158\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\026\u0168\046\u0158\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\006\026\u0171\046\u0158\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\026\u0177\046\u0158\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\003\u017c\004\045\005\046\006\031\011\052\015" +
    "\035\016\047\020\066\023\075\024\054\031\043\043\064" +
    "\045\033\046\056\052\071\054\073\055\055\056\060\057" +
    "\063\060\062\061\061\062\036\065\051\066\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\003\u0184\004\045\005\046\006\031\011" +
    "\052\015\035\016\047\020\066\023\075\024\054\031\043" +
    "\043\064\045\033\046\056\052\071\054\073\055\055\056" +
    "\060\057\063\060\062\061\061\062\036\065\051\066\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\003\u018e\004\045\005\046\006\031\011\052\015\035" +
    "\016\047\020\066\023\075\024\054\031\043\043\064\045" +
    "\033\046\056\052\071\054\073\055\055\056\060\057\063" +
    "\060\062\061\061\062\036\065\051\066\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\u0193\001\001\000\004\046\u019f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\003\u0197" +
    "\004\045\005\046\006\031\011\052\015\035\016\047\020" +
    "\066\023\075\024\054\031\043\043\064\045\033\046\056" +
    "\052\071\054\073\055\055\056\060\057\063\060\062\061" +
    "\061\062\036\065\051\066\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\003\u019c\004\045\005\046\006\031\011\052\015\035" +
    "\016\047\020\066\023\075\024\054\031\043\043\064\045" +
    "\033\046\056\052\071\054\073\055\055\056\060\057\063" +
    "\060\062\061\061\062\036\065\051\066\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\003\u01a5\004\045\005" +
    "\046\006\031\011\052\015\035\016\047\020\066\023\075" +
    "\024\054\031\043\043\064\045\033\046\056\052\071\054" +
    "\073\055\055\056\060\057\063\060\062\061\061\062\036" +
    "\065\051\066\077\001\001\000\062\003\u01a3\004\045\005" +
    "\046\006\031\011\052\015\035\016\047\020\066\023\075" +
    "\024\054\031\043\043\064\045\033\046\056\052\071\054" +
    "\073\055\055\056\060\057\063\060\062\061\061\062\036" +
    "\065\051\066\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\003\u01a7\004\045\005\046" +
    "\006\031\011\052\015\035\016\047\020\066\023\075\024" +
    "\054\031\043\043\064\045\033\046\056\052\071\054\073" +
    "\055\055\056\060\057\063\060\062\061\061\062\036\065" +
    "\051\066\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\003\u01ae\004\045\005\046\006\031" +
    "\011\052\015\035\016\047\020\066\023\075\024\054\031" +
    "\043\043\064\045\033\046\056\052\071\054\073\055\055" +
    "\056\060\057\063\060\062\061\061\062\036\065\051\066" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\003\u01b1\004\045\005\046\006\031\011\052\015\035\016" +
    "\047\020\066\023\075\024\054\031\043\043\064\045\033" +
    "\046\056\052\071\054\073\055\055\056\060\057\063\060" +
    "\062\061\061\062\036\065\051\066\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\003\u01b6\004\045\005\046\006\031\011\052" +
    "\015\035\016\047\020\066\023\075\024\054\031\043\043" +
    "\064\045\033\046\056\052\071\054\073\055\055\056\060" +
    "\057\063\060\062\061\061\062\036\065\051\066\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\003\u01bd\004\045\005\046\006\031\011\052\015\035" +
    "\016\047\020\066\023\075\024\054\031\043\043\064\045" +
    "\033\046\056\052\071\054\073\055\055\056\060\057\063" +
    "\060\062\061\061\062\036\065\051\066\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\003\u01c6\004\045\005\046" +
    "\006\031\011\052\015\035\016\047\020\066\023\075\024" +
    "\054\031\043\043\064\045\033\046\056\052\071\054\073" +
    "\055\055\056\060\057\063\060\062\061\061\062\036\065" +
    "\051\066\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\046\u01e1\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\012\007\u01c9" +
    "\010\u01d5\040\u01ca\046\u01ce\001\001\000\004\046\u01d2\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\012\007\u01c9\010\u01d3\040\u01ca\046\u01ce\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\007\u01c9\010\u01db\040\u01ca\046\u01ce\001\001" +
    "\000\002\001\001\000\012\007\u01c9\010\u01dd\040\u01ca\046" +
    "\u01ce\001\001\000\002\001\001\000\012\007\u01c9\010\u01df" +
    "\040\u01ca\046\u01ce\001\001\000\002\001\001\000\012\007" +
    "\u01c9\010\u01e3\040\u01ca\046\u01ce\001\001\000\012\007\u01c9" +
    "\010\u01e2\040\u01ca\046\u01ce\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\007\u032c\040\u032d\046\u032f\001\001\000\002\001\001" +
    "\000\014\007\u01c9\010\u0202\012\u0207\040\u01ca\046\u0208\001" +
    "\001\000\002\001\001\000\006\014\u01f9\046\u01fb\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\u02ac" +
    "\001\001\000\002\001\001\000\004\013\245\001\001\000" +
    "\004\013\170\001\001\000\002\001\001\000\012\013\175" +
    "\036\177\041\206\046\152\001\001\000\002\001\001\000" +
    "\006\013\115\046\u020c\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\012\007\u01c9\010\u01d3\040" +
    "\u01ca\046\u01ce\001\001\000\004\046\u020f\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\u0211\001\001\000" +
    "\004\013\u022c\001\001\000\004\013\u0213\001\001\000\004" +
    "\046\u0215\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\u0219\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\003\u021d\004\045\005\046\006\031\011\052\015\035" +
    "\016\047\020\066\023\075\024\054\031\043\043\064\045" +
    "\033\046\056\052\071\054\073\055\055\056\060\057\063" +
    "\060\062\061\061\062\036\065\051\066\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\u0220\001\001" +
    "\000\004\017\u0227\001\001\000\004\017\u0222\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\003\u0225\004\045" +
    "\005\046\006\031\011\052\015\035\016\047\020\066\023" +
    "\075\024\054\031\043\043\064\045\033\046\056\052\071" +
    "\054\073\055\055\056\060\057\063\060\062\061\061\062" +
    "\036\065\051\066\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\003" +
    "\u022a\004\045\005\046\006\031\011\052\015\035\016\047" +
    "\020\066\023\075\024\054\031\043\043\064\045\033\046" +
    "\056\052\071\054\073\055\055\056\060\057\063\060\062" +
    "\061\061\062\036\065\051\066\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\u022e\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\u0230\001\001\000" +
    "\004\017\u0231\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\003\u0234\004\045\005\046\006\031\011\052\015" +
    "\035\016\047\020\066\023\075\024\054\031\043\043\064" +
    "\045\033\046\056\052\071\054\073\055\055\056\060\057" +
    "\063\060\062\061\061\062\036\065\051\066\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\u0237\001" +
    "\001\000\004\017\u023e\001\001\000\004\017\u0239\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\003\u023c\004" +
    "\045\005\046\006\031\011\052\015\035\016\047\020\066" +
    "\023\075\024\054\031\043\043\064\045\033\046\056\052" +
    "\071\054\073\055\055\056\060\057\063\060\062\061\061" +
    "\062\036\065\051\066\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\003\u0241\004\045\005\046\006\031\011\052\015\035\016" +
    "\047\020\066\023\075\024\054\031\043\043\064\045\033" +
    "\046\056\052\071\054\073\055\055\056\060\057\063\060" +
    "\062\061\061\062\036\065\051\066\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\u0244\001\001\000" +
    "\004\013\u025d\001\001\000\004\013\u0246\001\001\000\004" +
    "\046\u0248\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\u024b\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\003\u024e\004\045\005\046\006" +
    "\031\011\052\015\035\016\047\020\066\023\075\024\054" +
    "\031\043\043\064\045\033\046\056\052\071\054\073\055" +
    "\055\056\060\057\063\060\062\061\061\062\036\065\051" +
    "\066\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\u0251\001\001\000\004\017\u0258\001\001\000\004" +
    "\017\u0253\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\003\u0256\004\045\005\046\006\031\011\052\015\035" +
    "\016\047\020\066\023\075\024\054\031\043\043\064\045" +
    "\033\046\056\052\071\054\073\055\055\056\060\057\063" +
    "\060\062\061\061\062\036\065\051\066\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\003\u025b\004\045\005\046\006\031\011" +
    "\052\015\035\016\047\020\066\023\075\024\054\031\043" +
    "\043\064\045\033\046\056\052\071\054\073\055\055\056" +
    "\060\057\063\060\062\061\061\062\036\065\051\066\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\u0261" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\003" +
    "\u0264\004\045\005\046\006\031\011\052\015\035\016\047" +
    "\020\066\023\075\024\054\031\043\043\064\045\033\046" +
    "\056\052\071\054\073\055\055\056\060\057\063\060\062" +
    "\061\061\062\036\065\051\066\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\u0268\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\u026a\001\001\000" +
    "\004\013\u0275\001\001\000\004\013\u026c\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\u0270\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\003\u0273\004\045\005\046\006\031\011\052\015\035\016" +
    "\047\020\066\023\075\024\054\031\043\043\064\045\033" +
    "\046\056\052\071\054\073\055\055\056\060\057\063\060" +
    "\062\061\061\062\036\065\051\066\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\u0276\001\001\000" +
    "\002\001\001\000\004\046\u0278\001\001\000\004\017\u0279" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\003" +
    "\u027c\004\045\005\046\006\031\011\052\015\035\016\047" +
    "\020\066\023\075\024\054\031\043\043\064\045\033\046" +
    "\056\052\071\054\073\055\055\056\060\057\063\060\062" +
    "\061\061\062\036\065\051\066\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\u027f\001\001\000\004" +
    "\013\u0298\001\001\000\004\013\u0281\001\001\000\004\046" +
    "\u0283\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\u0286\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\003\u0289\004\045\005\046\006\031" +
    "\011\052\015\035\016\047\020\066\023\075\024\054\031" +
    "\043\043\064\045\033\046\056\052\071\054\073\055\055" +
    "\056\060\057\063\060\062\061\061\062\036\065\051\066" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\u028c\001\001\000\004\017\u0293\001\001\000\004\017" +
    "\u028e\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\003\u0291\004\045\005\046\006\031\011\052\015\035\016" +
    "\047\020\066\023\075\024\054\031\043\043\064\045\033" +
    "\046\056\052\071\054\073\055\055\056\060\057\063\060" +
    "\062\061\061\062\036\065\051\066\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\003\u0296\004\045\005\046\006\031\011\052" +
    "\015\035\016\047\020\066\023\075\024\054\031\043\043" +
    "\064\045\033\046\056\052\071\054\073\055\055\056\060" +
    "\057\063\060\062\061\061\062\036\065\051\066\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\u029c\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\003\u029f" +
    "\004\045\005\046\006\031\011\052\015\035\016\047\020" +
    "\066\023\075\024\054\031\043\043\064\045\033\046\056" +
    "\052\071\054\073\055\055\056\060\057\063\060\062\061" +
    "\061\062\036\065\051\066\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\003\u02a3\004" +
    "\045\005\046\006\031\011\052\015\035\016\047\020\066" +
    "\023\075\024\054\031\043\043\064\045\033\046\056\052" +
    "\071\054\073\055\055\056\060\057\063\060\062\061\061" +
    "\062\036\065\051\066\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\003\u02a8\004\045\005\046\006\031\011\052\015\035\016" +
    "\047\020\066\023\075\024\054\031\043\043\064\045\033" +
    "\046\056\052\071\054\073\055\055\056\060\057\063\060" +
    "\062\061\061\062\036\065\051\066\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\u02b0" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\046" +
    "\u02b2\001\001\000\004\013\u02bd\001\001\000\004\013\u02b4" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\017\u02b8\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\003\u02bb\004\045\005\046\006\031\011" +
    "\052\015\035\016\047\020\066\023\075\024\054\031\043" +
    "\043\064\045\033\046\056\052\071\054\073\055\055\056" +
    "\060\057\063\060\062\061\061\062\036\065\051\066\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\046" +
    "\u02be\001\001\000\002\001\001\000\004\046\u02c0\001\001" +
    "\000\004\017\u02c1\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\003\u02c4\004\045\005\046\006\031\011\052" +
    "\015\035\016\047\020\066\023\075\024\054\031\043\043" +
    "\064\045\033\046\056\052\071\054\073\055\055\056\060" +
    "\057\063\060\062\061\061\062\036\065\051\066\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\u02c7" +
    "\001\001\000\004\013\u02e6\001\001\000\004\013\u02c9\001" +
    "\001\000\004\046\u02cb\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\u02cd\001\001\000\004\017\u02d4\001" +
    "\001\000\004\017\u02cf\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\003\u02d2\004\045\005\046\006\031\011" +
    "\052\015\035\016\047\020\066\023\075\024\054\031\043" +
    "\043\064\045\033\046\056\052\071\054\073\055\055\056" +
    "\060\057\063\060\062\061\061\062\036\065\051\066\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\003\u02d7\004\045\005\046" +
    "\006\031\011\052\015\035\016\047\020\066\023\075\024" +
    "\054\031\043\043\064\045\033\046\056\052\071\054\073" +
    "\055\055\056\060\057\063\060\062\061\061\062\036\065" +
    "\051\066\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\u02da\001\001\000\004\017\u02e1\001\001\000" +
    "\004\017\u02dc\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\003\u02df\004\045\005\046\006\031\011\052\015" +
    "\035\016\047\020\066\023\075\024\054\031\043\043\064" +
    "\045\033\046\056\052\071\054\073\055\055\056\060\057" +
    "\063\060\062\061\061\062\036\065\051\066\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\003\u02e4\004\045\005\046\006\031" +
    "\011\052\015\035\016\047\020\066\023\075\024\054\031" +
    "\043\043\064\045\033\046\056\052\071\054\073\055\055" +
    "\056\060\057\063\060\062\061\061\062\036\065\051\066" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\u02ea\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\003\u02ed\004\045\005\046\006\031\011\052\015\035\016" +
    "\047\020\066\023\075\024\054\031\043\043\064\045\033" +
    "\046\056\052\071\054\073\055\055\056\060\057\063\060" +
    "\062\061\061\062\036\065\051\066\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\u02f1\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\u02f3\001\001" +
    "\000\004\013\u02fe\001\001\000\004\013\u02f5\001\001\000" +
    "\004\046\u02f6\001\001\000\002\001\001\000\004\046\u02f8" +
    "\001\001\000\004\017\u02f9\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\003\u02fc\004\045\005\046\006\031" +
    "\011\052\015\035\016\047\020\066\023\075\024\054\031" +
    "\043\043\064\045\033\046\056\052\071\054\073\055\055" +
    "\056\060\057\063\060\062\061\061\062\036\065\051\066" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\u0300\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\u0302\001\001\000\004\017\u0309\001\001\000\004" +
    "\017\u0304\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\003\u0307\004\045\005\046\006\031\011\052\015\035" +
    "\016\047\020\066\023\075\024\054\031\043\043\064\045" +
    "\033\046\056\052\071\054\073\055\055\056\060\057\063" +
    "\060\062\061\061\062\036\065\051\066\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\003\u030c\004\045\005\046\006\031\011" +
    "\052\015\035\016\047\020\066\023\075\024\054\031\043" +
    "\043\064\045\033\046\056\052\071\054\073\055\055\056" +
    "\060\057\063\060\062\061\061\062\036\065\051\066\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\046" +
    "\u030f\001\001\000\004\017\u0310\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\003\u0313\004\045\005\046\006" +
    "\031\011\052\015\035\016\047\020\066\023\075\024\054" +
    "\031\043\043\064\045\033\046\056\052\071\054\073\055" +
    "\055\056\060\057\063\060\062\061\061\062\036\065\051" +
    "\066\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\013\u0317\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\017\u031b\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\003\u031e" +
    "\004\045\005\046\006\031\011\052\015\035\016\047\020" +
    "\066\023\075\024\054\031\043\043\064\045\033\046\056" +
    "\052\071\054\073\055\055\056\060\057\063\060\062\061" +
    "\061\062\036\065\051\066\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\u0324\046\u0326\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\u01f3\001\001\000\062\003\u0347\004\045\005" +
    "\046\006\031\011\052\015\035\016\047\020\066\023\075" +
    "\024\054\031\043\043\064\045\033\046\056\052\071\054" +
    "\073\055\055\056\060\057\063\060\062\061\061\062\036" +
    "\065\051\066\077\001\001\000\002\001\001\000\062\003" +
    "\u0349\004\045\005\046\006\031\011\052\015\035\016\047" +
    "\020\066\023\075\024\054\031\043\043\064\045\033\046" +
    "\056\052\071\054\073\055\055\056\060\057\063\060\062" +
    "\061\061\062\036\065\051\066\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\003\u0350\004" +
    "\045\005\046\006\031\011\052\015\035\016\047\020\066" +
    "\023\075\024\054\031\043\043\064\045\033\046\056\052" +
    "\071\054\073\055\055\056\060\057\063\060\062\061\061" +
    "\062\036\065\051\066\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\u0363\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\013\u035a\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\u035e\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\003\u0361\004\045\005\046\006\031\011\052\015" +
    "\035\016\047\020\066\023\075\024\054\031\043\043\064" +
    "\045\033\046\056\052\071\054\073\055\055\056\060\057" +
    "\063\060\062\061\061\062\036\065\051\066\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\u04a5\001" +
    "\001\000\002\001\001\000\004\046\u0367\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\046" +
    "\u0377\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u036d\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\u0371\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\003\u0374\004\045\005\046\006" +
    "\031\011\052\015\035\016\047\020\066\023\075\024\054" +
    "\031\043\043\064\045\033\046\056\052\071\054\073\055" +
    "\055\056\060\057\063\060\062\061\061\062\036\065\051" +
    "\066\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\013\u037a\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\u037e\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\003\u0381\004\045\005\046\006" +
    "\031\011\052\015\035\016\047\020\066\023\075\024\054" +
    "\031\043\043\064\045\033\046\056\052\071\054\073\055" +
    "\055\056\060\057\063\060\062\061\061\062\036\065\051" +
    "\066\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\u0384\001\001\000\004\013\u039d\001\001\000\004" +
    "\013\u0386\001\001\000\004\046\u0388\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\u038b" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\003" +
    "\u038e\004\045\005\046\006\031\011\052\015\035\016\047" +
    "\020\066\023\075\024\054\031\043\043\064\045\033\046" +
    "\056\052\071\054\073\055\055\056\060\057\063\060\062" +
    "\061\061\062\036\065\051\066\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\u0391\001\001\000\004" +
    "\017\u0398\001\001\000\004\017\u0393\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\003\u0396\004\045\005\046" +
    "\006\031\011\052\015\035\016\047\020\066\023\075\024" +
    "\054\031\043\043\064\045\033\046\056\052\071\054\073" +
    "\055\055\056\060\057\063\060\062\061\061\062\036\065" +
    "\051\066\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\003\u039b\004" +
    "\045\005\046\006\031\011\052\015\035\016\047\020\066" +
    "\023\075\024\054\031\043\043\064\045\033\046\056\052" +
    "\071\054\073\055\055\056\060\057\063\060\062\061\061" +
    "\062\036\065\051\066\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\046\u039f\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\046\u03a1\001\001\000\004\017" +
    "\u03a8\001\001\000\004\017\u03a3\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\003\u03a6\004\045\005\046\006" +
    "\031\011\052\015\035\016\047\020\066\023\075\024\054" +
    "\031\043\043\064\045\033\046\056\052\071\054\073\055" +
    "\055\056\060\057\063\060\062\061\061\062\036\065\051" +
    "\066\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\003\u03ab\004\045" +
    "\005\046\006\031\011\052\015\035\016\047\020\066\023" +
    "\075\024\054\031\043\043\064\045\033\046\056\052\071" +
    "\054\073\055\055\056\060\057\063\060\062\061\061\062" +
    "\036\065\051\066\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\u03ae\001\001\000\004\017\u03b5\001" +
    "\001\000\004\017\u03b0\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\003\u03b3\004\045\005\046\006\031\011" +
    "\052\015\035\016\047\020\066\023\075\024\054\031\043" +
    "\043\064\045\033\046\056\052\071\054\073\055\055\056" +
    "\060\057\063\060\062\061\061\062\036\065\051\066\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\003\u03b8\004\045\005\046" +
    "\006\031\011\052\015\035\016\047\020\066\023\075\024" +
    "\054\031\043\043\064\045\033\046\056\052\071\054\073" +
    "\055\055\056\060\057\063\060\062\061\061\062\036\065" +
    "\051\066\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\013\u0426\001\001\000\006\013\u03bc\046\u03be\001" +
    "\001\000\002\001\001\000\004\013\u03dc\001\001\000\004" +
    "\013\u03bf\001\001\000\004\046\u03c1\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\u03c3\001\001\000\004" +
    "\017\u03ca\001\001\000\004\017\u03c5\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\003\u03c8\004\045\005\046" +
    "\006\031\011\052\015\035\016\047\020\066\023\075\024" +
    "\054\031\043\043\064\045\033\046\056\052\071\054\073" +
    "\055\055\056\060\057\063\060\062\061\061\062\036\065" +
    "\051\066\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\003\u03cd\004" +
    "\045\005\046\006\031\011\052\015\035\016\047\020\066" +
    "\023\075\024\054\031\043\043\064\045\033\046\056\052" +
    "\071\054\073\055\055\056\060\057\063\060\062\061\061" +
    "\062\036\065\051\066\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\046\u03d0\001\001\000\004\017\u03d7" +
    "\001\001\000\004\017\u03d2\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\003\u03d5\004\045\005\046\006\031" +
    "\011\052\015\035\016\047\020\066\023\075\024\054\031" +
    "\043\043\064\045\033\046\056\052\071\054\073\055\055" +
    "\056\060\057\063\060\062\061\061\062\036\065\051\066" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\003\u03da\004\045\005" +
    "\046\006\031\011\052\015\035\016\047\020\066\023\075" +
    "\024\054\031\043\043\064\045\033\046\056\052\071\054" +
    "\073\055\055\056\060\057\063\060\062\061\061\062\036" +
    "\065\051\066\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\u03e6\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\017\u03e0\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\003\u03e3\004\045\005\046\006\031" +
    "\011\052\015\035\016\047\020\066\023\075\024\054\031" +
    "\043\043\064\045\033\046\056\052\071\054\073\055\055" +
    "\056\060\057\063\060\062\061\061\062\036\065\051\066" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\u03e9\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\003\u03ec\004\045\005\046\006\031\011\052\015\035\016" +
    "\047\020\066\023\075\024\054\031\043\043\064\045\033" +
    "\046\056\052\071\054\073\055\055\056\060\057\063\060" +
    "\062\061\061\062\036\065\051\066\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\u03ef\001\001\000" +
    "\004\017\u03f6\001\001\000\004\017\u03f1\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\003\u03f4\004\045\005" +
    "\046\006\031\011\052\015\035\016\047\020\066\023\075" +
    "\024\054\031\043\043\064\045\033\046\056\052\071\054" +
    "\073\055\055\056\060\057\063\060\062\061\061\062\036" +
    "\065\051\066\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\003\u03f9" +
    "\004\045\005\046\006\031\011\052\015\035\016\047\020" +
    "\066\023\075\024\054\031\043\043\064\045\033\046\056" +
    "\052\071\054\073\055\055\056\060\057\063\060\062\061" +
    "\061\062\036\065\051\066\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\u0419\001\001\000\006\017" +
    "\u03fd\046\u03ff\001\001\000\002\001\001\000\004\017\u0406" +
    "\001\001\000\004\017\u0400\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\003\u0403\004\045\005\046\006\031" +
    "\011\052\015\035\016\047\020\066\023\075\024\054\031" +
    "\043\043\064\045\033\046\056\052\071\054\073\055\055" +
    "\056\060\057\063\060\062\061\061\062\036\065\051\066" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\003\u040b\004\045\005" +
    "\046\006\031\011\052\015\035\016\047\020\066\023\075" +
    "\024\054\031\043\043\064\045\033\046\056\052\071\054" +
    "\073\055\055\056\060\057\063\060\062\061\061\062\036" +
    "\065\051\066\077\001\001\000\062\003\u0409\004\045\005" +
    "\046\006\031\011\052\015\035\016\047\020\066\023\075" +
    "\024\054\031\043\043\064\045\033\046\056\052\071\054" +
    "\073\055\055\056\060\057\063\060\062\061\061\062\036" +
    "\065\051\066\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\003\u040d\004\045\005\046" +
    "\006\031\011\052\015\035\016\047\020\066\023\075\024" +
    "\054\031\043\043\064\045\033\046\056\052\071\054\073" +
    "\055\055\056\060\057\063\060\062\061\061\062\036\065" +
    "\051\066\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\003\u0413\004\045\005\046\006\031\011\052\015\035" +
    "\016\047\020\066\023\075\024\054\031\043\043\064\045" +
    "\033\046\056\052\071\054\073\055\055\056\060\057\063" +
    "\060\062\061\061\062\036\065\051\066\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\003\u0417\004\045\005\046\006\031\011\052\015\035\016" +
    "\047\020\066\023\075\024\054\031\043\043\064\045\033" +
    "\046\056\052\071\054\073\055\055\056\060\057\063\060" +
    "\062\061\061\062\036\065\051\066\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\003\u041c\004\045\005\046\006\031\011\052" +
    "\015\035\016\047\020\066\023\075\024\054\031\043\043" +
    "\064\045\033\046\056\052\071\054\073\055\055\056\060" +
    "\057\063\060\062\061\061\062\036\065\051\066\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\u0421\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\003\u0424\004\045\005\046" +
    "\006\031\011\052\015\035\016\047\020\066\023\075\024" +
    "\054\031\043\043\064\045\033\046\056\052\071\054\073" +
    "\055\055\056\060\057\063\060\062\061\061\062\036\065" +
    "\051\066\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\017\u042a\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\003\u042d\004\045\005\046\006\031\011\052\015" +
    "\035\016\047\020\066\023\075\024\054\031\043\043\064" +
    "\045\033\046\056\052\071\054\073\055\055\056\060\057" +
    "\063\060\062\061\061\062\036\065\051\066\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\u0431\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\u0433" +
    "\001\001\000\004\013\u044c\001\001\000\004\013\u0435\001" +
    "\001\000\004\046\u0437\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\017\u043a\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\003\u043d\004\045" +
    "\005\046\006\031\011\052\015\035\016\047\020\066\023" +
    "\075\024\054\031\043\043\064\045\033\046\056\052\071" +
    "\054\073\055\055\056\060\057\063\060\062\061\061\062" +
    "\036\065\051\066\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\046\u0440\001\001\000\004\017\u0447\001" +
    "\001\000\004\017\u0442\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\003\u0445\004\045\005\046\006\031\011" +
    "\052\015\035\016\047\020\066\023\075\024\054\031\043" +
    "\043\064\045\033\046\056\052\071\054\073\055\055\056" +
    "\060\057\063\060\062\061\061\062\036\065\051\066\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\003\u044a\004\045\005\046" +
    "\006\031\011\052\015\035\016\047\020\066\023\075\024" +
    "\054\031\043\043\064\045\033\046\056\052\071\054\073" +
    "\055\055\056\060\057\063\060\062\061\061\062\036\065" +
    "\051\066\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\u044e\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\u0450\001\001\000\004\017\u0457\001\001" +
    "\000\004\017\u0452\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\003\u0455\004\045\005\046\006\031\011\052" +
    "\015\035\016\047\020\066\023\075\024\054\031\043\043" +
    "\064\045\033\046\056\052\071\054\073\055\055\056\060" +
    "\057\063\060\062\061\061\062\036\065\051\066\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\003\u045a\004\045\005\046\006" +
    "\031\011\052\015\035\016\047\020\066\023\075\024\054" +
    "\031\043\043\064\045\033\046\056\052\071\054\073\055" +
    "\055\056\060\057\063\060\062\061\061\062\036\065\051" +
    "\066\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\u045d\001\001\000\004\017\u0464\001\001\000\004" +
    "\017\u045f\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\003\u0462\004\045\005\046\006\031\011\052\015\035" +
    "\016\047\020\066\023\075\024\054\031\043\043\064\045" +
    "\033\046\056\052\071\054\073\055\055\056\060\057\063" +
    "\060\062\061\061\062\036\065\051\066\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\003\u0467\004\045\005\046\006\031\011" +
    "\052\015\035\016\047\020\066\023\075\024\054\031\043" +
    "\043\064\045\033\046\056\052\071\054\073\055\055\056" +
    "\060\057\063\060\062\061\061\062\036\065\051\066\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\046" +
    "\u046a\001\001\000\004\013\u0483\001\001\000\004\013\u046c" +
    "\001\001\000\004\046\u046e\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\017\u0471\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\003\u0474\004" +
    "\045\005\046\006\031\011\052\015\035\016\047\020\066" +
    "\023\075\024\054\031\043\043\064\045\033\046\056\052" +
    "\071\054\073\055\055\056\060\057\063\060\062\061\061" +
    "\062\036\065\051\066\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\046\u0477\001\001\000\004\017\u047e" +
    "\001\001\000\004\017\u0479\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\003\u047c\004\045\005\046\006\031" +
    "\011\052\015\035\016\047\020\066\023\075\024\054\031" +
    "\043\043\064\045\033\046\056\052\071\054\073\055\055" +
    "\056\060\057\063\060\062\061\061\062\036\065\051\066" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\003\u0481\004\045\005" +
    "\046\006\031\011\052\015\035\016\047\020\066\023\075" +
    "\024\054\031\043\043\064\045\033\046\056\052\071\054" +
    "\073\055\055\056\060\057\063\060\062\061\061\062\036" +
    "\065\051\066\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\017\u0487\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\003\u048a\004\045\005\046\006\031\011\052" +
    "\015\035\016\047\020\066\023\075\024\054\031\043\043" +
    "\064\045\033\046\056\052\071\054\073\055\055\056\060" +
    "\057\063\060\062\061\061\062\036\065\051\066\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u048f\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\u0493" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\003" +
    "\u0496\004\045\005\046\006\031\011\052\015\035\016\047" +
    "\020\066\023\075\024\054\031\043\043\064\045\033\046" +
    "\056\052\071\054\073\055\055\056\060\057\063\060\062" +
    "\061\061\062\036\065\051\066\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\013\u049c\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\017\u04a0" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\003" +
    "\u04a3\004\045\005\046\006\031\011\052\015\035\016\047" +
    "\020\066\023\075\024\054\031\043\043\064\045\033\046" +
    "\056\052\071\054\073\055\055\056\060\057\063\060\062" +
    "\061\061\062\036\065\051\066\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\u04a9\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\u04ab\001\001\000\004\013\u04b6\001\001" +
    "\000\004\013\u04ad\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\017\u04b1\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\003\u04b4\004\045\005" +
    "\046\006\031\011\052\015\035\016\047\020\066\023\075" +
    "\024\054\031\043\043\064\045\033\046\056\052\071\054" +
    "\073\055\055\056\060\057\063\060\062\061\061\062\036" +
    "\065\051\066\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\u04b7\001\001\000\002\001\001\000\004" +
    "\046\u04b9\001\001\000\004\017\u04ba\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\003\u04bd\004\045\005\046" +
    "\006\031\011\052\015\035\016\047\020\066\023\075\024" +
    "\054\031\043\043\064\045\033\046\056\052\071\054\073" +
    "\055\055\056\060\057\063\060\062\061\061\062\036\065" +
    "\051\066\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\u04c0\001\001\000\004\013\u04d9\001\001\000" +
    "\004\013\u04c2\001\001\000\004\046\u04c4\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\u04c7\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\003\u04ca\004\045\005\046\006\031\011\052\015\035\016" +
    "\047\020\066\023\075\024\054\031\043\043\064\045\033" +
    "\046\056\052\071\054\073\055\055\056\060\057\063\060" +
    "\062\061\061\062\036\065\051\066\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\u04cd\001\001\000" +
    "\004\017\u04d4\001\001\000\004\017\u04cf\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\003\u04d2\004\045\005" +
    "\046\006\031\011\052\015\035\016\047\020\066\023\075" +
    "\024\054\031\043\043\064\045\033\046\056\052\071\054" +
    "\073\055\055\056\060\057\063\060\062\061\061\062\036" +
    "\065\051\066\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\003\u04d7" +
    "\004\045\005\046\006\031\011\052\015\035\016\047\020" +
    "\066\023\075\024\054\031\043\043\064\045\033\046\056" +
    "\052\071\054\073\055\055\056\060\057\063\060\062\061" +
    "\061\062\036\065\051\066\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\017\u04dd\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\003\u04e0\004\045\005\046\006" +
    "\031\011\052\015\035\016\047\020\066\023\075\024\054" +
    "\031\043\043\064\045\033\046\056\052\071\054\073\055" +
    "\055\056\060\057\063\060\062\061\061\062\036\065\051" +
    "\066\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\046\u04e4\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\046\u04e6\001\001\000\004\013\u04ff\001\001\000" +
    "\004\013\u04e8\001\001\000\004\046\u04ea\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\017" +
    "\u04ed\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\003\u04f0\004\045\005\046\006\031\011\052\015\035\016" +
    "\047\020\066\023\075\024\054\031\043\043\064\045\033" +
    "\046\056\052\071\054\073\055\055\056\060\057\063\060" +
    "\062\061\061\062\036\065\051\066\077\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\u04f3\001\001\000" +
    "\004\017\u04fa\001\001\000\004\017\u04f5\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\003\u04f8\004\045\005" +
    "\046\006\031\011\052\015\035\016\047\020\066\023\075" +
    "\024\054\031\043\043\064\045\033\046\056\052\071\054" +
    "\073\055\055\056\060\057\063\060\062\061\061\062\036" +
    "\065\051\066\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\003\u04fd" +
    "\004\045\005\046\006\031\011\052\015\035\016\047\020" +
    "\066\023\075\024\054\031\043\043\064\045\033\046\056" +
    "\052\071\054\073\055\055\056\060\057\063\060\062\061" +
    "\061\062\036\065\051\066\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\046\u0501\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\046\u0503\001\001\000\004" +
    "\017\u050a\001\001\000\004\017\u0505\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\003\u0508\004\045\005\046" +
    "\006\031\011\052\015\035\016\047\020\066\023\075\024" +
    "\054\031\043\043\064\045\033\046\056\052\071\054\073" +
    "\055\055\056\060\057\063\060\062\061\061\062\036\065" +
    "\051\066\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\003\u050d\004" +
    "\045\005\046\006\031\011\052\015\035\016\047\020\066" +
    "\023\075\024\054\031\043\043\064\045\033\046\056\052" +
    "\071\054\073\055\055\056\060\057\063\060\062\061\061" +
    "\062\036\065\051\066\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\004\046\u0510\001\001\000\004\017\u0517" +
    "\001\001\000\004\017\u0512\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\003\u0515\004\045\005\046\006\031" +
    "\011\052\015\035\016\047\020\066\023\075\024\054\031" +
    "\043\043\064\045\033\046\056\052\071\054\073\055\055" +
    "\056\060\057\063\060\062\061\061\062\036\065\051\066" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\003\u051a\004\045\005" +
    "\046\006\031\011\052\015\035\016\047\020\066\023\075" +
    "\024\054\031\043\043\064\045\033\046\056\052\071\054" +
    "\073\055\055\056\060\057\063\060\062\061\061\062\036" +
    "\065\051\066\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\004\046\u051d\001\001\000\004\013\u0536\001\001" +
    "\000\004\013\u051f\001\001\000\004\046\u0521\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\017\u0524\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\003\u0527\004\045\005\046\006\031\011\052\015\035" +
    "\016\047\020\066\023\075\024\054\031\043\043\064\045" +
    "\033\046\056\052\071\054\073\055\055\056\060\057\063" +
    "\060\062\061\061\062\036\065\051\066\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\u052a\001\001" +
    "\000\004\017\u0531\001\001\000\004\017\u052c\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\003\u052f\004\045" +
    "\005\046\006\031\011\052\015\035\016\047\020\066\023" +
    "\075\024\054\031\043\043\064\045\033\046\056\052\071" +
    "\054\073\055\055\056\060\057\063\060\062\061\061\062" +
    "\036\065\051\066\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\062\003" +
    "\u0534\004\045\005\046\006\031\011\052\015\035\016\047" +
    "\020\066\023\075\024\054\031\043\043\064\045\033\046" +
    "\056\052\071\054\073\055\055\056\060\057\063\060\062" +
    "\061\061\062\036\065\051\066\077\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\u053a\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\003\u053d\004\045\005\046" +
    "\006\031\011\052\015\035\016\047\020\066\023\075\024" +
    "\054\031\043\043\064\045\033\046\056\052\071\054\073" +
    "\055\055\056\060\057\063\060\062\061\061\062\036\065" +
    "\051\066\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\u0551\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\046\u056a" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\027\u0585\046\u0587" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\006\027\u0589\046\u0587\001\001\000\002\001\001" +
    "\000\006\027\u058b\046\u0587\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\006\027\u059c\046\u0587\001\001\000\006\027" +
    "\u0592\046\u0587\001\001\000\002\001\001\000\006\027\u0594" +
    "\046\u0587\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\027\u05a0" +
    "\046\u0587\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\027\u05a6\046\u0587\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\046\u05b6\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\u05cb\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\025\u05e0\046\u05e2\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\025\u05e4\046\u05e2\001\001\000\002\001\001\000\006\025" +
    "\u05e6\046\u05e2\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\006\025\u05f7\046\u05e2\001\001\000\006\025\u05ee\046\u05e2" +
    "\001\001\000\006\025\u05f2\046\u05e2\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\025\u05fb\046\u05e2\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\006\025\u0601\046" +
    "\u05e2\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\014\u0647\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\014\u0636\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\014\u0626\046\u0627\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\014\u063a\046\u063d" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\014" +
    "\u0652\030\u0653\046\u0654\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\014\u0652\030\u0656\046" +
    "\u0654\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\014\u0652\030\u065a\046\u0654\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\u0652\030\u0663\046\u0654\001\001\000\010\014\u0652\030" +
    "\u065f\046\u0654\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\014\u0652\030\u0667\046\u0654\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\014\u0652\030\u066d\046\u0654\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\014\u0652\030\u0673\046\u0654\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\006\046\u0114\063\u0679\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\003\u0685\004\045\005" +
    "\046\006\031\011\052\015\035\016\047\020\066\023\075" +
    "\024\054\031\043\043\064\045\033\046\056\052\071\054" +
    "\073\055\055\056\060\057\063\060\062\061\061\062\036" +
    "\065\051\066\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\003\u068c\004\045\005\046\006" +
    "\031\011\052\015\035\016\047\020\066\023\075\024\054" +
    "\031\043\043\064\045\033\046\056\052\071\054\073\055" +
    "\055\056\060\057\063\060\062\061\061\062\036\065\051" +
    "\066\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\003\u0691\004\045" +
    "\005\046\006\031\011\052\015\035\016\047\020\066\023" +
    "\075\024\054\031\043\043\064\045\033\046\056\052\071" +
    "\054\073\055\055\056\060\057\063\060\062\061\061\062" +
    "\036\065\051\066\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\032\u0694\044\u07ba\046" +
    "\u0696\001\001\000\006\035\u0708\046\u070a\001\001\000\006" +
    "\035\u0698\046\u069d\001\001\000\004\046\u06f5\001\001\000" +
    "\004\046\u06db\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\004\046\u069e\001" +
    "\001\000\002\001\001\000\002\001\001\000\010\034\u06a5" +
    "\035\u06a1\046\u06a4\001\001\000\004\046\u06c5\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\u06b6\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\003\u06a8\004" +
    "\045\005\046\006\031\011\052\015\035\016\047\020\066" +
    "\023\075\024\054\031\043\043\064\045\033\046\056\052" +
    "\071\054\073\055\055\056\060\057\063\060\062\061\061" +
    "\062\036\065\051\066\077\001\001\000\004\033\u06a9\001" +
    "\001\000\002\001\001\000\002\001\001\000\006\007\u06ac" +
    "\046\u06b0\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\010\034\u06b9\035\u06a1\046\u06a4\001\001\000\002\001" +
    "\001\000\010\034\u06bb\035\u06a1\046\u06a4\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\034\u06be\035\u06a1\046" +
    "\u06a4\001\001\000\002\001\001\000\062\003\u06c0\004\045" +
    "\005\046\006\031\011\052\015\035\016\047\020\066\023" +
    "\075\024\054\031\043\043\064\045\033\046\056\052\071" +
    "\054\073\055\055\056\060\057\063\060\062\061\061\062" +
    "\036\065\051\066\077\001\001\000\004\033\u06c1\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\034\u06cd\035\u06a1\046\u06a4\001\001\000\002\001\001" +
    "\000\010\034\u06c8\035\u06a1\046\u06a4\001\001\000\010\034" +
    "\u06ca\035\u06a1\046\u06a4\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\034\u06cc\035\u06a1\046" +
    "\u06a4\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\034\u06d0\035\u06a1\046\u06a4\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\003\u06d3\004\045" +
    "\005\046\006\031\011\052\015\035\016\047\020\066\023" +
    "\075\024\054\031\043\043\064\045\033\046\056\052\071" +
    "\054\073\055\055\056\060\057\063\060\062\061\061\062" +
    "\036\065\051\066\077\001\001\000\004\033\u06d4\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\003\u06d8\004\045\005\046\006\031\011\052\015\035" +
    "\016\047\020\066\023\075\024\054\031\043\043\064\045" +
    "\033\046\056\052\071\054\073\055\055\056\060\057\063" +
    "\060\062\061\061\062\036\065\051\066\077\001\001\000" +
    "\004\033\u06d9\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\034\u06df\035" +
    "\u06a1\046\u06a4\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\003\u06e2\004\045\005\046\006" +
    "\031\011\052\015\035\016\047\020\066\023\075\024\054" +
    "\031\043\043\064\045\033\046\056\052\071\054\073\055" +
    "\055\056\060\057\063\060\062\061\061\062\036\065\051" +
    "\066\077\001\001\000\004\033\u06e3\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\003\u06e6\004\045\005\046" +
    "\006\031\011\052\015\035\016\047\020\066\023\075\024" +
    "\054\031\043\043\064\045\033\046\056\052\071\054\073" +
    "\055\055\056\060\057\063\060\062\061\061\062\036\065" +
    "\051\066\077\001\001\000\004\033\u06e7\001\001\000\002" +
    "\001\001\000\002\001\001\000\010\034\u06eb\035\u06a1\046" +
    "\u06a4\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\003\u06ee\004\045\005\046\006\031\011" +
    "\052\015\035\016\047\020\066\023\075\024\054\031\043" +
    "\043\064\045\033\046\056\052\071\054\073\055\055\056" +
    "\060\057\063\060\062\061\061\062\036\065\051\066\077" +
    "\001\001\000\004\033\u06ef\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\003\u06f2\004\045\005\046\006\031" +
    "\011\052\015\035\016\047\020\066\023\075\024\054\031" +
    "\043\043\064\045\033\046\056\052\071\054\073\055\055" +
    "\056\060\057\063\060\062\061\061\062\036\065\051\066" +
    "\077\001\001\000\004\033\u06f3\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\010\034\u06f9\035\u06a1\046\u06a4\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\003\u06fc\004" +
    "\045\005\046\006\031\011\052\015\035\016\047\020\066" +
    "\023\075\024\054\031\043\043\064\045\033\046\056\052" +
    "\071\054\073\055\055\056\060\057\063\060\062\061\061" +
    "\062\036\065\051\066\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\003\u06ff\004\045\005\046\006\031" +
    "\011\052\015\035\016\047\020\066\023\075\024\054\031" +
    "\043\043\064\045\033\046\056\052\071\054\073\055\055" +
    "\056\060\057\063\060\062\061\061\062\036\065\051\066" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\010" +
    "\034\u0702\035\u06a1\046\u06a4\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\003\u0705\004\045\005\046\006\031" +
    "\011\052\015\035\016\047\020\066\023\075\024\054\031" +
    "\043\043\064\045\033\046\056\052\071\054\073\055\055" +
    "\056\060\057\063\060\062\061\061\062\036\065\051\066" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\046\u0788\001\001\000\004\046\u0739\001\001\000\002\001" +
    "\001\000\004\046\u070b\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\034\u070f\035\u06a1\046\u06a4\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\003\u0712\004\045\005\046\006\031\011\052\015\035\016" +
    "\047\020\066\023\075\024\054\031\043\043\064\045\033" +
    "\046\056\052\071\054\073\055\055\056\060\057\063\060" +
    "\062\061\061\062\036\065\051\066\077\001\001\000\004" +
    "\033\u0713\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\003\u0717\004\045\005\046\006\031" +
    "\011\052\015\035\016\047\020\066\023\075\024\054\031" +
    "\043\043\064\045\033\046\056\052\071\054\073\055\055" +
    "\056\060\057\063\060\062\061\061\062\036\065\051\066" +
    "\077\001\001\000\004\033\u0718\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\034\u071d\035" +
    "\u06a1\046\u06a4\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\003\u0720\004\045\005\046\006" +
    "\031\011\052\015\035\016\047\020\066\023\075\024\054" +
    "\031\043\043\064\045\033\046\056\052\071\054\073\055" +
    "\055\056\060\057\063\060\062\061\061\062\036\065\051" +
    "\066\077\001\001\000\004\033\u0721\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\003\u0725" +
    "\004\045\005\046\006\031\011\052\015\035\016\047\020" +
    "\066\023\075\024\054\031\043\043\064\045\033\046\056" +
    "\052\071\054\073\055\055\056\060\057\063\060\062\061" +
    "\061\062\036\065\051\066\077\001\001\000\004\033\u0726" +
    "\001\001\000\002\001\001\000\002\001\001\000\010\034" +
    "\u072a\035\u06a1\046\u06a4\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\003\u072d\004\045\005" +
    "\046\006\031\011\052\015\035\016\047\020\066\023\075" +
    "\024\054\031\043\043\064\045\033\046\056\052\071\054" +
    "\073\055\055\056\060\057\063\060\062\061\061\062\036" +
    "\065\051\066\077\001\001\000\004\033\u072e\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\062" +
    "\003\u0732\004\045\005\046\006\031\011\052\015\035\016" +
    "\047\020\066\023\075\024\054\031\043\043\064\045\033" +
    "\046\056\052\071\054\073\055\055\056\060\057\063\060" +
    "\062\061\061\062\036\065\051\066\077\001\001\000\004" +
    "\033\u0733\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\034\u075a\035\u06a1\046\u06a4\001\001" +
    "\000\002\001\001\000\010\034\u0747\035\u06a1\046\u06a4\001" +
    "\001\000\002\001\001\000\010\034\u073c\035\u06a1\046\u06a4" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\003\u073f\004\045\005\046\006\031\011\052" +
    "\015\035\016\047\020\066\023\075\024\054\031\043\043" +
    "\064\045\033\046\056\052\071\054\073\055\055\056\060" +
    "\057\063\060\062\061\061\062\036\065\051\066\077\001" +
    "\001\000\004\033\u0740\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\003\u0743\004\045\005\046\006\031\011" +
    "\052\015\035\016\047\020\066\023\075\024\054\031\043" +
    "\043\064\045\033\046\056\052\071\054\073\055\055\056" +
    "\060\057\063\060\062\061\061\062\036\065\051\066\077" +
    "\001\001\000\004\033\u0744\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\003\u074a\004\045\005\046\006\031\011" +
    "\052\015\035\016\047\020\066\023\075\024\054\031\043" +
    "\043\064\045\033\046\056\052\071\054\073\055\055\056" +
    "\060\057\063\060\062\061\061\062\036\065\051\066\077" +
    "\001\001\000\004\033\u074b\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\003\u074e\004\045\005\046\006\031" +
    "\011\052\015\035\016\047\020\066\023\075\024\054\031" +
    "\043\043\064\045\033\046\056\052\071\054\073\055\055" +
    "\056\060\057\063\060\062\061\061\062\036\065\051\066" +
    "\077\001\001\000\004\033\u074f\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\034\u0752\035\u06a1\046\u06a4\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\003\u0755" +
    "\004\045\005\046\006\031\011\052\015\035\016\047\020" +
    "\066\023\075\024\054\031\043\043\064\045\033\046\056" +
    "\052\071\054\073\055\055\056\060\057\063\060\062\061" +
    "\061\062\036\065\051\066\077\001\001\000\004\033\u0756" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\034\u0762\035\u06a1\046\u06a4\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\003\u075d\004\045\005" +
    "\046\006\031\011\052\015\035\016\047\020\066\023\075" +
    "\024\054\031\043\043\064\045\033\046\056\052\071\054" +
    "\073\055\055\056\060\057\063\060\062\061\061\062\036" +
    "\065\051\066\077\001\001\000\004\033\u075e\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\003\u077e\004\045" +
    "\005\046\006\031\011\052\015\035\016\047\020\066\023" +
    "\075\024\054\031\043\043\064\045\033\046\056\052\071" +
    "\054\073\055\055\056\060\057\063\060\062\061\061\062" +
    "\036\065\051\066\077\001\001\000\062\003\u0773\004\045" +
    "\005\046\006\031\011\052\015\035\016\047\020\066\023" +
    "\075\024\054\031\043\043\064\045\033\046\056\052\071" +
    "\054\073\055\055\056\060\057\063\060\062\061\061\062" +
    "\036\065\051\066\077\001\001\000\002\001\001\000\062" +
    "\003\u0768\004\045\005\046\006\031\011\052\015\035\016" +
    "\047\020\066\023\075\024\054\031\043\043\064\045\033" +
    "\046\056\052\071\054\073\055\055\056\060\057\063\060" +
    "\062\061\061\062\036\065\051\066\077\001\001\000\062" +
    "\003\u0765\004\045\005\046\006\031\011\052\015\035\016" +
    "\047\020\066\023\075\024\054\031\043\043\064\045\033" +
    "\046\056\052\071\054\073\055\055\056\060\057\063\060" +
    "\062\061\061\062\036\065\051\066\077\001\001\000\004" +
    "\033\u0766\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\033\u0771\001\001\000\064\003\u076a\004\045\005\046" +
    "\006\031\011\052\015\035\016\047\020\066\023\075\024" +
    "\054\031\043\033\u076b\043\064\045\033\046\056\052\071" +
    "\054\073\055\055\056\060\057\063\060\062\061\061\062" +
    "\036\065\051\066\077\001\001\000\004\033\u076d\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\033\u077c\001\001\000" +
    "\064\003\u0775\004\045\005\046\006\031\011\052\015\035" +
    "\016\047\020\066\023\075\024\054\031\043\033\u0776\043" +
    "\064\045\033\046\056\052\071\054\073\055\055\056\060" +
    "\057\063\060\062\061\061\062\036\065\051\066\077\001" +
    "\001\000\004\033\u0778\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\033\u077f\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\003\u0782\004\045\005\046\006\031\011\052" +
    "\015\035\016\047\020\066\023\075\024\054\031\043\043" +
    "\064\045\033\046\056\052\071\054\073\055\055\056\060" +
    "\057\063\060\062\061\061\062\036\065\051\066\077\001" +
    "\001\000\004\033\u0783\001\001\000\002\001\001\000\002" +
    "\001\001\000\010\034\u079b\035\u06a1\046\u06a4\001\001\000" +
    "\002\001\001\000\010\034\u078f\035\u06a1\046\u06a4\001\001" +
    "\000\002\001\001\000\010\034\u078a\035\u06a1\046\u06a4\001" +
    "\001\000\002\001\001\000\002\001\001\000\062\003\u078d" +
    "\004\045\005\046\006\031\011\052\015\035\016\047\020" +
    "\066\023\075\024\054\031\043\043\064\045\033\046\056" +
    "\052\071\054\073\055\055\056\060\057\063\060\062\061" +
    "\061\062\036\065\051\066\077\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\062\003\u0792\004\045\005\046\006\031\011\052\015\035" +
    "\016\047\020\066\023\075\024\054\031\043\043\064\045" +
    "\033\046\056\052\071\054\073\055\055\056\060\057\063" +
    "\060\062\061\061\062\036\065\051\066\077\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\003\u0797\004\045\005\046\006\031\011" +
    "\052\015\035\016\047\020\066\023\075\024\054\031\043" +
    "\043\064\045\033\046\056\052\071\054\073\055\055\056" +
    "\060\057\063\060\062\061\061\062\036\065\051\066\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\034\u07a2\035\u06a1\046\u06a4\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\003\u079e\004\045\005" +
    "\046\006\031\011\052\015\035\016\047\020\066\023\075" +
    "\024\054\031\043\043\064\045\033\046\056\052\071\054" +
    "\073\055\055\056\060\057\063\060\062\061\061\062\036" +
    "\065\051\066\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\003\u07b5\004\045\005\046\006\031\011\052" +
    "\015\035\016\047\020\066\023\075\024\054\031\043\043" +
    "\064\045\033\046\056\052\071\054\073\055\055\056\060" +
    "\057\063\060\062\061\061\062\036\065\051\066\077\001" +
    "\001\000\062\003\u07ae\004\045\005\046\006\031\011\052" +
    "\015\035\016\047\020\066\023\075\024\054\031\043\043" +
    "\064\045\033\046\056\052\071\054\073\055\055\056\060" +
    "\057\063\060\062\061\061\062\036\065\051\066\077\001" +
    "\001\000\002\001\001\000\062\003\u07a7\004\045\005\046" +
    "\006\031\011\052\015\035\016\047\020\066\023\075\024" +
    "\054\031\043\043\064\045\033\046\056\052\071\054\073" +
    "\055\055\056\060\057\063\060\062\061\061\062\036\065" +
    "\051\066\077\001\001\000\062\003\u07a5\004\045\005\046" +
    "\006\031\011\052\015\035\016\047\020\066\023\075\024" +
    "\054\031\043\043\064\045\033\046\056\052\071\054\073" +
    "\055\055\056\060\057\063\060\062\061\061\062\036\065" +
    "\051\066\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\003\u07a9\004\045\005\046\006" +
    "\031\011\052\015\035\016\047\020\066\023\075\024\054" +
    "\031\043\043\064\045\033\046\056\052\071\054\073\055" +
    "\055\056\060\057\063\060\062\061\061\062\036\065\051" +
    "\066\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\062\003\u07b0\004\045\005\046\006\031\011" +
    "\052\015\035\016\047\020\066\023\075\024\054\031\043" +
    "\043\064\045\033\046\056\052\071\054\073\055\055\056" +
    "\060\057\063\060\062\061\061\062\036\065\051\066\077" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\062\003\u07b8\004\045\005\046\006" +
    "\031\011\052\015\035\016\047\020\066\023\075\024\054" +
    "\031\043\043\064\045\033\046\056\052\071\054\073\055" +
    "\055\056\060\057\063\060\062\061\061\062\036\065\051" +
    "\066\077\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\046\u07d0\001\001" +
    "\000\004\046\u07c4\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\062\003\u07c2\004\045\005\046" +
    "\006\031\011\052\015\035\016\047\020\066\023\075\024" +
    "\054\031\043\043\064\045\033\046\056\052\071\054\073" +
    "\055\055\056\060\057\063\060\062\061\061\062\036\065" +
    "\051\066\077\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\003\u07c9\004\045\005\046\006\031" +
    "\011\052\015\035\016\047\020\066\023\075\024\054\031" +
    "\043\043\064\045\033\046\056\052\071\054\073\055\055" +
    "\056\060\057\063\060\062\061\061\062\036\065\051\066" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\062\003\u07ce\004\045\005" +
    "\046\006\031\011\052\015\035\016\047\020\066\023\075" +
    "\024\054\031\043\043\064\045\033\046\056\052\071\054" +
    "\073\055\055\056\060\057\063\060\062\061\061\062\036" +
    "\065\051\066\077\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\062\003\u07d9\004" +
    "\045\005\046\006\031\011\052\015\035\016\047\020\066" +
    "\023\075\024\054\031\043\043\064\045\033\046\056\052" +
    "\071\054\073\055\055\056\060\057\063\060\062\061\061" +
    "\062\036\065\051\066\077\001\001\000\062\003\u07d7\004" +
    "\045\005\046\006\031\011\052\015\035\016\047\020\066" +
    "\023\075\024\054\031\043\043\064\045\033\046\056\052" +
    "\071\054\073\055\055\056\060\057\063\060\062\061\061" +
    "\062\036\065\051\066\077\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\062\003\u07db\004\045" +
    "\005\046\006\031\011\052\015\035\016\047\020\066\023" +
    "\075\024\054\031\043\043\064\045\033\046\056\052\071" +
    "\054\073\055\055\056\060\057\063\060\062\061\061\062" +
    "\036\065\051\066\077\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\062\003\u07e1\004\045\005\046\006\031\011\052" +
    "\015\035\016\047\020\066\023\075\024\054\031\043\043" +
    "\064\045\033\046\056\052\071\054\073\055\055\056\060" +
    "\057\063\060\062\061\061\062\036\065\051\066\077\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\062\003\u07e5\004\045\005\046\006\031\011\052\015" +
    "\035\016\047\020\066\023\075\024\054\031\043\043\064" +
    "\045\033\046\056\052\071\054\073\055\055\056\060\057" +
    "\063\060\062\061\061\062\036\065\051\066\077\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\062\003\u07ea\004\045\005\046\006\031" +
    "\011\052\015\035\016\047\020\066\023\075\024\054\031" +
    "\043\043\064\045\033\046\056\052\071\054\073\055\055" +
    "\056\060\057\063\060\062\061\061\062\036\065\051\066" +
    "\077\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\042\u07ed\046\021\001\001\000\010\032\u0694\044\u07ee\046" +
    "\u0696\001\001\000\002\001\001\000\002\001\001\000\006" +
    "\042\u081b\046\021\001\001\000\002\001\001\000\006\042" +
    "\u07f4\046\021\001\001\000\012\032\u0694\042\u07fa\044\u07f9" +
    "\046\u07fd\001\001\000\010\032\u0694\044\u07f6\046\u0696\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\010\032\u0694\044" +
    "\u0812\046\u0696\001\001\000\002\001\001\000\006\035\u0708" +
    "\046\u0808\001\001\000\006\035\u0698\046\u07ff\001\001\000" +
    "\004\046\u0805\001\001\000\004\046\u0800\001\001\000\002" +
    "\001\001\000\010\034\u06d0\035\u06a1\046\u06a4\001\001\000" +
    "\002\001\001\000\062\003\u0804\004\045\005\046\006\031" +
    "\011\052\015\035\016\047\020\066\023\075\024\054\031" +
    "\043\043\064\045\033\046\056\052\071\054\073\055\055" +
    "\056\060\057\063\060\062\061\061\062\036\065\051\066" +
    "\077\001\001\000\004\033\u06d9\001\001\000\002\001\001" +
    "\000\010\034\u0702\035\u06a1\046\u06a4\001\001\000\004\046" +
    "\u080f\001\001\000\004\046\u0809\001\001\000\002\001\001" +
    "\000\010\034\u071d\035\u06a1\046\u06a4\001\001\000\002\001" +
    "\001\000\062\003\u080d\004\045\005\046\006\031\011\052" +
    "\015\035\016\047\020\066\023\075\024\054\031\043\043" +
    "\064\045\033\046\056\052\071\054\073\055\055\056\060" +
    "\057\063\060\062\061\061\062\036\065\051\066\077\001" +
    "\001\000\004\033\u0726\001\001\000\010\034\u078f\035\u06a1" +
    "\046\u06a4\001\001\000\002\001\001\000\010\034\u078a\035" +
    "\u06a1\046\u06a4\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\006\042\u0818\046\021\001\001\000\010" +
    "\032\u0694\044\u0819\046\u0696\001\001\000\002\001\001\000" +
    "\002\001\001\000\010\032\u0694\044\u081d\046\u0696\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$Sintax$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$Sintax$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$Sintax$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}



    public Lexer lex;
    public static String errores = "";
    StringBuilder m = new StringBuilder("");
    public String RESULT;
 
   private Symbol s;

   public void syntax_error(Symbol s){
        if(s.value == null)
            return;
        append("La Cadena:" + s.value+" en la Linea: "+(s.right+1)+ " está fuera de contexto.");
    }
    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        if(s.value == null)
            return;
        append("La Cadena:" + s.value+" en la Linea: "+(s.right+1)+ " está fuera de contexto (ERROR CRÍTICO SE DEBE SOLUCIONAR ANTES DE CONTINUAR, NO SE IDENTIFICÓ ).");
    }
    
    public static void append(String mensaje){
        StringBuilder me;
        me = new StringBuilder("Error sintáctico: "+" ");
        me.append(mensaje);

        errores+=mensaje+"\n\n";
        System.out.println(me);
    }
    public Symbol getS(){
         return this.s;
    }
    public String getError(){
        return errores;
    }
    public void rstError(){
        errores = "";
    }
    

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$Sintax$actions {


    /*public void ObtenDatos(int fila, String tipoDato, String identificador, Object valor){
        IDE.m.addRow(new Object[]{fila, identificador, tipoDato, valor});
        System.out.println("Tipo: "+tipoDato + " Identificador: "+identificador+" Valor: "+valor);
    }*/
    public static String dato = ""; //dato de los no terminales
    public static String operador = ""; //dato de los no terminales
    /* public static ArrayList<String> listDato = new ArrayList<>();
    public static ArrayList<String> listOpe = new ArrayList<>(); */
    public static int contDato=0;
    public static int contOpe =0;
    private static int actual = 0;
    private static String nuevaTemp(){
        return "T"+(++actual);
    }

  private final Sintax parser;

  /** Constructor */
  CUP$Sintax$actions(Sintax parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$Sintax$do_action(
    int                        CUP$Sintax$act_num,
    java_cup.runtime.lr_parser CUP$Sintax$parser,
    java.util.Stack            CUP$Sintax$stack,
    int                        CUP$Sintax$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$Sintax$result;

      /* select the action based on the action number */
      switch (CUP$Sintax$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 607: // ERRORES ::= ERROR5 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 606: // ERRORES ::= ERROR4 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 605: // ERRORES ::= ERROR3 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 604: // ERRORES ::= ERROR2 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 603: // ERRORES ::= ERROR1 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ERRORES",36, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 602: // FILAMENT ::= PR_Filamenttype Cadena_texto OpAgrup_ParCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
                    this.parser.errores += "Error sintáctico 31. Linea: "+ (eright + 1) + ". Se esperaba un parentesis de apertura. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FILAMENT",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 601: // FILAMENT ::= PR_Filamenttype OpAgrup_ParApert OpAgrup_ParCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                    this.parser.errores += "Error sintáctico 31. Linea: "+ (eright + 1) + ". Se esperabancadena de texto entre los parectesis. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FILAMENT",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 600: // FILAMENT ::= PR_Filamenttype OpAgrup_ParApert Cadena_texto PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                    this.parser.errores += "Error sintáctico 31. Linea: "+ (eright + 1) + ". Se esperaba un parentesis de cierre. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FILAMENT",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 599: // FILAMENT ::= PR_Filamenttype OpAgrup_ParApert Cadena_texto OpAgrup_ParCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error sintáctico 31. Linea: "+ (eright + 1) + ". Se esperaba un punto y coma. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FILAMENT",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 598: // FILAMENT ::= PR_Filamenttype OpAgrup_ParApert Cadena_texto OpAgrup_ParCierre PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FILAMENT",51, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 597: // DRAWRECTANGULO ::= PR_Drawrectangulo LISTAPARAMETRO OpAgrup_ParCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
                    this.parser.errores += "Error sintáctico 31. Linea: "+ (eright + 1) + ". Se esperaba un parentesis de apertura. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DRAWRECTANGULO",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 596: // DRAWRECTANGULO ::= PR_Drawrectangulo OpAgrup_ParApert OpAgrup_ParCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                    this.parser.errores += "Error sintáctico 125. Linea: "+ (eright + 1) + ". Se esperaban parametros. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DRAWRECTANGULO",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 595: // DRAWRECTANGULO ::= PR_Drawrectangulo OpAgrup_ParApert LISTAPARAMETRO PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                    this.parser.errores += "Error sintáctico 31. Linea: "+ (eright + 1) + ". Se esperaba un parentesis de cierre. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DRAWRECTANGULO",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 594: // DRAWRECTANGULO ::= PR_Drawrectangulo OpAgrup_ParApert LISTAPARAMETRO OpAgrup_ParCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error sintáctico 31. Linea: "+ (eright + 1) + ". Se esperaba un punto y coma. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DRAWRECTANGULO",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 593: // DRAWRECTANGULO ::= PR_Drawrectangulo OpAgrup_ParApert LISTAPARAMETRO OpAgrup_ParCierre PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DRAWRECTANGULO",52, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 592: // LISTAPARAMETRO ::= Numero_Exact SimbEsp_Coma error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		this.parser.errores += "Error sintáctico 33. Línea: "+ (eright + 1) + ". Se esperaba un numero 'exact' despues del simbolo ,. \n";
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAPARAMETRO",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 591: // LISTAPARAMETRO ::= ERRORES SimbEsp_Coma LISTAPARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAPARAMETRO",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 590: // LISTAPARAMETRO ::= Numero_Exact SimbEsp_Coma LISTAPARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAPARAMETRO",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 589: // LISTAPARAMETRO ::= ERRORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAPARAMETRO",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 588: // LISTAPARAMETRO ::= Numero_Exact 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTAPARAMETRO",49, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 587: // FILLRECTANGULO ::= PR_Fillrectangulo LISTAPARAMETRO OpAgrup_ParCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		this.parser.errores += "Error sintáctico 31. Linea: "+ (eright + 1) + ". Se esperaba un parentesis de apertura. \n";
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FILLRECTANGULO",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 586: // FILLRECTANGULO ::= PR_Fillrectangulo OpAgrup_ParApert OpAgrup_ParCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                    this.parser.errores += "Error sintáctico 125. Linea: "+ (eright + 1) + ". Se esperaban parametros. \n";
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FILLRECTANGULO",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 585: // FILLRECTANGULO ::= PR_Fillrectangulo OpAgrup_ParApert LISTAPARAMETRO PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                    this.parser.errores += "Error sintáctico 31. Linea: "+ (eright + 1) + ". Se esperaba un parentesis de cierre. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FILLRECTANGULO",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 584: // FILLRECTANGULO ::= PR_Fillrectangulo OpAgrup_ParApert LISTAPARAMETRO OpAgrup_ParCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error sintáctico 31. Linea: "+ (eright + 1) + ". Se esperaba un punto y coma. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FILLRECTANGULO",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 583: // FILLRECTANGULO ::= PR_Fillrectangulo OpAgrup_ParApert LISTAPARAMETRO OpAgrup_ParCierre PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FILLRECTANGULO",48, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 582: // PRINTERPORT ::= PR_Port Numero_Exact OpAgrup_ParCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
                    this.parser.errores += "Error sintáctico 31. Linea: "+ (eright + 1) + ". Se esperaba un parentesis de apertura. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINTERPORT",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 581: // PRINTERPORT ::= PR_Port OpAgrup_ParApert OpAgrup_ParCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                    this.parser.errores += "Error sintáctico 124. Linea: "+ (eright + 1) + ". Se esperaba un numero 'Exact' entre los parentesis. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINTERPORT",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 580: // PRINTERPORT ::= PR_Port OpAgrup_ParApert Numero_Exact PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                    this.parser.errores += "Error sintáctico 31. Linea: "+ (eright + 1) + ". Se esperaba un parentesis de cierre. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINTERPORT",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 579: // PRINTERPORT ::= PR_Port OpAgrup_ParApert Numero_Exact OpAgrup_ParCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error sintáctico 31. Linea: "+ (eright + 1) + ". Se esperaba un punto y coma. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINTERPORT",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 578: // PRINTERPORT ::= PR_Port OpAgrup_ParApert Numero_Exact OpAgrup_ParCierre PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PRINTERPORT",44, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 577: // HOME ::= PR_Home OpAgrup_ParCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                    this.parser.errores += "Error sintáctico 31. Linea: "+ (eright + 1) + ". Se esperaba un parentesis de apertura. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("HOME",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 576: // HOME ::= PR_Home OpAgrup_ParApert error PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                    this.parser.errores += "Error sintáctico 31. Linea: "+ (eright + 1) + ". Se esperaba un parentesis de cierre. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("HOME",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 575: // HOME ::= PR_Home OpAgrup_ParApert OpAgrup_ParCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error sintáctico 31. Linea: "+ (eright + 1) + ". Se esperaba un punto y coma. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("HOME",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 574: // HOME ::= PR_Home OpAgrup_ParApert OpAgrup_ParCierre PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("HOME",43, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 573: // SETFILAMENT ::= PR_Setfilamenttype Cadena_texto OpAgrup_ParCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
                    this.parser.errores += "Error sintáctico 31. Linea: "+ (eright + 1) + ". Se esperaba un parentesis de apertura. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SETFILAMENT",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 572: // SETFILAMENT ::= PR_Setfilamenttype OpAgrup_ParApert OpAgrup_ParCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                    this.parser.errores += "Error sintáctico 31. Linea: "+ (eright + 1) + ". Se esperabancadena de texto entre los parectesis. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SETFILAMENT",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 571: // SETFILAMENT ::= PR_Setfilamenttype OpAgrup_ParApert Cadena_texto PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                    this.parser.errores += "Error sintáctico 31. Linea: "+ (eright + 1) + ". Se esperaba un parentesis de cierre. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SETFILAMENT",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 570: // SETFILAMENT ::= PR_Setfilamenttype OpAgrup_ParApert Cadena_texto OpAgrup_ParCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error sintáctico 31. Linea: "+ (eright + 1) + ". Se esperaba un punto y coma. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SETFILAMENT",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 569: // SETFILAMENT ::= PR_Setfilamenttype OpAgrup_ParApert Cadena_texto OpAgrup_ParCierre PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SETFILAMENT",42, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 568: // STOP ::= PR_Stop OpAgrup_ParCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                    this.parser.errores += "Error sintáctico 31. Linea: "+ (eright + 1) + ". Se esperaba un parentesis de apertura. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STOP",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 567: // STOP ::= PR_Stop OpAgrup_ParApert error PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                    this.parser.errores += "Error sintáctico 31. Linea: "+ (eright + 1) + ". Se esperaba un parentesis de cierre. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STOP",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 566: // STOP ::= PR_Stop OpAgrup_ParApert OpAgrup_ParCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error sintáctico 31. Linea: "+ (eright + 1) + ". Se esperaba un punto y coma. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STOP",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 565: // STOP ::= PR_Stop OpAgrup_ParApert OpAgrup_ParCierre PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("STOP",40, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 564: // TIPO_DATO ::= PR_Flag 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 563: // TIPO_DATO ::= PR_Word 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 562: // TIPO_DATO ::= PR_Part 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 561: // TIPO_DATO ::= PR_Exact 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("TIPO_DATO",27, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 560: // PARAMETRO ::= error Identificador SimbEsp_Coma PARAMETRO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
                    this.parser.errores += "Error sintáctico 118. Linea: "+ (eright + 1) + ". Se esperaba un tipo de dato antes del identificador. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 559: // PARAMETRO ::= TIPO_DATO SimbEsp_Coma PARAMETRO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                    this.parser.errores += "Error sintáctico 118. Linea: "+ (eright + 1) + ". Se esperaba un Identificador despues del tipo de dato. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 558: // PARAMETRO ::= TIPO_DATO Identificador PARAMETRO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                    this.parser.errores += "Error sintáctico 121. Linea: "+ (eright + 1) + ". Se esperaba simbolo ',' entre parametros. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 557: // PARAMETRO ::= TIPO_DATO Identificador SimbEsp_Coma error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error sintáctico 31. Linea: "+ (eright + 1) + ". Se esperaba un parametro. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 556: // PARAMETRO ::= ERRORES ERRORES SimbEsp_Coma PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 555: // PARAMETRO ::= TIPO_DATO ERRORES SimbEsp_Coma PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 554: // PARAMETRO ::= ERRORES Identificador SimbEsp_Coma PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 553: // PARAMETRO ::= ERRORES ERRORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 552: // PARAMETRO ::= TIPO_DATO ERRORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 551: // PARAMETRO ::= ERRORES Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 550: // PARAMETRO ::= TIPO_DATO Identificador SimbEsp_Coma PARAMETRO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 549: // PARAMETRO ::= TIPO_DATO Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("PARAMETRO",26, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 548: // RETORNO ::= PR_Return error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error sintáctico 114. Línea: "+ (eright + 1) + " Se esperaba un dato de SALIDA. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNO",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 547: // RETORNO ::= PR_Return PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                    this.parser.errores += "Error sintáctico 114. Línea: "+ (eright + 1) + " Se esperaba un dato de SALIDA. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNO",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 546: // RETORNO ::= PR_Return SALIDA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error sintáctico 121. Linea: "+ (eright + 1) + ". Se esperaba el simbolo ;. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNO",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 545: // RETORNO ::= PR_Return ERRORES PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNO",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 544: // RETORNO ::= PR_Return Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNO",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 543: // RETORNO ::= PR_Return SALIDA PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("RETORNO",25, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 542: // FUNCION ::= PR_Def Identificador OpAgrup_ParApert PARAMETRO OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		
                    this.parser.errores += "Error sintáctico 119. Linea: "+ (eright + 1) + ". Se esperaba la palabra reservada Void. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 541: // FUNCION ::= PR_Def PR_Void OpAgrup_ParApert PARAMETRO OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		
                    this.parser.errores += "Error sintáctico 118. Linea: "+ (eright + 1) + ". Se esperaba un identificador. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 540: // FUNCION ::= PR_Def PR_Void Identificador PARAMETRO OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
                    this.parser.errores += "Error sintáctico 29. Linea: "+ (eright + 1) + ". Se esperaba el simbolo (. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 539: // FUNCION ::= PR_Def PR_Void Identificador OpAgrup_ParApert PARAMETRO OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
                    this.parser.errores += "Error sintáctico 28. Linea: "+ (eright + 1) + ". Se esperaba el simbolo ). \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 538: // FUNCION ::= PR_Def PR_Void Identificador OpAgrup_ParApert PARAMETRO OpAgrup_ParCierre SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                    this.parser.errores += "Error sintáctico 2. Linea: "+ (eright + 1) + ". Se esperaba una { antes de la sentencia.. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 537: // FUNCION ::= PR_Def PR_Void Identificador OpAgrup_ParApert PARAMETRO OpAgrup_ParCierre OpAgrup_LlaveApert OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                    this.parser.errores += "Error sintáctico 118. Linea: "+ (eright + 1) + ". Se esperaba una sentencia entre las llaves. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 536: // FUNCION ::= PR_Def PR_Void Identificador OpAgrup_ParApert PARAMETRO OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error sintáctico 4. Linea: "+ (eright + 1) + ". Se esperaba una } despues de la sentencia. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 535: // FUNCION ::= PR_Def Identificador OpAgrup_ParApert PARAMETRO OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA RETORNO OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		
                    this.parser.errores += "Error sintáctico 119. Linea: "+ (eright + 1) + ". Se esperaba un tipo de dato despues de la palabra reservada Def. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 534: // FUNCION ::= PR_Def TIPO_DATO OpAgrup_ParApert OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA RETORNO OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		
                    this.parser.errores += "Error sintáctico 118. Linea: "+ (eright + 1) + ". Se esperaba un identificador. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 533: // FUNCION ::= PR_Def TIPO_DATO OpAgrup_ParApert PARAMETRO OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA RETORNO OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		
                    this.parser.errores += "Error sintáctico 118. Linea: "+ (eright + 1) + ". Se esperaba un identificador. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 532: // FUNCION ::= PR_Def TIPO_DATO Identificador PARAMETRO OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA RETORNO OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		
                    this.parser.errores += "Error sintáctico 29. Linea: "+ (eright + 1) + ". Se esperaba el simbolo (. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 531: // FUNCION ::= PR_Def TIPO_DATO Identificador OpAgrup_ParApert PARAMETRO OpAgrup_LlaveApert SENTENCIA RETORNO OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
                    this.parser.errores += "Error sintáctico 28. Linea: "+ (eright + 1) + ". Se esperaba el simbolo ). \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 530: // FUNCION ::= PR_Def TIPO_DATO Identificador OpAgrup_ParApert PARAMETRO OpAgrup_ParCierre SENTENCIA RETORNO OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
                    this.parser.errores += "Error sintáctico 2. Linea: "+ (eright + 1) + ". Se esperaba una { antes de la sentencia.. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 529: // FUNCION ::= PR_Def TIPO_DATO Identificador OpAgrup_ParApert PARAMETRO OpAgrup_ParCierre OpAgrup_LlaveApert RETORNO OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                    this.parser.errores += "Error sintáctico 118. Linea: "+ (eright + 1) + ". Se esperaba una sentencia entre las llaves. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 528: // FUNCION ::= PR_Def TIPO_DATO Identificador OpAgrup_ParApert PARAMETRO OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                    this.parser.errores += "Error sintáctico 120. Linea: "+ (eright + 1) + ". Se esperaba una Retorno. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 527: // FUNCION ::= PR_Def TIPO_DATO Identificador OpAgrup_ParApert PARAMETRO OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA RETORNO error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error sintáctico 4. Linea: "+ (eright + 1) + ". Se esperaba una } despues de la sentencia. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 526: // FUNCION ::= PR_Def Identificador OpAgrup_ParApert OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA RETORNO OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		
                    this.parser.errores += "Error sintáctico 119. Linea: "+ (eright + 1) + ". Se esperaba un tipo de dato despues de la palabra reservada Def. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 525: // FUNCION ::= PR_Def TIPO_DATO error OpAgrup_ParApert PARAMETRO OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA RETORNO OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		
                    this.parser.errores += "Error sintáctico 118. Linea: "+ (eright + 1) + ". Se esperaba un identificador. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 524: // FUNCION ::= PR_Def TIPO_DATO Identificador OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA RETORNO OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
                    this.parser.errores += "Error sintáctico 29. Linea: "+ (eright + 1) + ". Se esperaba el simbolo (. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 523: // FUNCION ::= PR_Def TIPO_DATO Identificador OpAgrup_ParApert OpAgrup_LlaveApert SENTENCIA RETORNO OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
                    this.parser.errores += "Error sintáctico 28. Linea: "+ (eright + 1) + ". Se esperaba el simbolo ). \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 522: // FUNCION ::= PR_Def TIPO_DATO Identificador OpAgrup_ParApert OpAgrup_ParCierre SENTENCIA RETORNO OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
                    this.parser.errores += "Error sintáctico 2. Linea: "+ (eright + 1) + ". Se esperaba una { antes de la sentencia.. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 521: // FUNCION ::= PR_Def TIPO_DATO Identificador OpAgrup_ParApert OpAgrup_ParCierre OpAgrup_LlaveApert RETORNO OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                    this.parser.errores += "Error sintáctico 118. Linea: "+ (eright + 1) + ". Se esperaba una sentencia entre las llaves. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 520: // FUNCION ::= PR_Def TIPO_DATO Identificador OpAgrup_ParApert OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                    this.parser.errores += "Error sintáctico 120. Linea: "+ (eright + 1) + ". Se esperaba una Retorno. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 519: // FUNCION ::= PR_Def TIPO_DATO Identificador OpAgrup_ParApert OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA RETORNO error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error sintáctico 4. Linea: "+ (eright + 1) + ". Se esperaba una } despues de la sentencia. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 518: // FUNCION ::= PR_Def Identificador OpAgrup_ParApert OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		
                    this.parser.errores += "Error sintáctico 119. Linea: "+ (eright + 1) + ". Se esperaba la palabra reservada Void. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 517: // FUNCION ::= PR_Def PR_Void error OpAgrup_ParApert OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
                    this.parser.errores += "Error sintáctico 118. Linea: "+ (eright + 1) + ". Se esperaba un identificador. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 516: // FUNCION ::= PR_Def PR_Void Identificador OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
                    this.parser.errores += "Error sintáctico 29. Linea: "+ (eright + 1) + ". Se esperaba el simbolo (. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 515: // FUNCION ::= PR_Def PR_Void Identificador OpAgrup_ParApert OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
                    this.parser.errores += "Error sintáctico 28. Linea: "+ (eright + 1) + ". Se esperaba el simbolo ). \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 514: // FUNCION ::= PR_Def PR_Void Identificador OpAgrup_ParApert OpAgrup_ParCierre SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                    this.parser.errores += "Error sintáctico 2. Linea: "+ (eright + 1) + ". Se esperaba una { antes de la sentencia.. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 513: // FUNCION ::= PR_Def PR_Void Identificador OpAgrup_ParApert OpAgrup_ParCierre OpAgrup_LlaveApert OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                    this.parser.errores += "Error sintáctico 118. Linea: "+ (eright + 1) + ". Se esperaba una sentencia entre las llaves. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 512: // FUNCION ::= PR_Def PR_Void Identificador OpAgrup_ParApert OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error sintáctico 4. Linea: "+ (eright + 1) + ". Se esperaba una } despues de la sentencia. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 511: // FUNCION ::= ERRORES ERRORES ERRORES OpAgrup_ParApert PARAMETRO OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 510: // FUNCION ::= PR_Def ERRORES ERRORES OpAgrup_ParApert PARAMETRO OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 509: // FUNCION ::= ERRORES PR_Void ERRORES OpAgrup_ParApert PARAMETRO OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 508: // FUNCION ::= ERRORES ERRORES Identificador OpAgrup_ParApert PARAMETRO OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 507: // FUNCION ::= PR_Def PR_Void ERRORES OpAgrup_ParApert PARAMETRO OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 506: // FUNCION ::= PR_Def ERRORES Identificador OpAgrup_ParApert PARAMETRO OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 505: // FUNCION ::= ERRORES PR_Void Identificador OpAgrup_ParApert PARAMETRO OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 504: // FUNCION ::= ERRORES ERRORES ERRORES OpAgrup_ParApert PARAMETRO OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA RETORNO OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 503: // FUNCION ::= PR_Def ERRORES ERRORES OpAgrup_ParApert PARAMETRO OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA RETORNO OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 502: // FUNCION ::= ERRORES TIPO_DATO ERRORES OpAgrup_ParApert PARAMETRO OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA RETORNO OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 501: // FUNCION ::= ERRORES ERRORES Identificador OpAgrup_ParApert PARAMETRO OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA RETORNO OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 500: // FUNCION ::= PR_Def TIPO_DATO ERRORES OpAgrup_ParApert PARAMETRO OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA RETORNO OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 499: // FUNCION ::= PR_Def ERRORES Identificador OpAgrup_ParApert PARAMETRO OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA RETORNO OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 498: // FUNCION ::= ERRORES TIPO_DATO Identificador OpAgrup_ParApert PARAMETRO OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA RETORNO OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 497: // FUNCION ::= ERRORES ERRORES ERRORES OpAgrup_ParApert OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA RETORNO OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 496: // FUNCION ::= PR_Def ERRORES ERRORES OpAgrup_ParApert OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA RETORNO OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 495: // FUNCION ::= ERRORES TIPO_DATO ERRORES OpAgrup_ParApert OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA RETORNO OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 494: // FUNCION ::= ERRORES ERRORES Identificador OpAgrup_ParApert OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA RETORNO OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 493: // FUNCION ::= PR_Def TIPO_DATO ERRORES OpAgrup_ParApert OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA RETORNO OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 492: // FUNCION ::= PR_Def ERRORES Identificador OpAgrup_ParApert OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA RETORNO OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 491: // FUNCION ::= ERRORES TIPO_DATO Identificador OpAgrup_ParApert OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA RETORNO OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 490: // FUNCION ::= ERRORES ERRORES Identificador OpAgrup_ParApert OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 489: // FUNCION ::= PR_Def ERRORES Identificador OpAgrup_ParApert OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 488: // FUNCION ::= ERRORES PR_Void Identificador OpAgrup_ParApert OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 487: // FUNCION ::= PR_Def PR_Void Identificador OpAgrup_ParApert PARAMETRO OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 486: // FUNCION ::= PR_Def TIPO_DATO Identificador OpAgrup_ParApert PARAMETRO OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA RETORNO OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 485: // FUNCION ::= PR_Def TIPO_DATO Identificador OpAgrup_ParApert OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA RETORNO OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 484: // FUNCION ::= PR_Def PR_Void Identificador OpAgrup_ParApert OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION",24, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 483: // FUNCION_MAIN ::= PR_Def PR_Main OpAgrup_ParApert OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		
                        this.parser.errores += "Error sintáctico 118. Linea: "+ (eright + 1) + ". Se esperaba la palabra reservada Void despues de la palabra reservada Def. \n";
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 482: // FUNCION_MAIN ::= PR_Def PR_Void OpAgrup_ParApert OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
                        this.parser.errores += "Error sintáctico 117. Linea: "+ (eright + 1) + ". Se esperaba la palabra reservada Main despues de la palabra reservada Def. \n";
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 481: // FUNCION_MAIN ::= PR_Def PR_Void PR_Main OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
                        this.parser.errores += "Error sintáctico 29. Linea: "+ (eright + 1) + ". Se esperaba el simbolo (. \n";
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 480: // FUNCION_MAIN ::= PR_Def PR_Void PR_Main OpAgrup_ParApert OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
                        this.parser.errores += "Error sintáctico 28. Linea: "+ (eright + 1) + ". Se esperaba el simbolo ). \n";
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 479: // FUNCION_MAIN ::= PR_Def PR_Void PR_Main OpAgrup_ParApert OpAgrup_ParCierre SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                        this.parser.errores += "Error sintáctico 2. Linea: "+ (eright + 1) + ". Se esperaba una { antes de la sentencia.. \n";
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 478: // FUNCION_MAIN ::= PR_Def PR_Void PR_Main OpAgrup_ParApert OpAgrup_ParCierre OpAgrup_LlaveApert OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                         this.parser.errores += "Error sintáctico 116. Linea: "+ (eright + 1) + ". Se esperaba una sentencia para el Main. \n";
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 477: // FUNCION_MAIN ::= PR_Def PR_Void PR_Main OpAgrup_ParApert OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                        this.parser.errores += "Error sintáctico 4. Linea: "+ (eright + 1) + ". Se esperaba una } despues de la sentencia. \n";
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 476: // FUNCION_MAIN ::= ERRORES ERRORES ERRORES OpAgrup_ParApert OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 475: // FUNCION_MAIN ::= PR_Def ERRORES ERRORES OpAgrup_ParApert OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 474: // FUNCION_MAIN ::= ERRORES PR_Void ERRORES OpAgrup_ParApert OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 473: // FUNCION_MAIN ::= ERRORES ERRORES PR_Main OpAgrup_ParApert OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 472: // FUNCION_MAIN ::= PR_Def PR_Void ERRORES OpAgrup_ParApert OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 471: // FUNCION_MAIN ::= PR_Def ERRORES PR_Main OpAgrup_ParApert OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 470: // FUNCION_MAIN ::= ERRORES PR_Void PR_Main OpAgrup_ParApert OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 469: // FUNCION_MAIN ::= PR_Def PR_Void PR_Main OpAgrup_ParApert OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_MAIN",32, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 468: // EXCEPCIONES ::= PR_Try SENTENCIA OpAgrup_LlaveCierre PR_Catch OpAgrup_ParApert PR_Exeption Identificador OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		
                    this.parser.errores += "Error sintáctico 92. Línea: "+ (eright + 1) + ". Se esperaba una llave { despues de la palabra reservada try. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXCEPCIONES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 467: // EXCEPCIONES ::= PR_Try OpAgrup_LlaveApert OpAgrup_LlaveCierre PR_Catch OpAgrup_ParApert PR_Exeption Identificador OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		
                    this.parser.errores += "Error sintáctico 91. Línea: "+ (eright + 1) + ". Se esperaba una SENTENCIA para el try. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXCEPCIONES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 466: // EXCEPCIONES ::= PR_Try OpAgrup_LlaveApert SENTENCIA PR_Catch OpAgrup_ParApert PR_Exeption Identificador OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		
                    this.parser.errores += "Error sintáctico 90. Línea: "+ (eright + 1) + ". Se esperaba una llave } despues de la SENTENCIA para el try. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXCEPCIONES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 465: // EXCEPCIONES ::= PR_Try OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre OpAgrup_ParApert PR_Exeption Identificador OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		
                    this.parser.errores += "Error sintáctico 89. Línea: "+ (eright + 1) + ". Se esperaba la palabra reservada catch despues de la llave }. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXCEPCIONES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 464: // EXCEPCIONES ::= PR_Try OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre PR_Catch PR_Exeption Identificador OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		
                    this.parser.errores += "Error sintáctico 88. Línea: "+ (eright + 1) + ". Se esperaba el simbolo (. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXCEPCIONES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 463: // EXCEPCIONES ::= PR_Try OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre PR_Catch OpAgrup_ParApert Identificador OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
                    this.parser.errores += "Error sintáctico 87. Línea: "+ (eright + 1) + ". Se esperaba la palabra reservada Exception entre los parentesis \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXCEPCIONES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 462: // EXCEPCIONES ::= PR_Try OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre PR_Catch OpAgrup_ParApert PR_Exeption OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
                    this.parser.errores += "Error sintáctico 86. Línea: "+ (eright + 1) + ". Se esperaba un identificador para la excepcion. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXCEPCIONES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 461: // EXCEPCIONES ::= PR_Try OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre PR_Catch OpAgrup_ParApert PR_Exeption Identificador OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
                    this.parser.errores += "Error sintáctico 85. Línea: "+ (eright + 1) + ". Se esperaba un simbolo ) para la excepcion. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXCEPCIONES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 460: // EXCEPCIONES ::= PR_Try OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre PR_Catch OpAgrup_ParApert PR_Exeption Identificador OpAgrup_ParCierre SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                    this.parser.errores += "Error sintáctico 84. Línea: "+ (eright + 1) + ". Se esperaba una llave { antes de la SENTENCIA del catch. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXCEPCIONES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 459: // EXCEPCIONES ::= PR_Try OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre PR_Catch OpAgrup_ParApert PR_Exeption Identificador OpAgrup_ParCierre OpAgrup_LlaveApert OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                    this.parser.errores += "Error sintáctico 83. Línea: "+ (eright + 1) + ". Se esperaba una SENTENCIA para el catch. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXCEPCIONES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 458: // EXCEPCIONES ::= PR_Try OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre PR_Catch OpAgrup_ParApert PR_Exeption Identificador OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error sintáctico 93. Línea: "+ (eright + 1) + ". Se esperaba una llave } despues de la SENTENCIA para el catch. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXCEPCIONES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 457: // EXCEPCIONES ::= PR_Try OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre PR_Catch OpAgrup_ParApert PR_Exeption ERRORES OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXCEPCIONES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 456: // EXCEPCIONES ::= PR_Try OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre PR_Catch OpAgrup_ParApert ERRORES Identificador OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXCEPCIONES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 455: // EXCEPCIONES ::= ERRORES OpAgrup_ParApert PR_Exeption Identificador OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXCEPCIONES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 454: // EXCEPCIONES ::= PR_Try OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre PR_Catch OpAgrup_ParApert PR_Exeption Identificador OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("EXCEPCIONES",23, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 453: // LISTA_FLAG ::= BOOLEAN SimbEsp_Coma 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error sintáctico 17. Línea: "+ (eright + 1) + ". Se esperaba un booleano. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_FLAG",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 452: // LISTA_FLAG ::= ERRORES SimbEsp_Coma LISTA_FLAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_FLAG",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 451: // LISTA_FLAG ::= BOOLEAN SimbEsp_Coma LISTA_FLAG 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_FLAG",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 450: // LISTA_FLAG ::= ERRORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_FLAG",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 449: // LISTA_FLAG ::= BOOLEAN 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_FLAG",22, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 448: // LISTA_WORD ::= Cadena_texto SimbEsp_Coma 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error sintáctico 17. Línea: "+ (eright + 1) + ". Se esperaba cadena de texto. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_WORD",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 447: // LISTA_WORD ::= ERRORES SimbEsp_Coma LISTA_WORD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_WORD",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 446: // LISTA_WORD ::= Cadena_texto SimbEsp_Coma LISTA_WORD 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_WORD",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 445: // LISTA_WORD ::= ERRORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_WORD",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 444: // LISTA_WORD ::= Cadena_texto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_WORD",21, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 443: // LISTA_PART ::= Numero_Part SimbEsp_Coma 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error sintáctico 17. Línea: "+ (eright + 1) + ". Se esperaba numero tipo part. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_PART",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 442: // LISTA_PART ::= ERRORES SimbEsp_Coma LISTA_PART 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_PART",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 441: // LISTA_PART ::= Numero_Part SimbEsp_Coma LISTA_PART 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_PART",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 440: // LISTA_PART ::= ERRORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_PART",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 439: // LISTA_PART ::= Numero_Part 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_PART",20, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 438: // LISTA_EXACT ::= Numero_Exact SimbEsp_Coma 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error sintáctico 17. Línea: "+ (eright + 1) + ". Se esperaba numero tipo exact. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_EXACT",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 437: // LISTA_EXACT ::= ERRORES SimbEsp_Coma LISTA_EXACT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_EXACT",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 436: // LISTA_EXACT ::= Numero_Exact SimbEsp_Coma LISTA_EXACT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_EXACT",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 435: // LISTA_EXACT ::= ERRORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_EXACT",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 434: // LISTA_EXACT ::= Numero_Exact 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_EXACT",19, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 433: // ARREGLO ::= PR_Flag OpAgrup_CorchCierre Identificador OpAsig OpAgrup_LlaveApert LISTA_FLAG OpAgrup_LlaveCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		
                    this.parser.errores += "Error sintáctico 61. Línea: "+ (eright + 1) + ". Se esperaba el simbolo [ . \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 432: // ARREGLO ::= PR_Flag OpAgrup_CorchApert Identificador OpAsig OpAgrup_LlaveApert LISTA_FLAG OpAgrup_LlaveCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		
                    this.parser.errores += "Error sintáctico 60. Línea: "+ (eright + 1) + ". Se esperaba el simbolo ] . \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 431: // ARREGLO ::= PR_Flag OpAgrup_CorchApert OpAgrup_CorchCierre OpAsig OpAgrup_LlaveApert LISTA_FLAG OpAgrup_LlaveCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
                    this.parser.errores += "Error sintáctico 59. Línea: "+ (eright + 1) + ". Se esperaba un identificador despues de los corchetes. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 430: // ARREGLO ::= PR_Flag OpAgrup_CorchApert OpAgrup_CorchCierre Identificador OpAgrup_LlaveApert LISTA_FLAG OpAgrup_LlaveCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
                    this.parser.errores += "Error sintáctico 58. Línea: "+ (eright + 1) + ". Se esperaba operador de asignacion antes de la llave {. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 429: // ARREGLO ::= PR_Flag OpAgrup_CorchApert OpAgrup_CorchCierre Identificador OpAsig LISTA_FLAG OpAgrup_LlaveCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
                    this.parser.errores += "Error sintáctico 57. Línea: "+ (eright + 1) + ". Se esperaba un simbolo { despues del operador de asignacion. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 428: // ARREGLO ::= PR_Flag OpAgrup_CorchApert OpAgrup_CorchCierre Identificador OpAsig OpAgrup_LlaveApert OpAgrup_LlaveCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                    this.parser.errores += "Error sintáctico 66. Línea: "+ (eright + 1) + ". Se esperaba una lista de booleanos. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 427: // ARREGLO ::= PR_Flag OpAgrup_CorchApert OpAgrup_CorchCierre Identificador OpAsig OpAgrup_LlaveApert LISTA_FLAG PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                    this.parser.errores += "Error sintáctico 65. Línea: "+ (eright + 1) + ". Se esperaba un simbolo } despues de los booleanos. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 426: // ARREGLO ::= PR_Flag OpAgrup_CorchApert OpAgrup_CorchCierre Identificador OpAsig OpAgrup_LlaveApert LISTA_FLAG OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error sintáctico 17. Línea: "+ (eright + 1) + ". Se esperaba un ; al final. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 425: // ARREGLO ::= PR_Word OpAgrup_CorchCierre Identificador OpAsig OpAgrup_LlaveApert LISTA_WORD OpAgrup_LlaveCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		
                    this.parser.errores += "Error sintáctico 61. Línea: "+ (eright + 1) + ". Se esperaba el simbolo [ . \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 424: // ARREGLO ::= PR_Word OpAgrup_CorchApert Identificador OpAsig OpAgrup_LlaveApert LISTA_WORD OpAgrup_LlaveCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		
                    this.parser.errores += "Error sintáctico 60. Línea: "+ (eright + 1) + ". Se esperaba el simbolo ] . \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 423: // ARREGLO ::= PR_Word OpAgrup_CorchApert OpAgrup_CorchCierre OpAsig OpAgrup_LlaveApert LISTA_WORD OpAgrup_LlaveCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
                    this.parser.errores += "Error sintáctico 59. Línea: "+ (eright + 1) + ". Se esperaba un identificador despues de los corchetes. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 422: // ARREGLO ::= PR_Word OpAgrup_CorchApert OpAgrup_CorchCierre Identificador OpAgrup_LlaveApert LISTA_WORD OpAgrup_LlaveCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
                    this.parser.errores += "Error sintáctico 58. Línea: "+ (eright + 1) + ". Se esperaba operador de asignacion antes de la llave {. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 421: // ARREGLO ::= PR_Word OpAgrup_CorchApert OpAgrup_CorchCierre Identificador OpAsig LISTA_WORD OpAgrup_LlaveCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
                    this.parser.errores += "Error sintáctico 57. Línea: "+ (eright + 1) + ". Se esperaba un simbolo { despues del operador de asignacion. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 420: // ARREGLO ::= PR_Word OpAgrup_CorchApert OpAgrup_CorchCierre Identificador OpAsig OpAgrup_LlaveApert OpAgrup_LlaveCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                    this.parser.errores += "Error sintáctico 63. Línea: "+ (eright + 1) + ". Se esperaba una lista de cadenas de exto. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 419: // ARREGLO ::= PR_Word OpAgrup_CorchApert OpAgrup_CorchCierre Identificador OpAsig OpAgrup_LlaveApert LISTA_WORD PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                    this.parser.errores += "Error sintáctico 64. Línea: "+ (eright + 1) + ". Se esperaba un simbolo } despues de las cadenas de texto. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 418: // ARREGLO ::= PR_Word OpAgrup_CorchApert OpAgrup_CorchCierre Identificador OpAsig OpAgrup_LlaveApert LISTA_WORD OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error sintáctico 17. Línea: "+ (eright + 1) + ". Se esperaba un ; al final. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 417: // ARREGLO ::= PR_Part OpAgrup_CorchCierre Identificador OpAsig OpAgrup_LlaveApert LISTA_PART OpAgrup_LlaveCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		
                    this.parser.errores += "Error sintáctico 61. Línea: "+ (eright + 1) + ". Se esperaba el simbolo [ . \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 416: // ARREGLO ::= PR_Part OpAgrup_CorchApert Identificador OpAsig OpAgrup_LlaveApert LISTA_PART OpAgrup_LlaveCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		
                    this.parser.errores += "Error sintáctico 60. Línea: "+ (eright + 1) + ". Se esperaba el simbolo ] . \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 415: // ARREGLO ::= PR_Part OpAgrup_CorchApert OpAgrup_CorchCierre OpAsig OpAgrup_LlaveApert LISTA_PART OpAgrup_LlaveCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
                    this.parser.errores += "Error sintáctico 59. Línea: "+ (eright + 1) + ". Se esperaba un identificador despues de los corchetes. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 414: // ARREGLO ::= PR_Part OpAgrup_CorchApert OpAgrup_CorchCierre Identificador OpAgrup_LlaveApert LISTA_PART OpAgrup_LlaveCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
                    this.parser.errores += "Error sintáctico 58. Línea: "+ (eright + 1) + ". Se esperaba operador de asignacion antes de la llave {. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 413: // ARREGLO ::= PR_Part OpAgrup_CorchApert OpAgrup_CorchCierre Identificador OpAsig LISTA_PART OpAgrup_LlaveCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
                    this.parser.errores += "Error sintáctico 57. Línea: "+ (eright + 1) + ". Se esperaba un simbolo { despues del operador de asignacion. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 412: // ARREGLO ::= PR_Part OpAgrup_CorchApert OpAgrup_CorchCierre Identificador OpAsig OpAgrup_LlaveApert OpAgrup_LlaveCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                    this.parser.errores += "Error sintáctico 62. Línea: "+ (eright + 1) + ". Se esperaba una lista de numeros tipo Part. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 411: // ARREGLO ::= PR_Part OpAgrup_CorchApert OpAgrup_CorchCierre Identificador OpAsig OpAgrup_LlaveApert LISTA_PART PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                    this.parser.errores += "Error sintáctico 55. Línea: "+ (eright + 1) + ". Se esperaba un simbolo } despues de los numeros. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 410: // ARREGLO ::= PR_Part OpAgrup_CorchApert OpAgrup_CorchCierre Identificador OpAsig OpAgrup_LlaveApert LISTA_PART OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error sintáctico 17. Línea: "+ (eright + 1) + ". Se esperaba un ; al final. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 409: // ARREGLO ::= PR_Exact OpAgrup_CorchCierre Identificador OpAsig OpAgrup_LlaveApert LISTA_EXACT OpAgrup_LlaveCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		
                    this.parser.errores += "Error sintáctico 61. Línea: "+ (eright + 1) + ". Se esperaba el simbolo [ . \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 408: // ARREGLO ::= PR_Exact OpAgrup_CorchApert Identificador OpAsig OpAgrup_LlaveApert LISTA_EXACT OpAgrup_LlaveCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		
                    this.parser.errores += "Error sintáctico 60. Línea: "+ (eright + 1) + ". Se esperaba el simbolo ] . \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 407: // ARREGLO ::= PR_Exact OpAgrup_CorchApert OpAgrup_CorchCierre OpAsig OpAgrup_LlaveApert LISTA_EXACT OpAgrup_LlaveCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
                    this.parser.errores += "Error sintáctico 59. Línea: "+ (eright + 1) + ". Se esperaba un identificador despues de los corchetes. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 406: // ARREGLO ::= PR_Exact OpAgrup_CorchApert OpAgrup_CorchCierre Identificador OpAgrup_LlaveApert LISTA_EXACT OpAgrup_LlaveCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
                    this.parser.errores += "Error sintáctico 58. Línea: "+ (eright + 1) + ". Se esperaba operador de asignacion antes de la llave {. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 405: // ARREGLO ::= PR_Exact OpAgrup_CorchApert OpAgrup_CorchCierre Identificador OpAsig LISTA_EXACT OpAgrup_LlaveCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
                    this.parser.errores += "Error sintáctico 57. Línea: "+ (eright + 1) + ". Se esperaba un simbolo { despues del operador de asignacion. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 404: // ARREGLO ::= PR_Exact OpAgrup_CorchApert OpAgrup_CorchCierre Identificador OpAsig OpAgrup_LlaveApert OpAgrup_LlaveCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                    this.parser.errores += "Error sintáctico 56. Línea: "+ (eright + 1) + ". Se esperaba una lista de numeros tipo Exact. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 403: // ARREGLO ::= PR_Exact OpAgrup_CorchApert OpAgrup_CorchCierre Identificador OpAsig OpAgrup_LlaveApert LISTA_EXACT PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                    this.parser.errores += "Error sintáctico 55. Línea: "+ (eright + 1) + ". Se esperaba un simbolo } despues de los numeros. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 402: // ARREGLO ::= PR_Exact OpAgrup_CorchApert OpAgrup_CorchCierre Identificador OpAsig OpAgrup_LlaveApert LISTA_EXACT OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error sintáctico 17. Línea: "+ (eright + 1) + ". Se esperaba un ; al final. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 401: // ARREGLO ::= PR_Flag OpAgrup_CorchApert OpAgrup_CorchCierre Identificador OpAsig OpAgrup_LlaveApert LISTA_FLAG OpAgrup_LlaveCierre PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 400: // ARREGLO ::= PR_Word OpAgrup_CorchApert OpAgrup_CorchCierre Identificador OpAsig OpAgrup_LlaveApert LISTA_WORD OpAgrup_LlaveCierre PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 399: // ARREGLO ::= PR_Part OpAgrup_CorchApert OpAgrup_CorchCierre Identificador OpAsig OpAgrup_LlaveApert LISTA_PART OpAgrup_LlaveCierre PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 398: // ARREGLO ::= PR_Exact OpAgrup_CorchApert OpAgrup_CorchCierre Identificador OpAsig OpAgrup_LlaveApert LISTA_EXACT OpAgrup_LlaveCierre PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARREGLO",18, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 397: // WHILE ::= PR_While SENTENCIA_BOOLEANA OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
                this.parser.errores += "Error sintáctico 111. Línea: "+ (eright + 1) + ". Se esperaba un simbolo ( despues de la palabra reservada while. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 396: // WHILE ::= PR_While OpAgrup_ParApert OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
                this.parser.errores += "Error sintáctico 110. Línea: "+ (eright + 1) + ". Se esperaba una condicion dentro de los parentesis. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 395: // WHILE ::= PR_While OpAgrup_ParApert SENTENCIA_BOOLEANA OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
                this.parser.errores += "Error sintáctico 109. Línea: "+ (eright + 1) + ". Se esperaba un simbolo ) despues de la condicion. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 394: // WHILE ::= PR_While OpAgrup_ParApert SENTENCIA_BOOLEANA OpAgrup_ParCierre SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                this.parser.errores += "Error sintáctico 108. Línea: "+ (eright + 1) + ". Se esperaba una llave { despues de la condicion. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 393: // WHILE ::= PR_While OpAgrup_ParApert SENTENCIA_BOOLEANA OpAgrup_ParCierre OpAgrup_LlaveApert OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                this.parser.errores += "Error sintáctico 107. Línea: "+ (eright + 1) + ". Se esperaba SENTENCIA para el while. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 392: // WHILE ::= PR_While OpAgrup_ParApert SENTENCIA_BOOLEANA OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                this.parser.errores += "Error sintáctico 106. Línea: "+ (eright + 1) + ". Se esperaba una llave } al final de la sentencia while. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 391: // WHILE ::= PR_While OpAgrup_ParApert SENTENCIA_BOOLEANA OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("WHILE",17, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 390: // DEFAULT ::= PR_Default SENTENCIA PR_Interruption PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
                    this.parser.errores += "Error sintáctico 36. Línea: "+ (eright + 1) + ". Se esperaba simbolo : despues de la opcion. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFAULT",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 389: // DEFAULT ::= PR_Default SimbEsp_DosPuntos PR_Interruption PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                    this.parser.errores += "Error sintáctico 35. Línea: "+ (eright + 1) + ". Se esperaba SENTENCIA dentro de la opcion. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFAULT",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 388: // DEFAULT ::= PR_Default SimbEsp_DosPuntos SENTENCIA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error sintáctico 113. Línea: "+ (eright + 1) + ". Se esperaba la palabra reservada Interruption despues de la SENTENCIA. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFAULT",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 387: // DEFAULT ::= PR_Default SimbEsp_DosPuntos SENTENCIA PR_Interruption error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error sintáctico 17. Línea: "+ (eright + 1) + ". Se esperaba un ; al final. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFAULT",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 386: // DEFAULT ::= PR_Default SimbEsp_DosPuntos SENTENCIA PR_Interruption PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DEFAULT",37, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 385: // OPTION ::= PR_Option SimbEsp_DosPuntos SENTENCIA PR_Interruption PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
                    this.parser.errores += "Error sintáctico 37. Línea: "+ (eright + 1) + ". Se esperaba un número de tipo exact para el option. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPTION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 384: // OPTION ::= PR_Option Numero_Exact SENTENCIA PR_Interruption PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
                    this.parser.errores += "Error sintáctico 36. Línea: "+ (eright + 1) + ". Se esperaba simbolo : despues de la opcion. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPTION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 383: // OPTION ::= PR_Option Numero_Exact SimbEsp_DosPuntos PR_Interruption PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                    this.parser.errores += "Error sintáctico 35. Línea: "+ (eright + 1) + ". Se esperaba SENTENCIA dentro de la opcion. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPTION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 382: // OPTION ::= PR_Option Numero_Exact SimbEsp_DosPuntos SENTENCIA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error sintáctico 113. Línea: "+ (eright + 1) + ". Se esperaba la palabra reservada Interruption despues de la SENTENCIA. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPTION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 381: // OPTION ::= PR_Option Numero_Exact SimbEsp_DosPuntos SENTENCIA PR_Interruption 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error sintáctico 34. Línea: "+ (eright + 1) + ". Se esperaba un ; al final del option. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPTION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 380: // OPTION ::= PR_Option Numero_Exact SimbEsp_DosPuntos SENTENCIA PR_Interruption PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OPTION",16, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 379: // LISTA_OPTIONS ::= OPTION LISTA_OPTIONS 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_OPTIONS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 378: // LISTA_OPTIONS ::= OPTION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LISTA_OPTIONS",15, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 377: // OP_INCREMENTOS ::= Op_Decremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_INCREMENTOS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 376: // OP_INCREMENTOS ::= Op_Incremento 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_INCREMENTOS",13, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 375: // BOOLEAN ::= PR_False 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOLEAN",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 374: // BOOLEAN ::= PR_True 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("BOOLEAN",10, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 373: // OP_REL ::= OpRel_Diferente 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_REL",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 372: // OP_REL ::= OpRel_MayorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_REL",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 371: // OP_REL ::= OpRel_MenorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_REL",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 370: // OP_REL ::= OpRel_Igual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_REL",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 369: // OP_REL ::= OpRel_Mayor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_REL",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 368: // OP_REL ::= OpRel_Menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_REL",9, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 367: // LLAMAR_METODO ::= Identificador OpAgrup_ParCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                        this.parser.errores += "Error sintáctico 29. Linea: "+ (eright + 1) +  ". Se esperaba el símbolo '('. \n";
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_METODO",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 366: // LLAMAR_METODO ::= ERRORES OpAgrup_ParApert OpAgrup_ParCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_METODO",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 365: // LLAMAR_METODO ::= Identificador OpAgrup_ParApert OpAgrup_ParCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("LLAMAR_METODO",28, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 364: // OP_REL_MEN_MAY ::= OpRel_MayorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_REL_MEN_MAY",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 363: // OP_REL_MEN_MAY ::= OpRel_MenorIgual 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_REL_MEN_MAY",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 362: // OP_REL_MEN_MAY ::= OpRel_Mayor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_REL_MEN_MAY",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 361: // OP_REL_MEN_MAY ::= OpRel_Menor 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_REL_MEN_MAY",31, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 360: // SENTENCIA_BOOLEANA ::= Identificador SimbEsp_Punto SALIDA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                             this.parser.errores += "Error sintáctico 96. Linea: "+ (eright + 1) +  ". Se esperaba un método después del punto. \n";
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 359: // SENTENCIA_BOOLEANA ::= Identificador SimbEsp_Punto error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                             this.parser.errores += "Error sintáctico 96. Linea: "+ (eright + 1) +  ". Se esperaba un método después del punto. \n";
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 358: // SENTENCIA_BOOLEANA ::= Identificador SimbEsp_Punto OP_REL NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                             this.parser.errores += "Error sintáctico 82. Linea: "+ (eright + 1) +  ". Se esperaba un método después del punto. \n";
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 357: // SENTENCIA_BOOLEANA ::= Identificador SimbEsp_Punto OP_REL SALIDA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                             this.parser.errores += "Error sintáctico 82. Linea: "+ (eright + 1) +  ". Se esperaba un método después del punto. \n";
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 356: // SENTENCIA_BOOLEANA ::= Identificador SimbEsp_Punto LLAMAR_METODO error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                             this.parser.errores += "Error sintáctico 82. Linea: "+ (eright + 1) +  ". Se esperaba un operador relacional dentro de if. Nota: puede consultar la tabla de operadores. \n";
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 355: // SENTENCIA_BOOLEANA ::= Identificador SimbEsp_Punto LLAMAR_METODO NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                             this.parser.errores += "Error sintáctico 82. Linea: "+ (eright + 1) +  ". Se esperaba un operador relacional dentro de if. Nota: puede consultar la tabla de operadores. \n";
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 354: // SENTENCIA_BOOLEANA ::= Identificador SimbEsp_Punto LLAMAR_METODO SALIDA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                             this.parser.errores += "Error sintáctico 82. Linea: "+ (eright + 1) +  ". Se esperaba un operador relacional dentro de if. Nota: puede consultar la tabla de operadores. \n";
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 353: // SENTENCIA_BOOLEANA ::= Identificador SimbEsp_Punto METODOS OpAgrup_ParApert OP_REL NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                             this.parser.errores += "Error sintáctico 30. Linea: "+ (eright + 1) +  ". Se esperaba el símbolo ')'. \n";
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 352: // SENTENCIA_BOOLEANA ::= Identificador SimbEsp_Punto METODOS OpAgrup_ParApert OP_REL SALIDA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                             this.parser.errores += "Error sintáctico 30. Linea: "+ (eright + 1) +  ". Se esperaba el símbolo ')'. \n";
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 351: // SENTENCIA_BOOLEANA ::= Identificador SimbEsp_Punto METODOS OP_REL NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                             this.parser.errores += "Error sintáctico 53. Linea: "+ (eright + 1) +  ". Se esperaban paréntesis '()' para el método. \n";
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 350: // SENTENCIA_BOOLEANA ::= Identificador SimbEsp_Punto METODOS OP_REL SALIDA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                             this.parser.errores += "Error sintáctico 53. Linea: "+ (eright + 1) +  ". Se esperaban paréntesis '()' para el método. \n";
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 349: // SENTENCIA_BOOLEANA ::= SimbEsp_Punto LLAMAR_METODO OP_REL NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                            this.parser.errores += "Error sintáctico 38. Linea: "+ (eright + 1) +  ". Se esperaba un identificador antes del punto. \n";
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 348: // SENTENCIA_BOOLEANA ::= SimbEsp_Punto LLAMAR_METODO OP_REL SALIDA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                            this.parser.errores += "Error sintáctico 38. Linea: "+ (eright + 1) +  ". Se esperaba un identificador antes del punto. \n";
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 347: // SENTENCIA_BOOLEANA ::= Identificador LLAMAR_METODO OP_REL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                            this.parser.errores += "Error sintáctico 11. Linea: "+ (eright + 1) +  ". Se esperaba un punto entre el identificador y el método. \n";
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 346: // SENTENCIA_BOOLEANA ::= Identificador SimbEsp_Punto LLAMAR_METODO OP_REL 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                            this.parser.errores += "Error sintáctico 12. Linea: "+ (eright + 1) +  ". Sentencia dentro de if incompleta, se esperaba un valor para comparar. \n";
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 345: // SENTENCIA_BOOLEANA ::= Identificador LLAMAR_METODO OP_REL NUMERO 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                            this.parser.errores += "Error sintáctico 11. Linea: "+ (eright + 1) +  ". Se esperaba un punto entre el identificador y el método. \n";
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 344: // SENTENCIA_BOOLEANA ::= Identificador LLAMAR_METODO OP_REL SALIDA 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                            this.parser.errores += "Error sintáctico 11. Linea: "+ (eright + 1) +  ". Se esperaba un punto entre el identificador y el método. \n";
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 343: // SENTENCIA_BOOLEANA ::= Identificador SimbEsp_Punto LLAMAR_METODO OP_REL NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 342: // SENTENCIA_BOOLEANA ::= Identificador SimbEsp_Punto LLAMAR_METODO OP_REL SALIDA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 341: // SENTENCIA_BOOLEANA ::= Identificador OP_REL_MEN_MAY Cadena_texto 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                                this.parser.errores += "Error sintáctico 10. Linea: "+ (eright + 1) +  ". No es posible realizar esa comparación con cadena de texto. \n";
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 340: // SENTENCIA_BOOLEANA ::= Identificador OpRel_Diferente Cadena_texto 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                            if (IDE.tablaSimbolos_id.buscarToken(i.toString())) {
                                if (IDE.tablaSimbolos_id.buscaTipo(i.toString()) == null){
                                        this.parser.errores += "Error semantico 7. Línea: "+ (iright + 1) + " El identificador '"+ (i.toString())+"' no está definido \n";
                                }else if (!(IDE.tablaSimbolos_id.buscaTipo(i.toString()).equals("word") )){
                                    this.parser.errores += "Error semantico 10. Línea: "+ (iright + 1) + " Los identificadores no son compatibles. \n"; 
                                }
                            }
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 339: // SENTENCIA_BOOLEANA ::= ERRORES OpRel_Igual Cadena_texto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 338: // SENTENCIA_BOOLEANA ::= Identificador OpRel_Igual Cadena_texto 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                            if (IDE.tablaSimbolos_id.buscarToken(i.toString())) {
                                if (IDE.tablaSimbolos_id.buscaTipo(i.toString()) == null){
                                        this.parser.errores += "Error semantico 7. Línea: "+ (iright + 1) + " El identificador '"+ (i.toString())+"' no está definido \n";
                                }else if (!(IDE.tablaSimbolos_id.buscaTipo(i.toString()).equals("word") )){
                                    this.parser.errores += "Error semantico 10. Línea: "+ (iright + 1) + " Los identificadores no son compatibles. \n"; 
                                }
                            }
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 337: // SENTENCIA_BOOLEANA ::= Numero_Part OP_REL Numero_Part 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 336: // SENTENCIA_BOOLEANA ::= Numero_Part OP_REL Numero_Exact 
            {
              Object RESULT =null;
		
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 335: // SENTENCIA_BOOLEANA ::= Numero_Exact OP_REL Numero_Part 
            {
              Object RESULT =null;
		
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 334: // SENTENCIA_BOOLEANA ::= Numero_Exact OP_REL Numero_Exact 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 333: // SENTENCIA_BOOLEANA ::= Numero_Part OP_REL ERRORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 332: // SENTENCIA_BOOLEANA ::= Numero_Part OP_REL Identificador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                            if (IDE.tablaSimbolos_id.buscarToken(i.toString())) {
                                if (IDE.tablaSimbolos_id.buscaTipo(i.toString()) == null){
                                        this.parser.errores += "Error semantico 7. Línea: "+ (iright + 1) + " El identificador '"+ (i.toString())+"' no está definido \n";
                                }else if (!(IDE.tablaSimbolos_id.buscaTipo(i.toString()).equals("exact") || IDE.tablaSimbolos_id.buscaTipo(i.toString()).equals("part"))){
                                    this.parser.errores += "Error semantico 10. Línea: "+ (iright + 1) + " Los identificadores no son compatibles. \n"; 
                                }
                            }
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 331: // SENTENCIA_BOOLEANA ::= ERRORES OP_REL Numero_Part 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 330: // SENTENCIA_BOOLEANA ::= Identificador OP_REL Numero_Part 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                            if (IDE.tablaSimbolos_id.buscarToken(i.toString())) {
                                if (IDE.tablaSimbolos_id.buscaTipo(i.toString()) == null){
                                        this.parser.errores += "Error semantico 7. Línea: "+ (iright + 1) + " El identificador '"+ (i.toString())+"' no está definido \n";
                                }else if (!(IDE.tablaSimbolos_id.buscaTipo(i.toString()).equals("exact") || IDE.tablaSimbolos_id.buscaTipo(i.toString()).equals("part"))){
                                    this.parser.errores += "Error semantico 10. Línea: "+ (iright + 1) + " Los identificadores no son compatibles. \n"; 
                                }
                            }
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 329: // SENTENCIA_BOOLEANA ::= Numero_Exact OP_REL ERRORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 328: // SENTENCIA_BOOLEANA ::= Numero_Exact OP_REL Identificador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                            if (IDE.tablaSimbolos_id.buscarToken(i.toString())) {
                                if (IDE.tablaSimbolos_id.buscaTipo(i.toString()) == null){
                                        this.parser.errores += "Error semantico 7. Línea: "+ (iright + 1) + " El identificador '"+ (i.toString())+"' no está definido \n";
                                }else if (!(IDE.tablaSimbolos_id.buscaTipo(i.toString()).equals("exact") || IDE.tablaSimbolos_id.buscaTipo(i.toString()).equals("part"))){
                                    this.parser.errores += "Error semantico 10. Línea: "+ (iright + 1) + " Los identificadores no son compatibles. \n"; 
                                }
                            }
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 327: // SENTENCIA_BOOLEANA ::= ERRORES OP_REL Numero_Exact 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 326: // SENTENCIA_BOOLEANA ::= Identificador OP_REL Numero_Exact 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                            if (IDE.tablaSimbolos_id.buscarToken(i.toString())) {
                                if (IDE.tablaSimbolos_id.buscaTipo(i.toString()) == null){
                                        this.parser.errores += "Error semantico 7. Línea: "+ (iright + 1) + " El identificador '"+ (i.toString())+"' no está definido \n";
                                }else if (!(IDE.tablaSimbolos_id.buscaTipo(i.toString()).equals("exact") || IDE.tablaSimbolos_id.buscaTipo(i.toString()).equals("part"))){
                                    this.parser.errores += "Error semantico 10. Línea: "+ (iright + 1) + " Los identificadores no son compatibles. \n"; 
                                }
                            }
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 325: // SENTENCIA_BOOLEANA ::= ERRORES OP_REL ERRORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 324: // SENTENCIA_BOOLEANA ::= Identificador OP_REL ERRORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 323: // SENTENCIA_BOOLEANA ::= ERRORES OP_REL Identificador 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 322: // SENTENCIA_BOOLEANA ::= Identificador OP_REL Identificador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int oleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int oright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object o = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                            if (IDE.tablaSimbolos_id.buscarToken(i.toString()) && IDE.tablaSimbolos_id.buscarToken(o.toString())) {
                                if (IDE.tablaSimbolos_id.buscaTipo(i.toString()) == null){
                                        this.parser.errores += "Error semantico 7. Línea: "+ (iright + 1) + " El identificador '"+ (i.toString())+"' no está definido \n";
                                }else if(IDE.tablaSimbolos_id.buscaTipo(o.toString()) == null){
                                        this.parser.errores += "Error semantico 7. Línea: "+ (oright + 1) + " El identificador '"+ (o.toString())+"' no está definido \n";
                                }else if (!(IDE.tablaSimbolos_id.buscaTipo(i.toString()).equals("part") || IDE.tablaSimbolos_id.buscaTipo(i.toString()).equals("exact")) || IDE.tablaSimbolos_id.buscaTipo(o.toString()).equals("part") || IDE.tablaSimbolos_id.buscaTipo(o.toString()).equals("exact")){
                                    this.parser.errores += "Error semantico 10. Línea: "+ (oright + 1) + " No se puede realizar la comparación \n"; 
                                }else if (!(IDE.tablaSimbolos_id.buscaTipo(i.toString()).equals("part") || IDE.tablaSimbolos_id.buscaTipo(i.toString()).equals("exact"))){
                                    this.parser.errores += "Error semantico 10. Línea: "+ (oright + 1) + " Los identificadores no son compatibles. Revise el primer identificador \n"; 
                                }else if (!(IDE.tablaSimbolos_id.buscaTipo(o.toString()).equals("part") || IDE.tablaSimbolos_id.buscaTipo(o.toString()).equals("exact"))){
                                    this.parser.errores += "Error semantico 10. Línea: "+ (oright + 1) + " Los identificadores no son compatibles. Revise el segundo identificador\n"; 
                                }
                            }
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA_BOOLEANA",8, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 321: // FOR ::= PR_For OpAgrup_ParApert PR_Exact Identificador OpAsig Numero_Exact PuntoComa Identificador OP_REL Numero_Exact PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            this.parser.errores += "Error sintáctico 81. Línea: "+ (eright + 1) + " Se esperaba una '}' al final de la SENTENCIA del ciclo FOR. \n";
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 320: // FOR ::= PR_For OpAgrup_ParApert PR_Exact Identificador OpAsig Numero_Exact PuntoComa Identificador OP_REL Numero_Exact PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
            this.parser.errores += "Error sintáctico 80. Línea: "+ (eright + 1) + " Se esperaba una SENTENCIA despues de la '{' de la sentencia FOR. \n";
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 319: // FOR ::= PR_For OpAgrup_ParApert PR_Exact Identificador OpAsig Numero_Exact PuntoComa Identificador OP_REL Numero_Exact PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
            this.parser.errores += "Error sintáctico 79. Línea: "+ (eright + 1) + " Se esperaba una '{' al final de la sentencia FOR. \n";
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 318: // FOR ::= PR_For OpAgrup_ParApert PR_Exact Identificador OpAsig Numero_Exact PuntoComa Identificador OP_REL Numero_Exact PuntoComa Identificador OP_INCREMENTOS OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
            this.parser.errores += "Error sintáctico 78. Línea: "+ (eright + 1) + " Se esperaba un ')' al final de la sentencia FOR. \n";
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 317: // FOR ::= PR_For OpAgrup_ParApert PR_Exact Identificador OpAsig Numero_Exact PuntoComa Identificador OP_REL Numero_Exact PuntoComa Identificador OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
            this.parser.errores += "Error sintáctico 77. Línea: "+ (eright + 1) + " Se esperaba un '++' o '--' seguido del ultimo identificador de la sentencia FOR. \n";
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 316: // FOR ::= PR_For OpAgrup_ParApert PR_Exact Identificador OpAsig Numero_Exact PuntoComa Identificador OP_REL Numero_Exact PuntoComa OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
            this.parser.errores += "Error sintáctico 76. Línea: "+ (eright + 1) + " Se esperaba un identificador después del segundo ';' de la sentencia FOR. \n";
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 315: // FOR ::= PR_For OpAgrup_ParApert PR_Exact Identificador OpAsig Numero_Exact PuntoComa Identificador OP_REL Numero_Exact Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)).value;
		
            this.parser.errores += "Error sintáctico 72. Línea: "+ (eright + 1) + " Se esperaba un ';' después del número exact. \n";
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 314: // FOR ::= PR_For OpAgrup_ParApert PR_Exact Identificador OpAsig Numero_Exact PuntoComa Identificador OP_REL PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-7)).value;
		
            this.parser.errores += "Error sintáctico 75. Línea: "+ (eright + 1) + " Se esperaba un número exact despues del operador relacional. \n";
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 313: // FOR ::= PR_For OpAgrup_ParApert PR_Exact Identificador OpAsig Numero_Exact PuntoComa Identificador Numero_Exact PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)).value;
		
            this.parser.errores += "Error sintáctico 74. Línea: "+ (eright + 1) + " Se esperaba un operador relacional después del identificador. \n";
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 312: // FOR ::= PR_For OpAgrup_ParApert PR_Exact Identificador OpAsig Numero_Exact PuntoComa OP_REL Numero_Exact PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-9)).value;
		
            this.parser.errores += "Error sintáctico 73. Línea: "+ (eright + 1) + " Se esperaba un identificador despues del primer ';'. \n";
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 311: // FOR ::= PR_For OpAgrup_ParApert PR_Exact Identificador OpAsig Numero_Exact Identificador OP_REL Numero_Exact PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-10)).value;
		
            this.parser.errores += "Error sintáctico 72. Línea: "+ (eright + 1) + " Se esperaba un ';' después del número exact. \n";
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 310: // FOR ::= PR_For OpAgrup_ParApert PR_Exact Identificador OpAsig PuntoComa Identificador OP_REL Numero_Exact PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-11)).value;
		
            this.parser.errores += "Error sintáctico 16. Línea: "+ (eright + 1) + " Se esperaba un número de tipo exact. \n";
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 309: // FOR ::= PR_For OpAgrup_ParApert PR_Exact Identificador Numero_Exact PuntoComa Identificador OP_REL Numero_Exact PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-12)).value;
		
            this.parser.errores += "Error sintáctico 15. Línea: "+ (eright + 1) + " Se esperaba un operador de asignacion '=' despues del identificador. \n";
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 308: // FOR ::= PR_For OpAgrup_ParApert PR_Exact OpAsig Numero_Exact PuntoComa Identificador OP_REL Numero_Exact PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).value;
		
            this.parser.errores += "Error sintáctico 54.  Linea: "+ (eright + 1) +  ". Se esperaba un identificador después de la palabra reservada exact. \n";
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 307: // FOR ::= PR_For OpAgrup_ParApert Identificador OpAsig Numero_Exact PuntoComa Identificador OP_REL Numero_Exact PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-14)).value;
		
            this.parser.errores += "Error sintáctico 52.  Linea: "+ (eright + 1) +  ". Se esperaba la palabra reservada exact despues del parentesis de apertura e la sentencia for. \n";
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 306: // FOR ::= PR_For PR_Exact Identificador OpAsig Numero_Exact PuntoComa Identificador OP_REL Numero_Exact PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)).value;
		
            this.parser.errores += "Error sintáctico 39.  Linea: "+ (eright + 1) +  ". Se esperaba un símbolo '(' para sentencia for  \n";
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-15)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 305: // FOR ::= ERRORES OpAgrup_ParApert ERRORES ERRORES OpAsig ERRORES PuntoComa ERRORES OP_REL ERRORES PuntoComa ERRORES OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 304: // FOR ::= PR_For OpAgrup_ParApert ERRORES ERRORES OpAsig ERRORES PuntoComa ERRORES OP_REL ERRORES PuntoComa ERRORES OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 303: // FOR ::= ERRORES OpAgrup_ParApert ERRORES Identificador OpAsig ERRORES PuntoComa ERRORES OP_REL ERRORES PuntoComa ERRORES OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 302: // FOR ::= ERRORES OpAgrup_ParApert PR_Exact ERRORES OpAsig ERRORES PuntoComa ERRORES OP_REL ERRORES PuntoComa ERRORES OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 301: // FOR ::= ERRORES OpAgrup_ParApert ERRORES ERRORES OpAsig ERRORES PuntoComa ERRORES OP_REL Numero_Exact PuntoComa ERRORES OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 300: // FOR ::= ERRORES OpAgrup_ParApert PR_Exact ERRORES OpAsig ERRORES PuntoComa Identificador OP_REL ERRORES PuntoComa ERRORES OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 299: // FOR ::= PR_For OpAgrup_ParApert ERRORES Identificador OpAsig ERRORES PuntoComa ERRORES OP_REL ERRORES PuntoComa ERRORES OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 298: // FOR ::= ERRORES OpAgrup_ParApert PR_Exact Identificador OpAsig ERRORES PuntoComa ERRORES OP_REL ERRORES PuntoComa ERRORES OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 297: // FOR ::= ERRORES OpAgrup_ParApert PR_Exact ERRORES OpAsig ERRORES PuntoComa ERRORES OP_REL Numero_Exact PuntoComa ERRORES OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 296: // FOR ::= ERRORES OpAgrup_ParApert PR_Exact ERRORES OpAsig ERRORES PuntoComa ERRORES OP_REL ERRORES PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 295: // FOR ::= PR_For OpAgrup_ParApert PR_Exact ERRORES OpAsig ERRORES PuntoComa ERRORES OP_REL ERRORES PuntoComa ERRORES OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 294: // FOR ::= PR_For OpAgrup_ParApert ERRORES ERRORES OpAsig ERRORES PuntoComa ERRORES OP_REL Numero_Exact PuntoComa ERRORES OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 293: // FOR ::= PR_For OpAgrup_ParApert ERRORES ERRORES OpAsig ERRORES PuntoComa ERRORES OP_REL ERRORES PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 292: // FOR ::= ERRORES OpAgrup_ParApert ERRORES ERRORES OpAsig ERRORES PuntoComa Identificador OP_REL Numero_Exact PuntoComa ERRORES OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 291: // FOR ::= ERRORES OpAgrup_ParApert ERRORES ERRORES OpAsig ERRORES PuntoComa Identificador OP_REL ERRORES PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 290: // FOR ::= ERRORES OpAgrup_ParApert ERRORES ERRORES OpAsig ERRORES PuntoComa ERRORES OP_REL Numero_Exact PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 289: // FOR ::= PR_For OpAgrup_ParApert PR_Exact Identificador OpAsig ERRORES PuntoComa ERRORES OP_REL ERRORES PuntoComa ERRORES OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 288: // FOR ::= PR_For OpAgrup_ParApert PR_Exact ERRORES OpAsig ERRORES PuntoComa ERRORES OP_REL Numero_Exact PuntoComa ERRORES OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 287: // FOR ::= PR_For OpAgrup_ParApert PR_Exact ERRORES OpAsig ERRORES PuntoComa ERRORES OP_REL ERRORES PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 286: // FOR ::= ERRORES OpAgrup_ParApert PR_Exact Identificador OpAsig Numero_Exact PuntoComa Identificador OP_REL ERRORES PuntoComa ERRORES OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 285: // FOR ::= PR_For OpAgrup_ParApert ERRORES ERRORES OpAsig ERRORES PuntoComa Identificador OP_REL Numero_Exact PuntoComa ERRORES OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 284: // FOR ::= PR_For OpAgrup_ParApert ERRORES ERRORES OpAsig ERRORES PuntoComa Identificador OP_REL ERRORES PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 283: // FOR ::= PR_For OpAgrup_ParApert ERRORES ERRORES OpAsig ERRORES PuntoComa ERRORES OP_REL Numero_Exact PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 282: // FOR ::= ERRORES OpAgrup_ParApert ERRORES ERRORES OpAsig Numero_Exact PuntoComa Identificador OP_REL Numero_Exact PuntoComa ERRORES OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 281: // FOR ::= ERRORES OpAgrup_ParApert ERRORES ERRORES OpAsig Numero_Exact PuntoComa Identificador OP_REL ERRORES PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 280: // FOR ::= ERRORES OpAgrup_ParApert ERRORES ERRORES OpAsig Numero_Exact PuntoComa ERRORES OP_REL Numero_Exact PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 279: // FOR ::= ERRORES OpAgrup_ParApert ERRORES ERRORES OpAsig ERRORES PuntoComa Identificador OP_REL Numero_Exact PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 278: // FOR ::= PR_For OpAgrup_ParApert PR_Exact Identificador OpAsig Numero_Exact PuntoComa ERRORES OP_REL ERRORES PuntoComa ERRORES OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 277: // FOR ::= PR_For OpAgrup_ParApert PR_Exact Identificador OpAsig ERRORES PuntoComa ERRORES OP_REL Numero_Exact PuntoComa ERRORES OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 276: // FOR ::= PR_For OpAgrup_ParApert PR_Exact Identificador OpAsig ERRORES PuntoComa ERRORES OP_REL ERRORES PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 275: // FOR ::= PR_For OpAgrup_ParApert PR_Exact ERRORES OpAsig ERRORES PuntoComa Identificador OP_REL Numero_Exact PuntoComa ERRORES OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 274: // FOR ::= PR_For OpAgrup_ParApert PR_Exact ERRORES OpAsig ERRORES PuntoComa Identificador OP_REL ERRORES PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 273: // FOR ::= PR_For OpAgrup_ParApert PR_Exact ERRORES OpAsig ERRORES PuntoComa ERRORES OP_REL Numero_Exact PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 272: // FOR ::= PR_For OpAgrup_ParApert ERRORES ERRORES OpAsig Numero_Exact PuntoComa Identificador OP_REL Numero_Exact PuntoComa ERRORES OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 271: // FOR ::= PR_For OpAgrup_ParApert ERRORES ERRORES OpAsig Numero_Exact PuntoComa Identificador OP_REL ERRORES PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 270: // FOR ::= PR_For OpAgrup_ParApert ERRORES ERRORES OpAsig Numero_Exact PuntoComa ERRORES OP_REL Numero_Exact PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 269: // FOR ::= PR_For OpAgrup_ParApert ERRORES ERRORES OpAsig ERRORES PuntoComa Identificador OP_REL Numero_Exact PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 268: // FOR ::= ERRORES OpAgrup_ParApert ERRORES Identificador OpAsig Numero_Exact PuntoComa Identificador OP_REL Numero_Exact PuntoComa ERRORES OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 267: // FOR ::= ERRORES OpAgrup_ParApert ERRORES Identificador OpAsig Numero_Exact PuntoComa Identificador OP_REL ERRORES PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 266: // FOR ::= ERRORES OpAgrup_ParApert ERRORES Identificador OpAsig Numero_Exact PuntoComa ERRORES OP_REL Numero_Exact PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 265: // FOR ::= ERRORES OpAgrup_ParApert ERRORES Identificador OpAsig ERRORES PuntoComa Identificador OP_REL Numero_Exact PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 264: // FOR ::= ERRORES OpAgrup_ParApert ERRORES ERRORES OpAsig Numero_Exact PuntoComa Identificador OP_REL Numero_Exact PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 263: // FOR ::= PR_For OpAgrup_ParApert PR_Exact Identificador OpAsig Numero_Exact PuntoComa Identificador OP_REL ERRORES PuntoComa ERRORES OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 262: // FOR ::= PR_For OpAgrup_ParApert PR_Exact Identificador OpAsig Numero_Exact PuntoComa ERRORES OP_REL Numero_Exact PuntoComa ERRORES OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 261: // FOR ::= PR_For OpAgrup_ParApert PR_Exact Identificador OpAsig Numero_Exact PuntoComa ERRORES OP_REL ERRORES PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 260: // FOR ::= PR_For OpAgrup_ParApert PR_Exact Identificador OpAsig ERRORES PuntoComa Identificador OP_REL Numero_Exact PuntoComa ERRORES OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 259: // FOR ::= PR_For OpAgrup_ParApert PR_Exact Identificador OpAsig ERRORES PuntoComa Identificador OP_REL ERRORES PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 258: // FOR ::= PR_For OpAgrup_ParApert PR_Exact Identificador OpAsig ERRORES PuntoComa ERRORES OP_REL Numero_Exact PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 257: // FOR ::= PR_For OpAgrup_ParApert PR_Exact ERRORES OpAsig Numero_Exact PuntoComa Identificador OP_REL Numero_Exact PuntoComa ERRORES OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 256: // FOR ::= PR_For OpAgrup_ParApert PR_Exact ERRORES OpAsig Numero_Exact PuntoComa Identificador OP_REL ERRORES PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 255: // FOR ::= PR_For OpAgrup_ParApert PR_Exact ERRORES OpAsig Numero_Exact PuntoComa ERRORES OP_REL Numero_Exact PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 254: // FOR ::= PR_For OpAgrup_ParApert PR_Exact ERRORES OpAsig ERRORES PuntoComa Identificador OP_REL Numero_Exact PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 253: // FOR ::= PR_For OpAgrup_ParApert ERRORES Identificador OpAsig Numero_Exact PuntoComa Identificador OP_REL Numero_Exact PuntoComa ERRORES OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 252: // FOR ::= PR_For OpAgrup_ParApert ERRORES Identificador OpAsig Numero_Exact PuntoComa Identificador OP_REL ERRORES PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 251: // FOR ::= PR_For OpAgrup_ParApert ERRORES Identificador OpAsig Numero_Exact PuntoComa ERRORES OP_REL Numero_Exact PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 250: // FOR ::= PR_For OpAgrup_ParApert ERRORES Identificador OpAsig ERRORES PuntoComa Identificador OP_REL Numero_Exact PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 249: // FOR ::= PR_For OpAgrup_ParApert ERRORES ERRORES OpAsig Numero_Exact PuntoComa Identificador OP_REL Numero_Exact PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 248: // FOR ::= ERRORES OpAgrup_ParApert PR_Exact Identificador OpAsig Numero_Exact PuntoComa Identificador OP_REL Numero_Exact PuntoComa ERRORES OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 247: // FOR ::= ERRORES OpAgrup_ParApert PR_Exact Identificador OpAsig Numero_Exact PuntoComa Identificador OP_REL ERRORES PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 246: // FOR ::= ERRORES OpAgrup_ParApert PR_Exact Identificador OpAsig Numero_Exact PuntoComa ERRORES OP_REL Numero_Exact PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 245: // FOR ::= ERRORES OpAgrup_ParApert PR_Exact Identificador OpAsig ERRORES PuntoComa Identificador OP_REL Numero_Exact PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 244: // FOR ::= ERRORES OpAgrup_ParApert PR_Exact ERRORES OpAsig Numero_Exact PuntoComa Identificador OP_REL Numero_Exact PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 243: // FOR ::= ERRORES OpAgrup_ParApert ERRORES Identificador OpAsig Numero_Exact PuntoComa Identificador OP_REL Numero_Exact PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 242: // FOR ::= PR_For OpAgrup_ParApert PR_Exact Identificador OpAsig Numero_Exact PuntoComa Identificador OP_REL Numero_Exact PuntoComa ERRORES OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 241: // FOR ::= PR_For OpAgrup_ParApert PR_Exact Identificador OpAsig Numero_Exact PuntoComa Identificador OP_REL ERRORES PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 240: // FOR ::= PR_For OpAgrup_ParApert PR_Exact Identificador OpAsig Numero_Exact PuntoComa ERRORES OP_REL Numero_Exact PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 239: // FOR ::= PR_For OpAgrup_ParApert PR_Exact Identificador OpAsig ERRORES PuntoComa Identificador OP_REL Numero_Exact PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 238: // FOR ::= PR_For OpAgrup_ParApert PR_Exact ERRORES OpAsig Numero_Exact PuntoComa Identificador OP_REL Numero_Exact PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 237: // FOR ::= PR_For OpAgrup_ParApert ERRORES Identificador OpAsig Numero_Exact PuntoComa Identificador OP_REL Numero_Exact PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 236: // FOR ::= ERRORES OpAgrup_ParApert PR_Exact Identificador OpAsig Numero_Exact PuntoComa Identificador OP_REL Numero_Exact PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 235: // FOR ::= PR_For OpAgrup_ParApert PR_Exact Identificador OpAsig Numero_Exact PuntoComa Identificador OP_REL Numero_Exact PuntoComa Identificador OP_INCREMENTOS OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-13)).value;
		
                //
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FOR",12, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-16)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 234: // IF_ELSE ::= IF PR_Else OpAgrup_LlaveApert error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                this.parser.errores += "Error sintáctico 25.  Linea: "+ (eright + 1) +  ". Se esperaba sentencia dentro de else.  \n";
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 233: // IF_ELSE ::= IF PR_Else OpAgrup_LlaveApert SENTENCIA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                this.parser.errores += "Error sintáctico 26.  Linea: "+ (eright + 1) +  ". Se esperaba un símbolo '}' para sentencia else  \n";
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 232: // IF_ELSE ::= IF PR_Else OpAgrup_LlaveApert OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                this.parser.errores += "Error sintáctico 25.  Linea: "+ (eright + 1) +  ". Se esperaba sentencia dentro de else.  \n";
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 231: // IF_ELSE ::= IF PR_Else SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                this.parser.errores += "Error sintáctico 13.  Linea: "+ (eright + 1) +  ". Se esperaba un símbolo '{' para sentencia else.  \n";
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 230: // IF_ELSE ::= IF ERRORES OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 229: // IF_ELSE ::= IF PR_Else OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF_ELSE",11, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 228: // IF ::= PR_If OpAgrup_ParApert SENTENCIA_BOOLEANA OpAgrup_ParCierre OpAgrup_LlaveApert OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
            this.parser.errores += "Error sintáctico 5.  Linea: "+ (eright + 1) +  ". Se necesita sentencia dentro de if. \n";
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 227: // IF ::= PR_If OpAgrup_ParApert Identificador SimbEsp_Punto LLAMAR_METODO OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
            this.parser.errores += "Error sintáctico 8.  Linea: "+ (eright + 1) +  ". Se esperaba un símbolo '}' al final del if.  \n";
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-8)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 226: // IF ::= PR_If OpAgrup_ParApert SENTENCIA_BOOLEANA OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
            this.parser.errores += "Error sintáctico 8.  Linea: "+ (eright + 1) +  ". Se esperaba un símbolo '}' al final del if.  \n";
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 225: // IF ::= PR_If SENTENCIA_BOOLEANA OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		
            this.parser.errores += "Error sintáctico 7.  Linea: "+ (eright + 1) +  ". Se esperaba un símbolo '(' para sentencia if.  \n";
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 224: // IF ::= PR_If OpAgrup_ParApert SENTENCIA_BOOLEANA OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
            this.parser.errores += "Error sintáctico 6. Linea: "+ (eright + 1) +  ". Se espera símbolo ')' en sentencia de if. \n";
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 223: // IF ::= PR_If OpAgrup_ParApert OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
            this.parser.errores += "Error sintáctico 5. Linea: "+ (eright + 1) +  ". Se necesita sentencia dentro de if. \n";
        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 222: // IF ::= ERRORES OpAgrup_ParApert SENTENCIA_BOOLEANA OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 221: // IF ::= PR_If OpAgrup_ParApert SENTENCIA_BOOLEANA OpAgrup_ParCierre OpAgrup_LlaveApert SENTENCIA OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("IF",7, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-6)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 220: // SALIDA ::= Cadena_texto 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SALIDA",5, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 219: // CONCATENACION ::= error OpAritm_Suma CONCATENACION 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                            this.parser.errores += "Error sintáctico 51. Línea: "+ (eright + 1) + ". Se requiere concatenacion. \n";
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 218: // CONCATENACION ::= SALIDA OpAritm_Suma 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                            this.parser.errores += "Error sintáctico 51. Línea: "+ (eright + 1) + ". Se requiere concatenacion. \n";
                        
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 217: // CONCATENACION ::= ERRORES ERRORES CONCATENACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 216: // CONCATENACION ::= SALIDA ERRORES CONCATENACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 215: // CONCATENACION ::= Identificador OpAritm_Suma CONCATENACION 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 214: // CONCATENACION ::= NUMERO OpAritm_Suma CONCATENACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 213: // CONCATENACION ::= SALIDA OpAritm_Suma CONCATENACION 
            {
              Object RESULT =null;
		

                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 212: // CONCATENACION ::= SALIDA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("CONCATENACION",6, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 211: // FUNCION_SALIDA ::= PR_Imp CONCATENACION OpAgrup_ParCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
                        this.parser.errores += "Error sintáctico 50. Línea: "+ (eright + 1) + ". Se esperaba el simbolo ( antes de la concatenacion. \n";
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_SALIDA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 210: // FUNCION_SALIDA ::= PR_Imp OpAgrup_ParApert OpAgrup_ParCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                        this.parser.errores += "Error sintáctico 49. Línea: "+ (eright + 1) + ". Se esperaba una concatenacion entre los parentesis. \n";
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_SALIDA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 209: // FUNCION_SALIDA ::= PR_Imp OpAgrup_ParApert CONCATENACION PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                        this.parser.errores += "Error sintáctico 48. Línea: "+ (eright + 1) + ". Se esperaba un ) despues de la concatenacion. \n";
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_SALIDA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 208: // FUNCION_SALIDA ::= PR_Imp OpAgrup_ParApert CONCATENACION OpAgrup_ParCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                        this.parser.errores += "Error sintáctico 17. Línea: "+ (eright + 1) + ". Se esperaba un ; al final. \n";
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_SALIDA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 207: // FUNCION_SALIDA ::= ERRORES OpAgrup_ParApert CONCATENACION OpAgrup_ParCierre PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_SALIDA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 206: // FUNCION_SALIDA ::= PR_Imp OpAgrup_ParApert CONCATENACION OpAgrup_ParCierre PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_SALIDA",4, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 205: // FUNCION_ENTRADA ::= Identificador PR_Ing OpAgrup_ParApert OpAgrup_ParCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
                        this.parser.errores += "Error sintáctico 46. Línea: "+ (eright + 1) + ". Se esperaba el operador =. \n";
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_ENTRADA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 204: // FUNCION_ENTRADA ::= Identificador OpAsig OpAgrup_ParApert OpAgrup_ParCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
                        this.parser.errores += "Error sintáctico 45. Línea: "+ (eright + 1) + ". Se esperaba la palabra reservada ing. \n";
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_ENTRADA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 203: // FUNCION_ENTRADA ::= Identificador OpAsig PR_Ing OpAgrup_ParCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                        this.parser.errores += "Error sintáctico 47. Línea: "+ (eright + 1) + ". Se esperaba el simbolo ( despues de la palabra reservada ing. \n";
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_ENTRADA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 202: // FUNCION_ENTRADA ::= Identificador OpAsig PR_Ing OpAgrup_ParApert PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                        this.parser.errores += "Error sintáctico 30. Línea: "+ (eright + 1) + ". Se esperaba el simbolo ). \n";
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_ENTRADA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 201: // FUNCION_ENTRADA ::= Identificador OpAsig PR_Ing OpAgrup_ParApert OpAgrup_ParCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                        this.parser.errores += "Error sintáctico 17. Línea: "+ (eright + 1) + ". Se esperaba un ; al final. \n";
                    
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_ENTRADA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 200: // FUNCION_ENTRADA ::= ERRORES OpAsig ERRORES OpAgrup_ParApert OpAgrup_ParCierre PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_ENTRADA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 199: // FUNCION_ENTRADA ::= Identificador OpAsig ERRORES OpAgrup_ParApert OpAgrup_ParCierre PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_ENTRADA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 198: // FUNCION_ENTRADA ::= ERRORES OpAsig PR_Ing OpAgrup_ParApert OpAgrup_ParCierre PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_ENTRADA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 197: // FUNCION_ENTRADA ::= Identificador OpAsig PR_Ing OpAgrup_ParApert OpAgrup_ParCierre PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_ENTRADA",3, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 196: // METODOS_DEF ::= Identificador OpAgrup_ParApert OpAgrup_ParCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error sintáctico 17. Línea: "+ (eright + 1) + " Se esperaba un ';' al final de la instrucción. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODOS_DEF",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 195: // METODOS_DEF ::= Identificador OpAgrup_ParApert PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                    this.parser.errores += "Error sintáctico 70. Línea: "+ (eright + 1) + " Se esperaba un ')' antes del ';'. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODOS_DEF",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 194: // METODOS_DEF ::= Identificador OpAgrup_ParCierre PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                    this.parser.errores += "Error sintáctico 71. Línea: "+ (eright + 1) + " Se esperaba un '(' despues del identificador. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODOS_DEF",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 193: // METODOS_DEF ::= ERRORES OpAgrup_ParApert OpAgrup_ParCierre PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODOS_DEF",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 192: // METODOS_DEF ::= Identificador OpAgrup_ParApert OpAgrup_ParCierre PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("METODOS_DEF",35, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 191: // NUMERO ::= Numero_Exact 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 dato=v.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUMERO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 190: // NUMERO ::= Numero_Part 
            {
              Object RESULT =null;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		 dato=v.toString();
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("NUMERO",30, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 189: // ASIGNACION ::= Identificador NUMERO PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                this.parser.errores += "Error sintáctico 115. Línea: "+ (eright + 1) + " Se esperaba el operador de asignacion =. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 188: // ASIGNACION ::= Identificador SALIDA PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                this.parser.errores += "Error sintáctico 15. Línea: "+ (eright + 1) + " Se esperaba un operador de asignacion '=' despues del identificador. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 187: // ASIGNACION ::= Identificador OpAsig error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                this.parser.errores += "Error sintáctico 114. Línea: "+ (eright + 1) + " Se esperaba un dato despues del operador de asignacion =. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 186: // ASIGNACION ::= Identificador OpAsig PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                this.parser.errores += "Error sintáctico 114. Línea: "+ (eright + 1) + " Se esperaba un dato de SALIDA. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 185: // ASIGNACION ::= Identificador OpAsig NUMERO error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                this.parser.errores += "Error sintáctico 17. Línea: "+ (eright + 1) + " Se esperaba un ';' al final de la instrucción. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 184: // ASIGNACION ::= Identificador OpAsig SALIDA error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                this.parser.errores += "Error sintáctico 17. Línea: "+ (eright + 1) + " Se esperaba un ';' al final de la instrucción. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 183: // ASIGNACION ::= ERRORES OpAsig NUMERO PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 182: // ASIGNACION ::= ERRORES OpAsig SALIDA PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 181: // ASIGNACION ::= Identificador OpAsig ARITMETICAS PuntoComa 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    if (IDE.tablaSimbolos_id.buscarToken(i.toString())) { 
                        if (IDE.tablaSimbolos_id.buscaTipo(i.toString()) == null){ //si no tiene tipo
                            this.parser.errores += "Error semantico 7. Línea: "+ (eright + 1) + " El identificador '"+ (i.toString())+"' no está definido \n"; 
                        }else{
                            IDE.tablaSimbolos_id.asignaValor(i.toString(), dato);
                        }
                    }
                    IDE.numLineasExp.add(eright+1);
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 180: // ASIGNACION ::= Identificador OpAsig Cadena_texto PuntoComa 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    if (IDE.tablaSimbolos_id.buscarToken(i.toString())) { 
                        if (IDE.tablaSimbolos_id.buscaTipo(i.toString()) == null){ //si no tiene tipo
                            this.parser.errores += "Error semantico 7. Línea: "+ (eright + 1) + " El identificador '"+ (i.toString())+"' no está definido \n"; 
                        }else if(!IDE.tablaSimbolos_id.buscaTipo(i.toString()).equals("word") ){ //si no es del mismo tipo
                             this.parser.errores += "Error semantico 9. Línea: "+ (eright + 1) + " Asignación incompatible del identificador '"+ (i.toString())+"' \n";    
                        }else{
                            IDE.tablaSimbolos_id.asignaValor(i.toString(), v);
                            System.out.println(i.toString() + "=" + v); 
                            IDE.listSentencias.add(i.toString() + "=" + v);
                            RESULT = i;
                        }
                    }
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 179: // ASIGNACION ::= Identificador OpAsig PR_True PuntoComa 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    if (IDE.tablaSimbolos_id.buscarToken(i.toString())) { 
                        if (IDE.tablaSimbolos_id.buscaTipo(i.toString()) == null){ //si no tiene tipo
                            this.parser.errores += "Error semantico 7. Línea: "+ (eright + 1) + " El identificador '"+ (i.toString())+"' no está definido \n"; 
                        }else if(!IDE.tablaSimbolos_id.buscaTipo(i.toString()).equals("flag") ){ //si no es del mismo tipo
                             this.parser.errores += "Error semantico 9. Línea: "+ (eright + 1) + " Asignación incompatible del identificador '"+ (i.toString())+"' \n";    
                        }else{
                            IDE.tablaSimbolos_id.asignaValor(i.toString(), v);
                            System.out.println(i.toString() + "=" + v);
                            IDE.listSentencias.add(i.toString() + "=" + v);
                            RESULT = i;
                        }
                    }
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 178: // ASIGNACION ::= Identificador OpAsig PR_False PuntoComa 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    if (IDE.tablaSimbolos_id.buscarToken(i.toString())) { 
                        if (IDE.tablaSimbolos_id.buscaTipo(i.toString()) == null){ //si no tiene tipo
                            this.parser.errores += "Error semantico 7. Línea: "+ (eright + 1) + " El identificador '"+ (i.toString())+"' no está definido \n"; 
                        }else if(!IDE.tablaSimbolos_id.buscaTipo(i.toString()).equals("flag") ){ //si no es del mismo tipo
                             this.parser.errores += "Error semantico 9. Línea: "+ (eright + 1) + " Asignación incompatible del identificador '"+ (i.toString())+"' \n";    
                        }else{
                            IDE.tablaSimbolos_id.asignaValor(i.toString(), v);
                            System.out.println(i.toString() + "=" + v);
                            IDE.listSentencias.add(i.toString() + "=" + v);
                            RESULT = i;
                        }
                    }
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ASIGNACION",33, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 177: // OP_ARITMETICO ::= OpAritm_Resto 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		IDE.listOpe.add(op.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 176: // OP_ARITMETICO ::= OpAritm_Div 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		IDE.listOpe.add(op.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 175: // OP_ARITMETICO ::= OpAritm_Mult 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		IDE.listOpe.add(op.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 174: // OP_ARITMETICO ::= OpAritm_Resta 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		IDE.listOpe.add(op.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 173: // OP_ARITMETICO ::= OpAritm_Suma 
            {
              Object RESULT =null;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		IDE.listOpe.add(op.toString()); 
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("OP_ARITMETICO",39, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 172: // ARITMETICAS ::= ERRORES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 171: // ARITMETICAS ::= Identificador 
            {
              Object RESULT =null;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 170: // ARITMETICAS ::= NUMERO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 169: // ARITMETICAS ::= Identificador ARITMETICAS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		this.parser.errores += "Error sintáctico 115. Línea: "+ (eright + 1) + " Se esperaba un operador aritmético. \n";
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 168: // ARITMETICAS ::= Identificador OP_ARITMETICO ARITMETICAS 
            {
              Object RESULT =null;
		int e1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int e1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int opleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int opright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object op = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 167: // ARITMETICAS ::= ERRORES OP_ARITMETICO ARITMETICAS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		this.parser.errores += "Error sintáctico 154. Línea: "+ (eright + 1) + " Se esperaba un dato antes del operador. \n";
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 166: // ARITMETICAS ::= NUMERO ARITMETICAS 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		this.parser.errores += "Error sintáctico 115. Línea: "+ (eright + 1) + " Se esperaba un operador aritmético. \n";
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 165: // ARITMETICAS ::= Numero_Part OP_ARITMETICO ARITMETICAS 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 164: // ARITMETICAS ::= Numero_Exact OP_ARITMETICO ARITMETICAS 
            {
              Object RESULT =null;
		int n1left = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int n1right = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object n1 = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 163: // ARITMETICAS ::= OpAgrup_ParApert ARITMETICAS OpAgrup_ParCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("ARITMETICAS",38, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 162: // DECLARA_ID ::= PR_Word PR_Exact Identificador PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error semantico 8. Línea: "+ (eright + 1) + " Declaracion de identificador invalida, 'word' incorrecto . \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 161: // DECLARA_ID ::= PR_Word PR_Word Identificador PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error semantico 8. Línea: "+ (eright + 1) + " Declaracion de identificador invalida, 'word' incorrecto . \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 160: // DECLARA_ID ::= PR_Word PR_Flag Identificador PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error semantico 8. Línea: "+ (eright + 1) + " Declaracion de identificador invalida, 'word' incorrecto . \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 159: // DECLARA_ID ::= PR_Word PR_Part Identificador PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error semantico 8. Línea: "+ (eright + 1) + " Declaracion de identificador invalida 'word' incorrecto. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 158: // DECLARA_ID ::= PR_Flag PR_Exact Identificador PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error semantico 8. Línea: "+ (eright + 1) + " Declaracion de identificador invalida, 'flag' incorrecto . \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 157: // DECLARA_ID ::= PR_Flag PR_Word Identificador PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error semantico 8. Línea: "+ (eright + 1) + " Declaracion de identificador invalida, 'flag' incorrecto . \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 156: // DECLARA_ID ::= PR_Flag PR_Flag Identificador PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error semantico 8. Línea: "+ (eright + 1) + " Declaracion de identificador invalida, 'flag' incorrecto . \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 155: // DECLARA_ID ::= PR_Flag PR_Part Identificador PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error semantico 8. Línea: "+ (eright + 1) + " Declaracion de identificador invalida 'flag' incorrecto. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 154: // DECLARA_ID ::= PR_Part PR_Exact Identificador PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error semantico 8. Línea: "+ (eright + 1) + " Declaracion de identificador invalida, 'part' incorrecto . \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 153: // DECLARA_ID ::= PR_Part PR_Word Identificador PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error semantico 8. Línea: "+ (eright + 1) + " Declaracion de identificador invalida, 'part' incorrecto . \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 152: // DECLARA_ID ::= PR_Part PR_Flag Identificador PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error semantico 8. Línea: "+ (eright + 1) + " Declaracion de identificador invalida, 'part' incorrecto . \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 151: // DECLARA_ID ::= PR_Part PR_Part Identificador PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error semantico 8. Línea: "+ (eright + 1) + " Declaracion de identificador invalida 'part' incorrecto. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 150: // DECLARA_ID ::= PR_Exact PR_Exact Identificador PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error semantico 8. Línea: "+ (eright + 1) + " Declaracion de identificador invalida, 'exact' incorrecto . \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 149: // DECLARA_ID ::= PR_Exact PR_Word Identificador PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error semantico 8. Línea: "+ (eright + 1) + " Declaracion de identificador invalida, 'exact' incorrecto . \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 148: // DECLARA_ID ::= PR_Exact PR_Flag Identificador PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error semantico 8. Línea: "+ (eright + 1) + " Declaracion de identificador invalida, 'exact' incorrecto . \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 147: // DECLARA_ID ::= PR_Exact PR_Part Identificador PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error semantico 8. Línea: "+ (eright + 1) + " Declaracion de identificador invalida 'exact' incorrecto. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 146: // DECLARA_ID ::= PR_Word PR_Exact Identificador OpAsig Numero_Exact PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error semantico 8. Línea: "+ (eright + 1) + " Declaracion de identificador invalida, 'word' incorrecto . \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 145: // DECLARA_ID ::= PR_Word PR_Word Identificador OpAsig Numero_Exact PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error semantico 8. Línea: "+ (eright + 1) + " Declaracion de identificador invalida, 'word' incorrecto . \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 144: // DECLARA_ID ::= PR_Word PR_Flag Identificador OpAsig Numero_Exact PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error semantico 8. Línea: "+ (eright + 1) + " Declaracion de identificador invalida, 'word' incorrecto . \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 143: // DECLARA_ID ::= PR_Word PR_Part Identificador OpAsig Numero_Exact PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error semantico 8. Línea: "+ (eright + 1) + " Declaracion de identificador invalida 'word' incorrecto. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 142: // DECLARA_ID ::= PR_Flag PR_Exact Identificador OpAsig Numero_Exact PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error semantico 8. Línea: "+ (eright + 1) + " Declaracion de identificador invalida, 'flag' incorrecto . \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 141: // DECLARA_ID ::= PR_Flag PR_Word Identificador OpAsig Numero_Exact PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error semantico 8. Línea: "+ (eright + 1) + " Declaracion de identificador invalida, 'flag' incorrecto . \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 140: // DECLARA_ID ::= PR_Flag PR_Flag Identificador OpAsig Numero_Exact PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error semantico 8. Línea: "+ (eright + 1) + " Declaracion de identificador invalida, 'flag' incorrecto . \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 139: // DECLARA_ID ::= PR_Flag PR_Part Identificador OpAsig Numero_Exact PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error semantico 8. Línea: "+ (eright + 1) + " Declaracion de identificador invalida 'flag' incorrecto. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 138: // DECLARA_ID ::= PR_Part PR_Exact Identificador OpAsig Numero_Exact PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error semantico 8. Línea: "+ (eright + 1) + " Declaracion de identificador invalida, 'part' incorrecto . \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 137: // DECLARA_ID ::= PR_Part PR_Word Identificador OpAsig Numero_Exact PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error semantico 8. Línea: "+ (eright + 1) + " Declaracion de identificador invalida, 'part' incorrecto . \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 136: // DECLARA_ID ::= PR_Part PR_Flag Identificador OpAsig Numero_Exact PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error semantico 8. Línea: "+ (eright + 1) + " Declaracion de identificador invalida, 'part' incorrecto . \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 135: // DECLARA_ID ::= PR_Part PR_Part Identificador OpAsig Numero_Exact PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error semantico 8. Línea: "+ (eright + 1) + " Declaracion de identificador invalida 'part' incorrecto. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 134: // DECLARA_ID ::= PR_Exact PR_Exact Identificador OpAsig Numero_Exact PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error semantico 8. Línea: "+ (eright + 1) + " Declaracion de identificador invalida, 'exact' incorrecto . \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 133: // DECLARA_ID ::= PR_Exact PR_Word Identificador OpAsig Numero_Exact PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error semantico 8. Línea: "+ (eright + 1) + " Declaracion de identificador invalida, 'exact' incorrecto . \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 132: // DECLARA_ID ::= PR_Exact PR_Flag Identificador OpAsig Numero_Exact PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error semantico 8. Línea: "+ (eright + 1) + " Declaracion de identificador invalida, 'exact' incorrecto . \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 131: // DECLARA_ID ::= PR_Exact PR_Part Identificador OpAsig Numero_Exact PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error semantico 8. Línea: "+ (eright + 1) + " Declaracion de identificador invalida 'exact' incorrecto. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 130: // DECLARA_ID ::= PR_Flag Identificador 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error sintáctico 17. Línea: "+ (eright + 1) + " Se esperaba un ';' al final de la instrucción. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 129: // DECLARA_ID ::= PR_Flag PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                    this.parser.errores += "Error sintáctico 14. Línea: "+ (eright + 1) + " Se esperaba un identificador. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 128: // DECLARA_ID ::= PR_Flag ERRORES PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 127: // DECLARA_ID ::= PR_Flag Identificador PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                   if (IDE.tablaSimbolos_id.buscaTipo(i.toString()) == null) {
                            IDE.tablaSimbolos_id.ubicarToken(i.toString(),t.toString(), null);
                    }else {
                           this.parser.errores += "Error semántico 6. Línea: "+ (eright + 1) + " El identificador '"+ (i.toString())+"' ya está definido \n";
                         }
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 126: // DECLARA_ID ::= PR_Flag Identificador OpAsig Identificador 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error sintáctico 17. Línea: "+ (eright + 1) + " Se esperaba un ';' al final de la instrucción. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 125: // DECLARA_ID ::= PR_Flag Identificador OpAsig Identificador PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                    this.parser.errores += "Error sintáctico 24. Línea: "+ (eright + 1) + " Se esperaba un 'true' o 'false'. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 124: // DECLARA_ID ::= PR_Flag Identificador OpAsig BOOLEAN 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error sintáctico 17. Línea: "+ (eright + 1) + " Se esperaba un ';' al final de la instrucción. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 123: // DECLARA_ID ::= PR_Flag Identificador OpAsig PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                    this.parser.errores += "Error sintáctico 24. Línea: "+ (eright + 1) + " Se esperaba un 'true' o 'false'. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 122: // DECLARA_ID ::= PR_Flag Identificador BOOLEAN PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                    this.parser.errores += "Error sintáctico 15. Línea: "+ (eright + 1) + " Se esperaba un operador de asignacion '=' despues del identificador. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 121: // DECLARA_ID ::= PR_Flag OpAsig BOOLEAN PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
                    this.parser.errores += "Error sintáctico 14. Línea: "+ (eright + 1) + " Se esperaba un identificador. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 120: // DECLARA_ID ::= PR_Flag ERRORES OpAsig ERRORES PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 119: // DECLARA_ID ::= ERRORES ERRORES OpAsig BOOLEAN PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 118: // DECLARA_ID ::= PR_Flag Identificador OpAsig ERRORES PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 117: // DECLARA_ID ::= PR_Flag ERRORES OpAsig BOOLEAN PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 116: // DECLARA_ID ::= ERRORES Identificador OpAsig BOOLEAN PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 115: // DECLARA_ID ::= PR_Flag Identificador OpAsig PR_False PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    if (IDE.tablaSimbolos_id.buscaTipo(i.toString()) == null) {
                            IDE.tablaSimbolos_id.ubicarToken(i.toString(),t.toString(),v);
                    }else {
                           this.parser.errores += "Error semántico 6. Línea: "+ (eright + 1) + " El identificador '"+ (i.toString())+"' ya está definido \n";
                         }
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 114: // DECLARA_ID ::= PR_Flag Identificador OpAsig PR_True PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    if (IDE.tablaSimbolos_id.buscaTipo(i.toString()) == null) {
                            IDE.tablaSimbolos_id.ubicarToken(i.toString(),t.toString(),v);
                    }else {
                           this.parser.errores += "Error semántico 6. Línea: "+ (eright + 1) + " El identificador '"+ (i.toString())+"' ya está definido \n";
                         }
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 113: // DECLARA_ID ::= PR_Part Identificador 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error sintáctico 17. Línea: "+ (eright + 1) + " Se esperaba un ';' al final de la instrucción. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 112: // DECLARA_ID ::= PR_Part PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                    this.parser.errores += "Error sintáctico 14. Línea: "+ (eright + 1) + " Se esperaba un identificador. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 111: // DECLARA_ID ::= PR_Part ERRORES PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 110: // DECLARA_ID ::= PR_Part Identificador PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    if (IDE.tablaSimbolos_id.buscaTipo(i.toString()) == null) {
                            IDE.tablaSimbolos_id.ubicarToken(i.toString(),t.toString(),null);
                    }else {
                           this.parser.errores += "Error semántico 6. Línea: "+ (eright + 1) + " El identificador '"+ (i.toString())+"' ya está definido \n";
                         }
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 109: // DECLARA_ID ::= PR_Part Identificador OpAsig Numero_Part 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error sintáctico 17. Línea: "+ (eright + 1) + " Se esperaba un ';'. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 108: // DECLARA_ID ::= PR_Part Identificador OpAsig PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                    this.parser.errores += "Error sintáctico 33. Línea: "+ (eright + 1) + " Se esperaba un número de tipo part. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 107: // DECLARA_ID ::= PR_Part Identificador Numero_Part PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                    this.parser.errores += "Error sintáctico 15. Línea: "+ (eright + 1) + " Se esperaba un operador de asignacion '=' despues del identificador. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 106: // DECLARA_ID ::= PR_Part OpAsig Numero_Part PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
                    this.parser.errores += "Error sintáctico 14. Línea: "+ (eright + 1) + " Se esperaba un identificador. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 105: // DECLARA_ID ::= PR_Part ERRORES OpAsig ERRORES PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 104: // DECLARA_ID ::= ERRORES ERRORES OpAsig Numero_Part PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 103: // DECLARA_ID ::= PR_Part Identificador OpAsig ERRORES PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 102: // DECLARA_ID ::= PR_Part ERRORES OpAsig Numero_Part PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 101: // DECLARA_ID ::= ERRORES Identificador OpAsig Numero_Part PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 100: // DECLARA_ID ::= PR_Part Identificador OpAsig Numero_Part PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    if (IDE.tablaSimbolos_id.buscaTipo(i.toString()) == null) {
                            IDE.tablaSimbolos_id.ubicarToken(i.toString(),t.toString(),v);
                    }else {
                           this.parser.errores += "Error semántico 6. Línea: "+ (eright + 1) + " El identificador '"+ (i.toString())+"' ya está definido \n";
                         }
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 99: // DECLARA_ID ::= PR_Word Identificador 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error sintáctico 17. Línea: "+ (eright + 1) + " Se esperaba un ';' al final de la instrucción. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 98: // DECLARA_ID ::= PR_Word PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		this.parser.errores += "Error sintáctico 14. Línea: "+ (eright + 1) + " Se esperaba un identificador. \n";
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 97: // DECLARA_ID ::= PR_Word ERRORES PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 96: // DECLARA_ID ::= PR_Word Identificador PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    if (IDE.tablaSimbolos_id.buscaTipo(i.toString()) == null) {
                            IDE.tablaSimbolos_id.ubicarToken(i.toString(),t.toString(),null);
                    }else {
                           this.parser.errores += "Error semántico 6. Línea: "+ (eright + 1) + " El identificador '"+ (i.toString())+"' ya está definido \n";
                         }
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 95: // DECLARA_ID ::= PR_Word Identificador OpAsig PR_False PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                    this.parser.errores += "Error semántico 4. Línea: "+ (eright + 1) + " Tipo de dato incompatible. Se esperaba una cadena y se encontró valor booleano. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 94: // DECLARA_ID ::= PR_Word Identificador OpAsig PR_True PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                    this.parser.errores += "Error semántico 4. Línea: "+ (eright + 1) + " Tipo de dato incompatible. Se esperaba una cadena y se encontró valor booleano. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 93: // DECLARA_ID ::= PR_Word Identificador OpAsig Numero_Exact PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                    this.parser.errores += "Error semántico 3. Línea: "+ (eright + 1) + " Tipo de dato incompatible. Se esperaba una cadena y se encontró un número exact. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 92: // DECLARA_ID ::= PR_Word Identificador OpAsig Numero_Part PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                    this.parser.errores += "Error semántico 2. Línea: "+ (eright + 1) + " Tipo de dato incompatible. Se esperaba una cadena y se encontró un número part. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 91: // DECLARA_ID ::= PR_Word Identificador OpAsig Cadena_texto 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error sintáctico 17. Línea: "+ (eright + 1) + " Se esperaba un ';' al final de la instrucción. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 90: // DECLARA_ID ::= PR_Word Identificador OpAsig Identificador SimbEsp_Comilla PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
                    this.parser.errores += "Error sintáctico 19. Línea: "+ (eright + 1) + " Se esperaba una comilla simple antes de la cadena de texto. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 89: // DECLARA_ID ::= PR_Word Identificador OpAsig SimbEsp_Comilla Identificador PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                    this.parser.errores += "Error sintáctico 23. Línea: "+ (eright + 1) + " Se esperaba una comilla simple después de la cadena de texto. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 88: // DECLARA_ID ::= PR_Word Identificador OpAsig PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                    this.parser.errores += "Error sintáctico 18. Línea: "+ (eright + 1) + " Se esperaba una cadena de texto. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 87: // DECLARA_ID ::= PR_Word Identificador Cadena_texto PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                    this.parser.errores += "Error sintáctico 15. Línea: "+ (eright + 1) + " Se esperaba un operador de asignacion '=' despues del identificador. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 86: // DECLARA_ID ::= PR_Word OpAsig Cadena_texto PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
                    this.parser.errores += "Error sintáctico 14. Línea: "+ (eright + 1) + " Se esperaba un identificador. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 85: // DECLARA_ID ::= PR_Word ERRORES OpAsig ERRORES PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 84: // DECLARA_ID ::= ERRORES ERRORES OpAsig Cadena_texto PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 83: // DECLARA_ID ::= PR_Word Identificador OpAsig ERRORES PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 82: // DECLARA_ID ::= PR_Word ERRORES OpAsig Cadena_texto PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 81: // DECLARA_ID ::= ERRORES Identificador OpAsig Cadena_texto PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 80: // DECLARA_ID ::= PR_Word Identificador OpAsig Cadena_texto PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                   if (IDE.tablaSimbolos_id.buscaTipo(i.toString()) == null) {
                            IDE.tablaSimbolos_id.ubicarToken(i.toString(),t.toString(),v);
                    }else {
                           this.parser.errores += "Error semántico 6. Línea: "+ (eright + 1) + " El identificador '"+ (i.toString())+"' ya está definido \n";
                         }
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 79: // DECLARA_ID ::= PR_Exact Identificador 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error sintáctico 17. Línea: "+ (eright + 1) + " Se esperaba un ';' al final de la instrucción. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 78: // DECLARA_ID ::= PR_Exact PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                    this.parser.errores += "Error sintáctico 14. Línea: "+ (eright + 1) + " Se esperaba un identificador. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 77: // DECLARA_ID ::= PR_Exact ERRORES PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 76: // DECLARA_ID ::= ERRORES Identificador PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 75: // DECLARA_ID ::= PR_Exact Identificador PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                   if (IDE.tablaSimbolos_id.buscaTipo(i.toString()) == null) {
                            IDE.tablaSimbolos_id.ubicarToken(i.toString(),t.toString(),null);
                    }else {
                           this.parser.errores += "Error semántico 6. Línea: "+ (eright + 1) + " El identificador '"+ (i.toString())+"' ya está definido \n";
                         }
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 74: // DECLARA_ID ::= PR_Exact Identificador OpAsig Cadena_texto PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                    this.parser.errores += "Error semántico 5. Línea: "+ (eright + 1) + " Tipo de dato incompatible. Se esperaba un número exact y se encontró una cadena de texto. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 73: // DECLARA_ID ::= PR_Exact Identificador OpAsig Numero_Part PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                    this.parser.errores += "Error semántico 1. Línea: "+ (eright + 1) + " Tipo de dato incompatible. Se esperaba un número exact y se encontró uno part. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 72: // DECLARA_ID ::= PR_Exact Identificador OpAsig Numero_Exact 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		
                    this.parser.errores += "Error sintáctico 17. Línea: "+ (eright + 1) + " Se esperaba un ';' al final de la instrucción. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 71: // DECLARA_ID ::= PR_Exact Identificador OpAsig PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		
                    this.parser.errores += "Error sintáctico 16. Línea: "+ (eright + 1) + " Se esperaba un número de tipo exact. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 70: // DECLARA_ID ::= PR_Exact Identificador Numero_Exact PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		
                    this.parser.errores += "Error sintáctico 15. Línea: "+ (eright + 1) + " Se esperaba un operador de asignacion '=' despues del identificador. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 69: // DECLARA_ID ::= PR_Exact OpAsig Numero_Exact PuntoComa 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		
                    this.parser.errores += "Error sintáctico 14. Línea: "+ (eright + 1) + " Se esperaba un identificador. \n";
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 68: // DECLARA_ID ::= ERRORES ERRORES OpAsig ERRORES PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 67: // DECLARA_ID ::= ERRORES Identificador OpAsig ERRORES PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 66: // DECLARA_ID ::= ERRORES ERRORES OpAsig Numero_Exact PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 65: // DECLARA_ID ::= PR_Exact ERRORES OpAsig ERRORES PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 64: // DECLARA_ID ::= PR_Exact Identificador OpAsig ERRORES PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // DECLARA_ID ::= PR_Exact ERRORES OpAsig Numero_Exact PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // DECLARA_ID ::= ERRORES Identificador OpAsig Numero_Exact PuntoComa 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // DECLARA_ID ::= PR_Exact Identificador OpAsig Numero_Exact PuntoComa 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		int vleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int vright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object v = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		                   
                    //Si es nulo, devuelvo un error
                    if (IDE.tablaSimbolos_id.buscaTipo(i.toString()) == null) {
                            IDE.tablaSimbolos_id.ubicarToken(i.toString(),t.toString(),v);
                    }else {
                           this.parser.errores += "Error semántico 6. Línea: "+ (eright + 1) + " El identificador '"+ (i.toString())+"' ya está definido \n";
                         }
                
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("DECLARA_ID",2, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // SENTENCIA ::= DRAWRECTANGULO SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // SENTENCIA ::= DRAWRECTANGULO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // SENTENCIA ::= FILAMENT SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // SENTENCIA ::= FILAMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // SENTENCIA ::= FILLRECTANGULO SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // SENTENCIA ::= FILLRECTANGULO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // SENTENCIA ::= GETEXTRUSORZ SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // SENTENCIA ::= GETEXTRUSORZ 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // SENTENCIA ::= GETEXTRUSORY SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // SENTENCIA ::= GETEXTRUSORY 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // SENTENCIA ::= GETEXTRUSORX SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // SENTENCIA ::= GETEXTRUSORX 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // SENTENCIA ::= PRINTERPORT SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // SENTENCIA ::= PRINTERPORT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // SENTENCIA ::= SETFILAMENT SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // SENTENCIA ::= SETFILAMENT 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // SENTENCIA ::= HOME SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SENTENCIA ::= HOME 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SENTENCIA ::= STOP SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SENTENCIA ::= STOP 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // SENTENCIA ::= METODOS_DEF SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // SENTENCIA ::= METODOS_DEF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // SENTENCIA ::= ASIGNACION SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // SENTENCIA ::= ASIGNACION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // SENTENCIA ::= EXCEPCIONES SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // SENTENCIA ::= EXCEPCIONES 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // SENTENCIA ::= ARREGLO SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // SENTENCIA ::= ARREGLO 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // SENTENCIA ::= WHILE SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // SENTENCIA ::= WHILE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // SENTENCIA ::= SWITCH SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // SENTENCIA ::= SWITCH 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // SENTENCIA ::= FOR SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // SENTENCIA ::= FOR 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // SENTENCIA ::= IF_ELSE SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // SENTENCIA ::= IF_ELSE 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // SENTENCIA ::= IF SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // SENTENCIA ::= IF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // SENTENCIA ::= FUNCION_SALIDA SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // SENTENCIA ::= FUNCION_SALIDA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // SENTENCIA ::= FUNCION_ENTRADA SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // SENTENCIA ::= FUNCION_ENTRADA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SENTENCIA ::= DECLARA_ID SENTENCIA 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SENTENCIA ::= DECLARA_ID 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("SENTENCIA",1, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // FUNCION_DEF ::= FUNCION FUNCION_DEF 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_DEF",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // FUNCION_DEF ::= FUNCION 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("FUNCION_DEF",34, ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // INICIO ::= PR_Class Identificador OpAgrup_LlaveApert OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		this.parser.errores += "Error sintáctico 115. Linea: "+ (eright + 1) + ". Se esperaba la funcion MAIN. \n";
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // INICIO ::= PR_Class Identificador OpAgrup_LlaveApert error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		this.parser.errores += "Error sintáctico 4. Linea: "+ (eright + 1) + ". Se esperaba una } despues de la sentencia. \n";
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // INICIO ::= PR_Class Identificador OpAgrup_LlaveApert FUNCION_MAIN error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		this.parser.errores += "Error sintáctico 4. Linea: "+ (eright + 1) + ". Se esperaba una } despues de la sentencia. \n";
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // INICIO ::= PR_Class Identificador OpAgrup_LlaveApert FUNCION_MAIN FUNCION_DEF error 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.peek()).value;
		this.parser.errores += "Error sintáctico 4. Linea: "+ (eright + 1) + ". Se esperaba una } despues de la sentencia. \n";
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // INICIO ::= PR_Class Identificador OpAgrup_LlaveApert FUNCION_DEF OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		this.parser.errores += "Error sintáctico 3. Linea: "+ (eright + 1) + ". Se esperaba una funcion principal MAIN entre las llaves. \n";
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // INICIO ::= PR_Class Identificador FUNCION_MAIN OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-2)).value;
		this.parser.errores += "Error sintáctico 2. Linea: "+ (eright + 1) + ". Se esperaba una { antes de la sentencia. \n";
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INICIO ::= PR_Class Identificador FUNCION_MAIN FUNCION_DEF OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		this.parser.errores += "Error sintáctico 2. Linea: "+ (eright + 1) + ". Se esperaba una { antes de la sentencia. \n";
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INICIO ::= PR_Class OpAgrup_LlaveApert FUNCION_MAIN OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)).value;
		this.parser.errores += "Error sintáctico 1. Linea: "+ (eright + 1) + ". Se esperaba un identificador antes de la llave de apertura. \n";
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-3)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INICIO ::= PR_Class OpAgrup_LlaveApert FUNCION_MAIN FUNCION_DEF OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int eleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object e = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		this.parser.errores += "Error sintáctico 1. Linea: "+ (eright + 1) + ". Se esperaba un identificador antes de la llave de apertura. \n";
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INICIO ::= PR_Class Identificador OpAgrup_LlaveApert FUNCION_MAIN OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INICIO ::= ERRORES ERRORES OpAgrup_LlaveApert FUNCION_MAIN FUNCION_DEF OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INICIO ::= PR_Class ERRORES OpAgrup_LlaveApert FUNCION_MAIN FUNCION_DEF OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= ERRORES Identificador OpAgrup_LlaveApert FUNCION_MAIN FUNCION_DEF OpAgrup_LlaveCierre 
            {
              Object RESULT =null;

              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= PR_Class Identificador OpAgrup_LlaveApert FUNCION_MAIN FUNCION_DEF OpAgrup_LlaveCierre 
            {
              Object RESULT =null;
		int tleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).right;
		Object t = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).right;
		Object i = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-4)).value;
		
                if (IDE.tablaSimbolos_id.buscarToken(i.toString())) {
                        IDE.tablaSimbolos_id.ubicarToken(i.toString(),t.toString());
                    }
            
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-5)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          return CUP$Sintax$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)).value;
		RESULT = start_val;
              CUP$Sintax$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$Sintax$stack.elementAt(CUP$Sintax$top-1)), ((java_cup.runtime.Symbol)CUP$Sintax$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$Sintax$parser.done_parsing();
          return CUP$Sintax$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

