/* The following code was generated by JFlex 1.4.3 on 30/03/22 09:47 */

package compilador;
import java_cup.runtime.Symbol;

/**
 * This class is a scanner generated by 
 * <a href="http://www.jflex.de/">JFlex</a> 1.4.3
 * on 30/03/22 09:47 from the specification file
 * <tt>D:/Principales/Documentos/ITTEPIC/8 Octavo/Aut√≥matas II/Compilador 2/CompiladorJAP-marzo-2022/src/compilador/LexerCup.flex</tt>
 */
class LexerCup implements java_cup.runtime.Scanner {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = { 
     0, 0
  };

  /** 
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = {
     0,  0,  0,  0,  0,  0,  0,  0,  0,  7,  6,  0,  7,  5,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     7, 33,  0,  0,  0, 38, 31,  4, 42, 43, 36, 34,  3, 35, 49, 37, 
     2,  2,  2,  2,  2,  2,  2,  2,  2,  2, 50, 48, 39, 41, 40,  0, 
     0,  1,  1,  1,  1, 52,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 
    30,  1,  1,  1,  1,  1,  1,  1,  1,  1,  1, 44,  0, 45,  0, 51, 
     0,  9,  1,  8, 14, 15, 16, 23, 11, 20,  1,  1, 12, 25, 22, 21, 
    19,  1, 24, 13, 10, 17, 28, 27, 18, 26, 29, 46, 32, 47,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0, 
     0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0,  0
  };

  /** 
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\1\0\1\1\1\2\1\3\1\4\1\5\2\6\20\2"+
    "\2\1\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\1\30\2\31\1\32\1\0\1\33\21\2"+
    "\1\34\12\2\1\35\1\36\1\37\1\3\1\40\1\0"+
    "\1\41\1\0\1\6\1\42\1\43\1\44\1\3\1\31"+
    "\1\45\1\46\1\45\1\0\3\2\1\47\5\2\1\50"+
    "\7\2\1\51\2\2\1\52\1\53\10\2\1\45\1\54"+
    "\2\0\2\31\1\45\1\3\2\45\1\46\1\45\1\55"+
    "\1\32\2\45\1\55\2\2\1\56\1\57\1\60\5\2"+
    "\1\61\1\62\3\2\1\63\1\2\1\64\1\65\4\2"+
    "\1\66\1\2\1\67\1\70\1\71\2\0\1\6\1\45"+
    "\1\54\1\55\1\46\1\45\1\55\1\72\1\73\1\74"+
    "\5\2\1\75\1\76\5\2\1\77\2\54\2\2\1\100"+
    "\4\2\1\101\1\2\1\102\2\2\1\103\14\2\1\104"+
    "\15\2\1\105\1\106\1\107\1\2\1\110\1\111\1\112"+
    "\1\113\1\114\2\2\1\115";

  private static int [] zzUnpackAction() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /** 
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\65\0\152\0\237\0\65\0\324\0\u0109\0\65"+
    "\0\u013e\0\u0173\0\u01a8\0\u01dd\0\u0212\0\u0247\0\u027c\0\u02b1"+
    "\0\u02e6\0\u031b\0\u0350\0\u0385\0\u03ba\0\u03ef\0\u0424\0\u0459"+
    "\0\u048e\0\u04c3\0\u04f8\0\u052d\0\u0562\0\u0597\0\65\0\65"+
    "\0\u05cc\0\u0601\0\u0636\0\65\0\65\0\65\0\65\0\65"+
    "\0\65\0\65\0\65\0\65\0\u066b\0\u06a0\0\u06d5\0\324"+
    "\0\65\0\u070a\0\u073f\0\u0774\0\u07a9\0\u07de\0\u0813\0\u0848"+
    "\0\u087d\0\u08b2\0\u08e7\0\u091c\0\u0951\0\u0986\0\u09bb\0\u09f0"+
    "\0\u0a25\0\u0a5a\0\152\0\u0a8f\0\u0ac4\0\u0af9\0\u0b2e\0\u0b63"+
    "\0\u0b98\0\u0bcd\0\u0c02\0\u0c37\0\u0c6c\0\65\0\65\0\65"+
    "\0\u0ca1\0\u0cd6\0\u0cd6\0\u0cd6\0\u0d0b\0\u0d40\0\65\0\65"+
    "\0\65\0\u0d75\0\u0daa\0\u0ddf\0\u0e14\0\u0e49\0\u0e7e\0\u0eb3"+
    "\0\u0ee8\0\u0f1d\0\152\0\u0f52\0\u0f87\0\u0fbc\0\u0ff1\0\u1026"+
    "\0\u105b\0\u1090\0\u10c5\0\u10fa\0\u112f\0\u1164\0\u1199\0\u11ce"+
    "\0\152\0\u1203\0\u1238\0\152\0\152\0\u126d\0\u12a2\0\u12d7"+
    "\0\u130c\0\u1341\0\u1376\0\u13ab\0\u13e0\0\u1415\0\u144a\0\u147f"+
    "\0\u14b4\0\u14e9\0\u151e\0\u1553\0\u1588\0\u15bd\0\u15f2\0\u1627"+
    "\0\u165c\0\u1691\0\u16c6\0\u16fb\0\u1730\0\u1765\0\u179a\0\u17cf"+
    "\0\152\0\152\0\152\0\u1804\0\u1839\0\u186e\0\u18a3\0\u18d8"+
    "\0\152\0\152\0\u190d\0\u1942\0\u1977\0\152\0\u19ac\0\152"+
    "\0\152\0\u19e1\0\u1a16\0\u1a4b\0\u1a80\0\152\0\u1ab5\0\152"+
    "\0\152\0\152\0\u1aea\0\u1b1f\0\u14b4\0\u1b54\0\u1b89\0\u1bbe"+
    "\0\u1bf3\0\u1c28\0\u1c5d\0\152\0\152\0\152\0\u1c92\0\u1cc7"+
    "\0\u1cfc\0\u1d31\0\u1d66\0\152\0\152\0\u1d9b\0\u1dd0\0\u1e05"+
    "\0\u1e3a\0\u1e6f\0\152\0\u1ea4\0\u1ed9\0\u1f0e\0\u1f43\0\152"+
    "\0\u1f78\0\u1fad\0\u1fe2\0\u2017\0\152\0\u204c\0\152\0\u2081"+
    "\0\u20b6\0\152\0\u20eb\0\u2120\0\u2155\0\u218a\0\u21bf\0\u21f4"+
    "\0\u2229\0\u225e\0\u2293\0\u22c8\0\u22fd\0\u2332\0\152\0\u2367"+
    "\0\u239c\0\u23d1\0\u2406\0\u243b\0\u2470\0\u24a5\0\u24da\0\u250f"+
    "\0\u2544\0\u2579\0\u25ae\0\u25e3\0\152\0\152\0\152\0\u2618"+
    "\0\152\0\152\0\152\0\152\0\152\0\u264d\0\u2682\0\152";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /** 
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\2\1\3\1\4\1\5\1\6\1\7\2\10\1\11"+
    "\1\3\1\12\1\13\1\3\1\14\1\15\1\16\1\17"+
    "\2\3\1\20\1\21\1\22\1\3\1\23\1\24\1\25"+
    "\1\3\1\26\1\27\1\3\1\30\1\31\1\32\1\33"+
    "\1\34\1\35\1\36\1\37\1\40\1\41\1\42\1\43"+
    "\1\44\1\45\1\46\1\47\1\50\1\51\1\52\1\53"+
    "\1\54\1\2\1\3\66\0\2\3\5\0\27\3\24\0"+
    "\2\3\1\0\1\55\1\4\5\0\7\55\1\56\17\55"+
    "\22\0\1\57\2\0\1\56\4\60\1\61\60\60\6\0"+
    "\1\10\57\0\2\3\5\0\1\3\1\62\2\3\1\63"+
    "\22\3\24\0\2\3\1\0\2\3\5\0\20\3\1\64"+
    "\6\3\24\0\2\3\1\0\2\3\5\0\15\3\1\65"+
    "\11\3\24\0\2\3\1\0\2\3\5\0\2\3\1\66"+
    "\1\3\1\67\2\3\1\70\13\3\1\71\3\3\24\0"+
    "\2\3\1\0\2\3\5\0\7\3\1\72\10\3\1\73"+
    "\6\3\24\0\2\3\1\0\2\3\5\0\4\3\1\74"+
    "\5\3\1\75\14\3\24\0\2\3\1\0\2\3\5\0"+
    "\1\3\1\76\2\3\1\77\7\3\1\100\1\101\11\3"+
    "\24\0\2\3\1\0\2\3\5\0\1\3\1\102\25\3"+
    "\24\0\2\3\1\0\2\3\5\0\10\3\1\103\5\3"+
    "\1\104\2\3\1\105\5\3\24\0\2\3\1\0\2\3"+
    "\5\0\13\3\1\106\13\3\24\0\2\3\1\0\2\3"+
    "\5\0\7\3\1\107\17\3\24\0\2\3\1\0\2\3"+
    "\5\0\7\3\1\110\17\3\24\0\2\3\1\0\2\3"+
    "\5\0\1\3\1\111\25\3\24\0\2\3\1\0\2\3"+
    "\5\0\3\3\1\112\11\3\1\113\11\3\24\0\2\3"+
    "\1\0\2\3\5\0\15\3\1\114\11\3\24\0\2\3"+
    "\1\0\2\3\5\0\15\3\1\115\11\3\24\0\2\3"+
    "\37\0\1\116\65\0\1\117\75\0\1\120\15\0\1\121"+
    "\37\0\1\122\1\123\23\0\1\121\37\0\1\123\1\124"+
    "\64\0\1\125\1\126\71\0\1\127\64\0\1\130\64\0"+
    "\1\131\14\0\2\55\5\0\27\55\25\0\1\55\1\0"+
    "\1\55\1\132\5\0\7\55\1\133\17\55\3\0\2\134"+
    "\20\0\1\133\2\0\1\135\14\0\1\136\41\0\1\137"+
    "\2\0\1\136\1\0\2\3\5\0\2\3\1\140\24\3"+
    "\24\0\2\3\1\0\2\3\5\0\1\3\1\141\25\3"+
    "\24\0\2\3\1\0\2\3\5\0\11\3\1\142\10\3"+
    "\1\143\4\3\24\0\2\3\1\0\2\3\5\0\21\3"+
    "\1\144\5\3\24\0\2\3\1\0\2\3\5\0\15\3"+
    "\1\145\11\3\24\0\2\3\1\0\2\3\5\0\7\3"+
    "\1\146\17\3\24\0\2\3\1\0\2\3\5\0\2\3"+
    "\1\147\24\3\24\0\2\3\1\0\2\3\5\0\14\3"+
    "\1\150\12\3\24\0\2\3\1\0\2\3\5\0\10\3"+
    "\1\151\16\3\24\0\2\3\1\0\2\3\5\0\1\3"+
    "\1\152\25\3\24\0\2\3\1\0\2\3\5\0\5\3"+
    "\1\153\21\3\24\0\2\3\1\0\2\3\5\0\1\154"+
    "\1\155\25\3\24\0\2\3\1\0\2\3\5\0\4\3"+
    "\1\156\22\3\24\0\2\3\1\0\2\3\5\0\1\3"+
    "\1\157\25\3\24\0\2\3\1\0\2\3\5\0\4\3"+
    "\1\160\22\3\24\0\2\3\1\0\2\3\5\0\20\3"+
    "\1\161\6\3\24\0\2\3\1\0\2\3\5\0\20\3"+
    "\1\162\6\3\24\0\2\3\1\0\2\3\5\0\2\3"+
    "\1\163\14\3\1\164\7\3\24\0\2\3\1\0\2\3"+
    "\5\0\13\3\1\165\13\3\24\0\2\3\1\0\2\3"+
    "\5\0\2\3\1\166\24\3\24\0\2\3\1\0\2\3"+
    "\5\0\2\3\1\167\24\3\24\0\2\3\1\0\2\3"+
    "\5\0\2\3\1\170\24\3\24\0\2\3\1\0\2\3"+
    "\5\0\14\3\1\171\12\3\24\0\2\3\1\0\2\3"+
    "\5\0\14\3\1\172\12\3\24\0\2\3\1\0\2\3"+
    "\5\0\20\3\1\173\6\3\24\0\2\3\1\0\2\3"+
    "\5\0\14\3\1\174\12\3\24\0\2\3\1\0\2\3"+
    "\5\0\20\3\1\175\6\3\24\0\2\3\2\0\1\121"+
    "\14\0\1\176\41\0\1\57\2\0\1\176\2\0\1\177"+
    "\37\0\2\123\21\0\43\125\1\200\1\201\20\125\6\126"+
    "\1\0\56\126\1\0\1\55\1\132\5\0\7\55\1\202"+
    "\17\55\25\0\1\202\1\0\1\55\1\203\5\0\7\55"+
    "\1\133\17\55\3\0\2\204\20\0\1\133\2\0\1\205"+
    "\14\0\1\206\22\0\2\207\20\0\1\206\2\0\1\210"+
    "\14\0\1\211\41\0\1\212\2\0\1\211\2\0\1\213"+
    "\14\0\1\214\22\0\2\215\20\0\1\214\2\0\1\216"+
    "\56\0\1\137\4\0\2\3\5\0\1\217\26\3\24\0"+
    "\2\3\1\0\2\3\5\0\5\3\1\220\21\3\24\0"+
    "\2\3\1\0\2\3\5\0\7\3\1\221\17\3\24\0"+
    "\2\3\1\0\2\3\5\0\7\3\1\222\17\3\24\0"+
    "\2\3\1\0\2\3\5\0\13\3\1\223\13\3\24\0"+
    "\2\3\1\0\2\3\5\0\7\3\1\224\17\3\24\0"+
    "\2\3\1\0\2\3\5\0\7\3\1\225\1\226\16\3"+
    "\24\0\2\3\1\0\2\3\5\0\2\3\1\227\24\3"+
    "\24\0\2\3\1\0\2\3\5\0\1\3\1\230\25\3"+
    "\24\0\2\3\1\0\2\3\5\0\23\3\1\231\3\3"+
    "\24\0\2\3\1\0\2\3\5\0\7\3\1\232\17\3"+
    "\24\0\2\3\1\0\2\3\5\0\7\3\1\233\17\3"+
    "\24\0\2\3\1\0\2\3\5\0\1\234\26\3\24\0"+
    "\2\3\1\0\2\3\5\0\5\3\1\235\21\3\24\0"+
    "\2\3\1\0\2\3\5\0\17\3\1\236\7\3\24\0"+
    "\2\3\1\0\2\3\5\0\1\3\1\237\2\3\1\240"+
    "\22\3\24\0\2\3\1\0\2\3\5\0\2\3\1\241"+
    "\24\3\24\0\2\3\1\0\2\3\5\0\7\3\1\242"+
    "\17\3\24\0\2\3\1\0\2\3\5\0\14\3\1\243"+
    "\12\3\24\0\2\3\1\0\2\3\5\0\7\3\1\244"+
    "\17\3\24\0\2\3\1\0\2\3\5\0\11\3\1\245"+
    "\15\3\24\0\2\3\1\0\2\3\5\0\16\3\1\246"+
    "\10\3\24\0\2\3\1\0\2\3\5\0\4\3\1\247"+
    "\22\3\24\0\2\3\1\0\2\3\5\0\6\3\1\250"+
    "\20\3\24\0\2\3\1\0\2\3\5\0\6\3\1\251"+
    "\20\3\24\0\2\3\1\0\2\3\5\0\2\3\1\252"+
    "\24\3\24\0\2\3\2\0\1\205\14\0\1\214\22\0"+
    "\2\134\20\0\1\214\2\0\1\177\14\0\1\253\41\0"+
    "\1\254\2\0\1\253\43\125\1\200\1\255\63\125\1\0"+
    "\1\201\20\125\1\0\1\55\1\203\5\0\7\55\1\202"+
    "\17\55\3\0\2\256\20\0\1\202\1\0\1\55\1\203"+
    "\5\0\7\55\1\202\17\55\25\0\1\202\2\0\1\256"+
    "\14\0\1\206\22\0\2\204\20\0\1\206\2\0\1\205"+
    "\14\0\1\206\44\0\1\206\2\0\1\256\14\0\1\206"+
    "\22\0\2\256\20\0\1\206\2\0\1\257\14\0\1\206"+
    "\22\0\2\207\20\0\1\206\2\0\1\210\14\0\1\211"+
    "\41\0\1\260\2\0\1\211\2\0\1\261\14\0\1\214"+
    "\22\0\2\262\20\0\1\214\2\0\1\263\56\0\1\212"+
    "\5\0\1\213\14\0\1\206\44\0\1\206\2\0\1\256"+
    "\14\0\1\214\22\0\2\204\20\0\1\214\2\0\1\213"+
    "\14\0\1\206\22\0\2\204\20\0\1\206\2\0\1\260"+
    "\56\0\1\212\4\0\2\3\5\0\3\3\1\264\23\3"+
    "\24\0\2\3\1\0\2\3\5\0\5\3\1\265\21\3"+
    "\24\0\2\3\1\0\2\3\5\0\13\3\1\266\13\3"+
    "\24\0\2\3\1\0\2\3\5\0\12\3\1\267\14\3"+
    "\24\0\2\3\1\0\2\3\5\0\14\3\1\270\12\3"+
    "\24\0\2\3\1\0\2\3\5\0\1\271\26\3\24\0"+
    "\2\3\1\0\2\3\5\0\11\3\1\272\15\3\24\0"+
    "\2\3\1\0\2\3\5\0\13\3\1\273\13\3\24\0"+
    "\2\3\1\0\2\3\5\0\2\3\1\274\24\3\24\0"+
    "\2\3\1\0\2\3\5\0\7\3\1\275\17\3\24\0"+
    "\2\3\1\0\2\3\5\0\21\3\1\276\5\3\24\0"+
    "\2\3\1\0\2\3\5\0\20\3\1\277\6\3\24\0"+
    "\2\3\1\0\2\3\5\0\15\3\1\300\11\3\24\0"+
    "\2\3\1\0\2\3\5\0\12\3\1\301\14\3\24\0"+
    "\2\3\1\0\2\3\5\0\20\3\1\302\6\3\24\0"+
    "\2\3\1\0\2\3\5\0\7\3\1\303\17\3\24\0"+
    "\2\3\2\0\1\304\37\0\2\253\23\0\1\305\64\0"+
    "\1\256\14\0\1\206\44\0\1\206\2\0\1\257\14\0"+
    "\1\206\44\0\1\206\2\0\1\260\56\0\1\260\5\0"+
    "\1\261\14\0\1\206\44\0\1\206\2\0\1\261\14\0"+
    "\1\206\22\0\2\207\20\0\1\206\2\0\1\263\56\0"+
    "\1\137\4\0\2\3\5\0\2\3\1\306\24\3\24\0"+
    "\2\3\1\0\2\3\5\0\4\3\1\307\22\3\24\0"+
    "\2\3\1\0\2\3\5\0\3\3\1\310\23\3\24\0"+
    "\2\3\1\0\2\3\5\0\4\3\1\311\22\3\24\0"+
    "\2\3\1\0\2\3\5\0\2\3\1\312\24\3\24\0"+
    "\2\3\1\0\2\3\5\0\7\3\1\313\17\3\24\0"+
    "\2\3\1\0\2\3\5\0\20\3\1\314\6\3\24\0"+
    "\2\3\1\0\2\3\5\0\16\3\1\315\10\3\24\0"+
    "\2\3\1\0\2\3\5\0\2\3\1\316\24\3\24\0"+
    "\2\3\1\0\2\3\5\0\16\3\1\317\10\3\24\0"+
    "\2\3\2\0\1\304\64\0\1\305\14\0\1\253\44\0"+
    "\1\253\1\0\2\3\5\0\20\3\1\320\6\3\24\0"+
    "\2\3\1\0\2\3\5\0\1\3\1\321\25\3\24\0"+
    "\2\3\1\0\2\3\5\0\2\3\1\322\24\3\24\0"+
    "\2\3\1\0\2\3\5\0\14\3\1\323\12\3\24\0"+
    "\2\3\1\0\2\3\5\0\16\3\1\324\10\3\24\0"+
    "\2\3\1\0\2\3\5\0\11\3\1\325\15\3\24\0"+
    "\2\3\1\0\2\3\5\0\20\3\1\326\6\3\24\0"+
    "\2\3\1\0\2\3\5\0\11\3\1\327\15\3\24\0"+
    "\2\3\1\0\2\3\5\0\21\3\1\330\5\3\24\0"+
    "\2\3\1\0\2\3\5\0\15\3\1\331\11\3\24\0"+
    "\2\3\1\0\2\3\5\0\2\3\1\332\24\3\24\0"+
    "\2\3\1\0\2\3\5\0\13\3\1\333\13\3\24\0"+
    "\2\3\1\0\2\3\5\0\11\3\1\334\15\3\24\0"+
    "\2\3\1\0\2\3\5\0\5\3\1\335\21\3\24\0"+
    "\2\3\1\0\2\3\5\0\7\3\1\336\17\3\24\0"+
    "\2\3\1\0\2\3\5\0\16\3\1\337\10\3\24\0"+
    "\2\3\1\0\2\3\5\0\2\3\1\340\24\3\24\0"+
    "\2\3\1\0\2\3\5\0\2\3\1\341\24\3\24\0"+
    "\2\3\1\0\2\3\5\0\5\3\1\342\21\3\24\0"+
    "\2\3\1\0\2\3\5\0\15\3\1\343\11\3\24\0"+
    "\2\3\1\0\2\3\5\0\16\3\1\344\10\3\24\0"+
    "\2\3\1\0\2\3\5\0\22\3\1\345\4\3\24\0"+
    "\2\3\1\0\2\3\5\0\14\3\1\346\12\3\24\0"+
    "\2\3\1\0\2\3\5\0\15\3\1\347\11\3\24\0"+
    "\2\3\1\0\2\3\5\0\20\3\1\350\6\3\24\0"+
    "\2\3\1\0\2\3\5\0\2\3\1\351\24\3\24\0"+
    "\2\3\1\0\2\3\5\0\13\3\1\352\13\3\24\0"+
    "\2\3\1\0\2\3\5\0\15\3\1\353\11\3\24\0"+
    "\2\3\1\0\2\3\5\0\20\3\1\354\6\3\24\0"+
    "\2\3\1\0\2\3\5\0\12\3\1\355\7\3\1\356"+
    "\2\3\1\357\1\3\24\0\2\3\1\0\2\3\5\0"+
    "\2\3\1\360\24\3\24\0\2\3\1\0\2\3\5\0"+
    "\7\3\1\361\17\3\24\0\2\3\1\0\2\3\5\0"+
    "\16\3\1\362\10\3\24\0\2\3\1\0\2\3\5\0"+
    "\12\3\1\363\7\3\1\364\2\3\1\365\1\3\24\0"+
    "\2\3\1\0\2\3\5\0\22\3\1\366\4\3\24\0"+
    "\2\3\1\0\2\3\5\0\13\3\1\367\13\3\24\0"+
    "\2\3\1\0\2\3\5\0\7\3\1\370\17\3\24\0"+
    "\2\3";

  private static int [] zzUnpackTrans() {
    int [] result = new int[9911];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unkown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\1\0\1\11\2\1\1\11\2\1\1\11\26\1\2\11"+
    "\3\1\11\11\3\1\1\0\1\11\34\1\3\11\2\1"+
    "\1\0\1\1\1\0\1\1\3\11\5\1\1\0\40\1"+
    "\2\0\51\1\2\0\114\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[248];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the 
   * matched text
   */
  private int yycolumn;

  /** 
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /* user code: */
    private Symbol symbol(int type, Object value){
        return new Symbol(type, yyline, yycolumn, value);
    }

    private Symbol symbol(int type){
        return new Symbol(type, yyline, yycolumn);
    }


  /**
   * Creates a new scanner
   * There is also a java.io.InputStream version of this constructor.
   *
   * @param   in  the java.io.Reader to read input from.
   */
  LexerCup(java.io.Reader in) {
    this.zzReader = in;
  }

  /**
   * Creates a new scanner.
   * There is also java.io.Reader version of this constructor.
   *
   * @param   in  the java.io.Inputstream to read input from.
   */
  LexerCup(java.io.InputStream in) {
    this(new java.io.InputStreamReader(in));
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   * 
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzCurrentPos*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
    }

    /* finally: fill the buffer with new input */
    int numRead = zzReader.read(zzBuffer, zzEndRead,
                                            zzBuffer.length-zzEndRead);

    if (numRead > 0) {
      zzEndRead+= numRead;
      return false;
    }
    // unlikely but not impossible: read 0 characters, but not at end of stream    
    if (numRead == 0) {
      int c = zzReader.read();
      if (c == -1) {
        return true;
      } else {
        zzBuffer[zzEndRead++] = (char) c;
        return false;
      }     
    }

	// numRead < 0
    return true;
  }

    
  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream 
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * @param reader   the new input stream 
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the 
   * matched text. 
   * 
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch. 
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of 
   * yypushback(int) and a match-all fallback rule) this method 
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  } 


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() throws java.io.IOException {
    if (!zzEOFDone) {
      zzEOFDone = true;
      yyclose();
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public java_cup.runtime.Symbol next_token() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      boolean zzR = false;
      for (zzCurrentPosL = zzStartRead; zzCurrentPosL < zzMarkedPosL;
                                                             zzCurrentPosL++) {
        switch (zzBufferL[zzCurrentPosL]) {
        case '\u000B':
        case '\u000C':
        case '\u0085':
        case '\u2028':
        case '\u2029':
          yyline++;
          yycolumn = 0;
          zzR = false;
          break;
        case '\r':
          yyline++;
          yycolumn = 0;
          zzR = true;
          break;
        case '\n':
          if (zzR)
            zzR = false;
          else {
            yyline++;
            yycolumn = 0;
          }
          break;
        default:
          zzR = false;
          yycolumn++;
        }
      }

      if (zzR) {
        // peek one character ahead if it is \n (if we have counted one line too much)
        boolean zzPeek;
        if (zzMarkedPosL < zzEndReadL)
          zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        else if (zzAtEOF)
          zzPeek = false;
        else {
          boolean eof = zzRefill();
          zzEndReadL = zzEndRead;
          zzMarkedPosL = zzMarkedPos;
          zzBufferL = zzBuffer;
          if (eof) 
            zzPeek = false;
          else 
            zzPeek = zzBufferL[zzMarkedPosL] == '\n';
        }
        if (zzPeek) yyline--;
      }
      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;
  
      zzState = ZZ_LEXSTATE[zzLexicalState];


      zzForAction: {
        while (true) {
    
          if (zzCurrentPosL < zzEndReadL)
            zzInput = zzBufferL[zzCurrentPosL++];
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = zzBufferL[zzCurrentPosL++];
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          int zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
        case 4: 
          { return new Symbol(sym.SimbEsp_Coma, yychar, yyline, yytext());
          }
        case 78: break;
        case 48: 
          { return new Symbol(sym.PR_Stop, yychar, yyline, yytext());
          }
        case 79: break;
        case 23: 
          { return new Symbol(sym.SimbEsp_Punto, yychar, yyline, yytext());
          }
        case 80: break;
        case 25: 
          { return new Symbol(sym.ERROR5, yychar, yyline, yytext());
          }
        case 81: break;
        case 55: 
          { return new Symbol(sym.PR_Word, yychar, yyline, yytext());
          }
        case 82: break;
        case 67: 
          { return new Symbol(sym.PR_Default, yychar, yyline, yytext());
          }
        case 83: break;
        case 53: 
          { return new Symbol(sym.PR_Part, yychar, yyline, yytext());
          }
        case 84: break;
        case 18: 
          { return new Symbol(sym.OpAgrup_CorchApert, yychar, yyline, yytext());
          }
        case 85: break;
        case 63: 
          { return new Symbol(sym.PR_While, yychar, yyline, yytext());
          }
        case 86: break;
        case 77: 
          { return new Symbol(sym.PR_Setfilamenttype, yychar, yyline, yytext());
          }
        case 87: break;
        case 24: 
          { return new Symbol(sym.SimbEsp_DosPuntos, yychar, yyline, yytext());
          }
        case 88: break;
        case 54: 
          { return new Symbol(sym.PR_Main, yychar, yyline, yytext());
          }
        case 89: break;
        case 17: 
          { return new Symbol(sym.OpAgrup_ParCierre, yychar, yyline, yytext());
          }
        case 90: break;
        case 27: 
          { return new Symbol(sym.Cadena_texto, yychar, yyline, yytext());
          }
        case 91: break;
        case 47: 
          { return new Symbol(sym.PR_Home, yychar, yyline, yytext());
          }
        case 92: break;
        case 49: 
          { return new Symbol(sym.PR_Draw, yychar, yyline, yytext());
          }
        case 93: break;
        case 26: 
          { return new Symbol(sym.ERROR2, yychar, yyline, yytext());
          }
        case 94: break;
        case 15: 
          { return new Symbol(sym.OpAsig, yychar, yyline, yytext());
          }
        case 95: break;
        case 70: 
          { return new Symbol(sym.PR_Setextrusory, yychar, yyline, yytext());
          }
        case 96: break;
        case 7: 
          { return new Symbol(sym.OpLog_Not, yychar, yyline, yytext());
          }
        case 97: break;
        case 6: 
          { /*Ignore*/
          }
        case 98: break;
        case 52: 
          { return new Symbol(sym.PR_Fill, yychar, yyline, yytext());
          }
        case 99: break;
        case 30: 
          { return new Symbol(sym.OpLog_Or, yychar, yyline, yytext());
          }
        case 100: break;
        case 21: 
          { return new Symbol(sym.OpAgrup_LlaveCierre, yychar, yyline, yytext());
          }
        case 101: break;
        case 60: 
          { return new Symbol(sym.PR_Sleep, yychar, yyline, yytext());
          }
        case 102: break;
        case 51: 
          { return new Symbol(sym.PR_Flag, yychar, yyline, yytext());
          }
        case 103: break;
        case 36: 
          { return new Symbol(sym.OpRel_Igual, yychar, yyline, yytext());
          }
        case 104: break;
        case 33: 
          { return new Symbol(sym.Op_Decremento, yychar, yyline, yytext());
          }
        case 105: break;
        case 1: 
          { return new Symbol(sym.Simbolo_Especial, yychar, yyline, yytext());
          }
        case 106: break;
        case 20: 
          { return new Symbol(sym.OpAgrup_LlaveApert, yychar, yyline, yytext());
          }
        case 107: break;
        case 71: 
          { return new Symbol(sym.PR_Setextrusorz, yychar, yyline, yytext());
          }
        case 108: break;
        case 29: 
          { return new Symbol(sym.OpLog_And, yychar, yyline, yytext());
          }
        case 109: break;
        case 11: 
          { return new Symbol(sym.OpAritm_Div, yychar, yyline, yytext());
          }
        case 110: break;
        case 19: 
          { return new Symbol(sym.OpAgrup_CorchCierre, yychar, yyline, yytext());
          }
        case 111: break;
        case 22: 
          { return new Symbol(sym.PuntoComa, yychar, yyline, yytext());
          }
        case 112: break;
        case 57: 
          { return new Symbol(sym.PR_Port, yychar, yyline, yytext());
          }
        case 113: break;
        case 66: 
          { return new Symbol(sym.PR_Return, yychar, yyline, yytext());
          }
        case 114: break;
        case 46: 
          { return new Symbol(sym.PR_True, yychar, yyline, yytext());
          }
        case 115: break;
        case 10: 
          { return new Symbol(sym.OpAritm_Mult, yychar, yyline, yytext());
          }
        case 116: break;
        case 38: 
          { return new Symbol(sym.Numero_Part, yychar, yyline, yytext()) ;
          }
        case 117: break;
        case 2: 
          { return new Symbol(sym.Identificador, yychar, yyline, yytext());
          }
        case 118: break;
        case 13: 
          { return new Symbol(sym.OpRel_Menor, yychar, yyline, yytext());
          }
        case 119: break;
        case 65: 
          { return new Symbol(sym.PR_Option, yychar, yyline, yytext());
          }
        case 120: break;
        case 74: 
          { return new Symbol(sym.PR_Getextrusorx, yychar, yyline, yytext());
          }
        case 121: break;
        case 5: 
          { return new Symbol(sym.SimbEsp_Comilla, yychar, yyline, yytext());
          }
        case 122: break;
        case 41: 
          { return new Symbol(sym.PR_For, yychar, yyline, yytext());
          }
        case 123: break;
        case 16: 
          { return new Symbol(sym.OpAgrup_ParApert, yychar, yyline, yytext());
          }
        case 124: break;
        case 45: 
          { return new Symbol(sym.ERROR3, yychar, yyline, yytext());
          }
        case 125: break;
        case 14: 
          { return new Symbol(sym.OpRel_Mayor, yychar, yyline, yytext());
          }
        case 126: break;
        case 50: 
          { return new Symbol(sym.PR_Else, yychar, yyline, yytext());
          }
        case 127: break;
        case 58: 
          { return new Symbol(sym.PR_Catch, yychar, yyline, yytext());
          }
        case 128: break;
        case 39: 
          { return new Symbol(sym.PR_Try, yychar, yyline, yytext());
          }
        case 129: break;
        case 40: 
          { return new Symbol(sym.PR_Def, yychar, yyline, yytext());
          }
        case 130: break;
        case 68: 
          { return new Symbol(sym.PR_Exeption, yychar, yyline, yytext());
          }
        case 131: break;
        case 12: 
          { return new Symbol(sym.OpAritm_Resto, yychar, yyline, yytext());
          }
        case 132: break;
        case 8: 
          { return new Symbol(sym.OpAritm_Suma, yychar, yyline, yytext());
          }
        case 133: break;
        case 72: 
          { return new Symbol(sym.PR_Filamenttype, yychar, yyline, yytext());
          }
        case 134: break;
        case 31: 
          { return new Symbol(sym.OpRel_Diferente, yychar, yyline, yytext());
          }
        case 135: break;
        case 37: 
          { return new Symbol(sym.ERROR4, yychar, yyline, yytext());
          }
        case 136: break;
        case 42: 
          { return new Symbol(sym.PR_Ing, yychar, yyline, yytext());
          }
        case 137: break;
        case 59: 
          { return new Symbol(sym.PR_Class, yychar, yyline, yytext());
          }
        case 138: break;
        case 64: 
          { return new Symbol(sym.PR_Switch, yychar, yyline, yytext());
          }
        case 139: break;
        case 56: 
          { return new Symbol(sym.PR_Void, yychar, yyline, yytext());
          }
        case 140: break;
        case 34: 
          { return new Symbol(sym.OpRel_MenorIgual, yychar, yyline, yytext());
          }
        case 141: break;
        case 75: 
          { return new Symbol(sym.PR_Getextrusory, yychar, yyline, yytext());
          }
        case 142: break;
        case 73: 
          { return new Symbol(sym.PR_Interruption, yychar, yyline, yytext());
          }
        case 143: break;
        case 9: 
          { return new Symbol(sym.OpAritm_Resta, yychar, yyline, yytext());
          }
        case 144: break;
        case 32: 
          { return new Symbol(sym.Op_Incremento, yychar, yyline, yytext());
          }
        case 145: break;
        case 43: 
          { return new Symbol(sym.PR_Imp, yychar, yyline, yytext());
          }
        case 146: break;
        case 61: 
          { return new Symbol(sym.PR_Exact, yychar, yyline, yytext());
          }
        case 147: break;
        case 35: 
          { return new Symbol(sym.OpRel_MayorIgual, yychar, yyline, yytext());
          }
        case 148: break;
        case 3: 
          { return new Symbol(sym.Numero_Exact, yychar, yyline, yytext());
          }
        case 149: break;
        case 44: 
          { return new Symbol(sym.ERROR1, yychar, yyline, yytext());
          }
        case 150: break;
        case 69: 
          { return new Symbol(sym.PR_Setextrusorx, yychar, yyline, yytext());
          }
        case 151: break;
        case 62: 
          { return new Symbol(sym.PR_False, yychar, yyline, yytext());
          }
        case 152: break;
        case 76: 
          { return new Symbol(sym.PR_Getextrusorz, yychar, yyline, yytext());
          }
        case 153: break;
        case 28: 
          { return new Symbol(sym.PR_If, yychar, yyline, yytext());
          }
        case 154: break;
        default: 
          if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
            zzAtEOF = true;
            zzDoEOF();
              { return new java_cup.runtime.Symbol(sym.EOF); }
          } 
          else {
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
